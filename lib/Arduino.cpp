/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Arduino
*
* Wrapping sgArduino.pas
*/

#include "SGSDK.h"
#include "Arduino.h"

#include "Types.h"

arduino_device arduino_device_named(const char *name)
{
    return sg_Arduino_ArduinoDeviceNamed(name);
}

bool arduino_has_data(arduino_device dev)
{
    return sg_Arduino_ArduinoHasData(dev) != 0;
}

unsigned char arduino_read_byte(arduino_device dev)
{
    return sg_Arduino_ArduinoReadByte(dev);
}

#ifdef __cplusplus

unsigned char arduino_read_byte(arduino_device dev, int32_t timeout)
{
    return sg_Arduino_ArduinoReadByteTimeout(dev, timeout);
}

#endif

unsigned char arduino_read_byte_timeout(arduino_device dev, int32_t timeout)
{
    return sg_Arduino_ArduinoReadByteTimeout(dev, timeout);
}

void arduino_read_line(arduino_device dev, char *result)
{
    sg_Arduino_ArduinoReadLine(dev, result);
}

#ifdef __cplusplus

void arduino_read_line(arduino_device dev, int32_t timeout, char *result)
{
    sg_Arduino_ArduinoReadLineTimeout(dev, timeout, result);
}

#endif

void arduino_read_line_timeout(arduino_device dev, int32_t timeout, char *result)
{
    sg_Arduino_ArduinoReadLineTimeout(dev, timeout, result);
}

void arduino_send_byte(arduino_device dev, unsigned char value)
{
    sg_Arduino_ArduinoSendByte(dev, value);
}

void arduino_send_string(arduino_device dev, const char *value)
{
    sg_Arduino_ArduinoSendString(dev, value);
}

void arduino_send_string_line(arduino_device dev, const char *value)
{
    sg_Arduino_ArduinoSendStringLine(dev, value);
}

arduino_device create_arduino_device(const char *port, int32_t baud)
{
    return sg_Arduino_CreateArduinoDevice(port, baud);
}

#ifdef __cplusplus

arduino_device create_arduino_device(const char *name, const char *port, int32_t baud)
{
    return sg_Arduino_CreateArduinoNamed(name, port, baud);
}

#endif

arduino_device create_arduino_named(const char *name, const char *port, int32_t baud)
{
    return sg_Arduino_CreateArduinoNamed(name, port, baud);
}

#ifdef __cplusplus

void free_arduino_device(arduino_device &dev)
{
    sg_Arduino_FreeArduinoDevice(&dev);
}

#endif

void free_arduino_device(arduino_device *dev)
{
    sg_Arduino_FreeArduinoDevice(dev);
}

bool has_arduino_device(const char *name)
{
    return sg_Arduino_HasArduinoDevice(name) != 0;
}

void release_all_arduino_devices()
{
    sg_Arduino_ReleaseAllArduinoDevices();
}

void release_arduino_device(const char *name)
{
    sg_Arduino_ReleaseArduinoDevice(name);
}

