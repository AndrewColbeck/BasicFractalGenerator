/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Camera
*
* Wrapping sgCamera.pas
*/

#include "SGSDK.h"
#include "Camera.h"

#include "Types.h"

point2d camera_pos()
{
    return sg_Camera_CameraPos();
}

float camera_x()
{
    return sg_Camera_CameraX();
}

float camera_y()
{
    return sg_Camera_CameraY();
}

#ifdef __cplusplus

void center_camera_on(sprite s, const vector &offset)
{
    sg_Camera_CenterCameraOn(s, &offset);
}

#endif

void center_camera_on(sprite s, const vector *offset)
{
    sg_Camera_CenterCameraOn(s, offset);
}

void center_camera_on_byval(sprite s, const vector offset)
{
    sg_Camera_CenterCameraOn(s, &offset);
}

#ifdef __cplusplus

void center_camera_on(sprite s, float offsetX, float offsetY)
{
    sg_Camera_CenterCameraOnWithXYOffset(s, offsetX, offsetY);
}

#endif

void center_camera_on_with_xyoffset(sprite s, float offsetX, float offsetY)
{
    sg_Camera_CenterCameraOnWithXYOffset(s, offsetX, offsetY);
}

#ifdef __cplusplus

void move_camera_by(const vector &offset)
{
    sg_Camera_MoveCameraBy(&offset);
}

#endif

void move_camera_by(const vector *offset)
{
    sg_Camera_MoveCameraBy(offset);
}

void move_camera_by_byval(const vector offset)
{
    sg_Camera_MoveCameraBy(&offset);
}

#ifdef __cplusplus

void move_camera_by(float dx, float dy)
{
    sg_Camera_MoveCameraByXY(dx, dy);
}

#endif

void move_camera_by_xy(float dx, float dy)
{
    sg_Camera_MoveCameraByXY(dx, dy);
}

#ifdef __cplusplus

void move_camera_to(const point2d &pt)
{
    sg_Camera_MoveCameraTo(&pt);
}

#endif

void move_camera_to(const point2d *pt)
{
    sg_Camera_MoveCameraTo(pt);
}

void move_camera_to_byval(const point2d pt)
{
    sg_Camera_MoveCameraTo(&pt);
}

#ifdef __cplusplus

void move_camera_to(float x, float y)
{
    sg_Camera_MoveCameraToXY(x, y);
}

#endif

void move_camera_to_xy(float x, float y)
{
    sg_Camera_MoveCameraToXY(x, y);
}

#ifdef __cplusplus

bool point_on_screen(const point2d &pt)
{
    return sg_Camera_PointOnScreen(&pt) != 0;
}

#endif

bool point_on_screen(const point2d *pt)
{
    return sg_Camera_PointOnScreen(pt) != 0;
}

bool point_on_screen_byval(const point2d pt)
{
    return sg_Camera_PointOnScreen(&pt) != 0;
}

#ifdef __cplusplus

bool rect_on_screen(const rectangle &rect)
{
    return sg_Camera_RectOnScreen(&rect) != 0;
}

#endif

bool rect_on_screen(const rectangle *rect)
{
    return sg_Camera_RectOnScreen(rect) != 0;
}

bool rect_on_screen_byval(const rectangle rect)
{
    return sg_Camera_RectOnScreen(&rect) != 0;
}

#ifdef __cplusplus

void set_camera_pos(const point2d &pt)
{
    sg_Camera_SetCameraPos(&pt);
}

#endif

void set_camera_pos(const point2d *pt)
{
    sg_Camera_SetCameraPos(pt);
}

void set_camera_pos_byval(const point2d pt)
{
    sg_Camera_SetCameraPos(&pt);
}

void set_camera_x(float x)
{
    sg_Camera_SetCameraX(x);
}

void set_camera_y(float y)
{
    sg_Camera_SetCameraY(y);
}

#ifdef __cplusplus

point2d to_screen(const point2d &worldPoint)
{
    return sg_Camera_ToScreen(&worldPoint);
}

#endif

point2d to_screen(const point2d *worldPoint)
{
    return sg_Camera_ToScreen(worldPoint);
}

point2d to_screen_byval(const point2d worldPoint)
{
    return sg_Camera_ToScreen(&worldPoint);
}

#ifdef __cplusplus

rectangle to_screen(const rectangle &rect)
{
    return sg_Camera_ToScreenRect(&rect);
}

#endif

rectangle to_screen_rect(const rectangle *rect)
{
    return sg_Camera_ToScreenRect(rect);
}

rectangle to_screen_rect_byval(const rectangle rect)
{
    return sg_Camera_ToScreenRect(&rect);
}

float to_screen_x(float worldX)
{
    return sg_Camera_ToScreenX(worldX);
}

float to_screen_y(float worldY)
{
    return sg_Camera_ToScreenY(worldY);
}

#ifdef __cplusplus

point2d to_world(const point2d &screenPoint)
{
    return sg_Camera_ToWorld(&screenPoint);
}

#endif

point2d to_world(const point2d *screenPoint)
{
    return sg_Camera_ToWorld(screenPoint);
}

point2d to_world_byval(const point2d screenPoint)
{
    return sg_Camera_ToWorld(&screenPoint);
}

float to_world_x(float screenX)
{
    return sg_Camera_ToWorldX(screenX);
}

float to_world_y(float screenY)
{
    return sg_Camera_ToWorldY(screenY);
}

