/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - WindowManager
*
* Wrapping sgWindowManager.pas
*/

#include "SGSDK.h"
#include "WindowManager.h"

#include "Types.h"

void change_screen_size(int32_t width, int32_t height)
{
    sg_WindowManager_ChangeScreenSize(width, height);
}

#ifdef __cplusplus

void change_window_size(const char *name, int32_t width, int32_t height)
{
    sg_WindowManager_changeWindowSizeNamed(name, width, height);
}

#endif

void change_window_size_named(const char *name, int32_t width, int32_t height)
{
    sg_WindowManager_changeWindowSizeNamed(name, width, height);
}

void change_window_size(window wind, int32_t width, int32_t height)
{
    sg_WindowManager_ChangeWindowSize(wind, width, height);
}

void close_window(window wind)
{
    sg_WindowManager_CloseWindow(wind);
}

#ifdef __cplusplus

void close_window(const char *name)
{
    sg_WindowManager_CloseWindowNamed(name);
}

#endif

void close_window_named(const char *name)
{
    sg_WindowManager_CloseWindowNamed(name);
}

bool has_window(const char *name)
{
    return sg_WindowManager_HasWindow(name) != 0;
}

void move_window(window wind, int32_t x, int32_t y)
{
    sg_WindowManager_MoveWindow(wind, x, y);
}

#ifdef __cplusplus

void move_window(const char *name, int32_t x, int32_t y)
{
    sg_WindowManager_MoveWindowNamed(name, x, y);
}

#endif

void move_window_named(const char *name, int32_t x, int32_t y)
{
    sg_WindowManager_MoveWindowNamed(name, x, y);
}

window open_window(const char *caption, int32_t width, int32_t height)
{
    return sg_WindowManager_OpenWindow(caption, width, height);
}

void save_screenshot(window src, const char *filepath)
{
    sg_WindowManager_SaveScreenshot(src, filepath);
}

int32_t screen_height()
{
    return sg_WindowManager_ScreenHeight();
}

int32_t screen_width()
{
    return sg_WindowManager_ScreenWidth();
}

#ifdef __cplusplus

void set_current_window(const char *name)
{
    sg_WindowManager_SetCurrentWindowNamed(name);
}

#endif

void set_current_window_named(const char *name)
{
    sg_WindowManager_SetCurrentWindowNamed(name);
}

void set_current_window(window wnd)
{
    sg_WindowManager_SetCurrentWindow(wnd);
}

void toggle_full_screen()
{
    sg_WindowManager_ToggleFullScreen();
}

void toggle_window_border()
{
    sg_WindowManager_ToggleWindowBorder();
}

window window_at_index(int32_t idx)
{
    return sg_WindowManager_WindowAtIndex(idx);
}

#ifdef __cplusplus

bool window_close_requested()
{
    return sg_WindowManager_PrimaryWindowCloseRequested() != 0;
}

#endif

bool primary_window_close_requested()
{
    return sg_WindowManager_PrimaryWindowCloseRequested() != 0;
}

bool window_close_requested(window wind)
{
    return sg_WindowManager_WindowCloseRequested(wind) != 0;
}

int32_t window_count()
{
    return sg_WindowManager_WindowCount();
}

int32_t window_height(window wind)
{
    return sg_WindowManager_WindowHeight(wind);
}

#ifdef __cplusplus

int32_t window_height(const char *name)
{
    return sg_WindowManager_WindowHeightNamed(name);
}

#endif

int32_t window_height_named(const char *name)
{
    return sg_WindowManager_WindowHeightNamed(name);
}

window window_named(const char *name)
{
    return sg_WindowManager_WindowNamed(name);
}

point2d window_position(window wind)
{
    return sg_WindowManager_WindowPosition(wind);
}

#ifdef __cplusplus

point2d window_position(const char *name)
{
    return sg_WindowManager_WindowPositionNamed(name);
}

#endif

point2d window_position_named(const char *name)
{
    return sg_WindowManager_WindowPositionNamed(name);
}

int32_t window_width(window wind)
{
    return sg_WindowManager_WindowWidth(wind);
}

#ifdef __cplusplus

int32_t window_width(const char *name)
{
    return sg_WindowManager_WindowWidthNamed(name);
}

#endif

int32_t window_width_named(const char *name)
{
    return sg_WindowManager_WindowWidthNamed(name);
}

window window_with_focus()
{
    return sg_WindowManager_WindowWithFocus();
}

int32_t window_x(window wind)
{
    return sg_WindowManager_WindowX(wind);
}

#ifdef __cplusplus

int32_t window_x(const char *name)
{
    return sg_WindowManager_WindowXNamed(name);
}

#endif

int32_t window_xnamed(const char *name)
{
    return sg_WindowManager_WindowXNamed(name);
}

#ifdef __cplusplus

int32_t window_y(const char *name)
{
    return sg_WindowManager_WindowYNamed(name);
}

#endif

int32_t window_ynamed(const char *name)
{
    return sg_WindowManager_WindowYNamed(name);
}

int32_t window_y(window wind)
{
    return sg_WindowManager_WindowY(wind);
}

