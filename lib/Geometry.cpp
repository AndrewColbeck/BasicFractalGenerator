/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Geometry
*
* Wrapping sgGeometry.pas
*/

#include "SGSDK.h"
#include "Geometry.h"

#include "Types.h"

#ifdef __cplusplus

vector add_vectors(const vector &v1, const vector &v2)
{
    return sg_Geometry_AddVectors(&v1, &v2);
}

#endif

vector add_vectors(const vector *v1, const vector *v2)
{
    return sg_Geometry_AddVectors(v1, v2);
}

vector add_vectors_byval(const vector v1, const vector v2)
{
    return sg_Geometry_AddVectors(&v1, &v2);
}

#ifdef __cplusplus

void apply_matrix(const matrix2d  &m, triangle  &tri)
{
    sg_Geometry_ApplyMatrix(&m, &tri);
}

#endif

void apply_matrix(const matrix2d  *m, triangle  *tri)
{
    sg_Geometry_ApplyMatrix(m, tri);
}

void apply_matrix_byval(const matrix2d  m, triangle  *tri)
{
    sg_Geometry_ApplyMatrix(&m, tri);
}

#ifdef __cplusplus

void apply_matrix(const matrix2d  &m, quad &quad)
{
    sg_Geometry_ApplyMatrixToQuad(&m, &quad);
}

#endif

void apply_matrix_to_quad(const matrix2d  *m, quad *quad)
{
    sg_Geometry_ApplyMatrixToQuad(m, quad);
}

void apply_matrix_to_quad_byval(const matrix2d  m, quad *quad)
{
    sg_Geometry_ApplyMatrixToQuad(&m, quad);
}

#ifdef __cplusplus

float calculate_angle(const vector &v1, const vector &v2)
{
    return sg_Geometry_CalculateAngleBetweenVectors(&v1, &v2);
}

#endif

float calculate_angle_between_vectors(const vector *v1, const vector *v2)
{
    return sg_Geometry_CalculateAngleBetweenVectors(v1, v2);
}

float calculate_angle_between_vectors_byval(const vector v1, const vector v2)
{
    return sg_Geometry_CalculateAngleBetweenVectors(&v1, &v2);
}

#ifdef __cplusplus

float calculate_angle(sprite s1, sprite s2)
{
    return sg_Geometry_CalculateAngleBetweenSprites(s1, s2);
}

#endif

float calculate_angle_between_sprites(sprite s1, sprite s2)
{
    return sg_Geometry_CalculateAngleBetweenSprites(s1, s2);
}

float calculate_angle(float x1, float y1, float x2, float y2)
{
    return sg_Geometry_CalculateAngle(x1, y1, x2, y2);
}

#ifdef __cplusplus

float calculate_angle_between(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_CalculateAngleBetween(&pt1, &pt2);
}

#endif

float calculate_angle_between(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_CalculateAngleBetween(pt1, pt2);
}

float calculate_angle_between_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_CalculateAngleBetween(&pt1, &pt2);
}

#ifdef __cplusplus

point2d center_point(const circle &c)
{
    return sg_Geometry_CircleCenterPoint(&c);
}

#endif

point2d circle_center_point(const circle *c)
{
    return sg_Geometry_CircleCenterPoint(c);
}

point2d circle_center_point_byval(const circle c)
{
    return sg_Geometry_CircleCenterPoint(&c);
}

#ifdef __cplusplus

circle circle_at(float x, float y, float radius)
{
    return sg_Geometry_CircleFromXY(x, y, radius);
}

#endif

circle circle_from_xy(float x, float y, float radius)
{
    return sg_Geometry_CircleFromXY(x, y, radius);
}

#ifdef __cplusplus

circle circle_at(const point2d &pt, float radius)
{
    return sg_Geometry_CircleAt(&pt, radius);
}

#endif

circle circle_at(const point2d *pt, float radius)
{
    return sg_Geometry_CircleAt(pt, radius);
}

circle circle_at_byval(const point2d pt, float radius)
{
    return sg_Geometry_CircleAt(&pt, radius);
}

#ifdef __cplusplus

float circle_radius(const circle &c)
{
    return sg_Geometry_CircleRadius(&c);
}

#endif

float circle_radius(const circle *c)
{
    return sg_Geometry_CircleRadius(c);
}

float circle_radius_byval(const circle c)
{
    return sg_Geometry_CircleRadius(&c);
}

#ifdef __cplusplus

float circle_x(const circle &c)
{
    return sg_Geometry_CircleX(&c);
}

#endif

float circle_x(const circle *c)
{
    return sg_Geometry_CircleX(c);
}

float circle_x_byval(const circle c)
{
    return sg_Geometry_CircleX(&c);
}

#ifdef __cplusplus

float circle_y(const circle &c)
{
    return sg_Geometry_CircleY(&c);
}

#endif

float circle_y(const circle *c)
{
    return sg_Geometry_CircleY(c);
}

float circle_y_byval(const circle c)
{
    return sg_Geometry_CircleY(&c);
}

#ifdef __cplusplus

point2d closest_point_on_circle(const point2d &fromPt, const circle &c)
{
    return sg_Geometry_ClosestPointOnCircle(&fromPt, &c);
}

#endif

point2d closest_point_on_circle(const point2d *fromPt, const circle *c)
{
    return sg_Geometry_ClosestPointOnCircle(fromPt, c);
}

point2d closest_point_on_circle_byval(const point2d fromPt, const circle c)
{
    return sg_Geometry_ClosestPointOnCircle(&fromPt, &c);
}

#ifdef __cplusplus

point2d closest_point_on_line(float x, float y, const line_segment &line)
{
    return sg_Geometry_ClosestPointOnLineXY(x, y, &line);
}

#endif

point2d closest_point_on_line_xy(float x, float y, const line_segment *line)
{
    return sg_Geometry_ClosestPointOnLineXY(x, y, line);
}

point2d closest_point_on_line_xy_byval(float x, float y, const line_segment line)
{
    return sg_Geometry_ClosestPointOnLineXY(x, y, &line);
}

#ifdef __cplusplus

point2d closest_point_on_line(const point2d &fromPt, const line_segment &line)
{
    return sg_Geometry_ClosestPointOnLine(&fromPt, &line);
}

#endif

point2d closest_point_on_line(const point2d *fromPt, const line_segment *line)
{
    return sg_Geometry_ClosestPointOnLine(fromPt, line);
}

point2d closest_point_on_line_byval(const point2d fromPt, const line_segment line)
{
    return sg_Geometry_ClosestPointOnLine(&fromPt, &line);
}

#ifdef __cplusplus

point2d closest_point_on_line_from_circle(const circle &c, const line_segment &line)
{
    return sg_Geometry_ClosestPointOnLineFromCircle(&c, &line);
}

#endif

point2d closest_point_on_line_from_circle(const circle *c, const line_segment *line)
{
    return sg_Geometry_ClosestPointOnLineFromCircle(c, line);
}

point2d closest_point_on_line_from_circle_byval(const circle c, const line_segment line)
{
    return sg_Geometry_ClosestPointOnLineFromCircle(&c, &line);
}

#ifdef __cplusplus

point2d closest_point_on_rect_from_circle(const circle &c, const rectangle &rect)
{
    return sg_Geometry_ClosestPointOnRectFromCircle(&c, &rect);
}

#endif

point2d closest_point_on_rect_from_circle(const circle *c, const rectangle *rect)
{
    return sg_Geometry_ClosestPointOnRectFromCircle(c, rect);
}

point2d closest_point_on_rect_from_circle_byval(const circle c, const rectangle rect)
{
    return sg_Geometry_ClosestPointOnRectFromCircle(&c, &rect);
}

float cosine(float angle)
{
    return sg_Geometry_Cosine(angle);
}

#ifdef __cplusplus

circle create_circle(float x, float y, float radius)
{
    return sg_Geometry_CreateCircleFromXY(x, y, radius);
}

#endif

circle create_circle_from_xy(float x, float y, float radius)
{
    return sg_Geometry_CreateCircleFromXY(x, y, radius);
}

#ifdef __cplusplus

circle create_circle(const point2d &pt, float radius)
{
    return sg_Geometry_CreateCircle(&pt, radius);
}

#endif

circle create_circle(const point2d *pt, float radius)
{
    return sg_Geometry_CreateCircle(pt, radius);
}

circle create_circle_byval(const point2d pt, float radius)
{
    return sg_Geometry_CreateCircle(&pt, radius);
}

line_segment create_line(float x1, float y1, float x2, float y2)
{
    return sg_Geometry_CreateLine(x1, y1, x2, y2);
}

#ifdef __cplusplus

line_segment create_line(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_CreateLinePointToPoint(&pt1, &pt2);
}

#endif

line_segment create_line_point_to_point(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_CreateLinePointToPoint(pt1, pt2);
}

line_segment create_line_point_to_point_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_CreateLinePointToPoint(&pt1, &pt2);
}

#ifdef __cplusplus

vector create_line_as_vector(const line_segment &line)
{
    return sg_Geometry_CreateLineAsVector(&line);
}

#endif

vector create_line_as_vector(const line_segment *line)
{
    return sg_Geometry_CreateLineAsVector(line);
}

vector create_line_as_vector_byval(const line_segment line)
{
    return sg_Geometry_CreateLineAsVector(&line);
}

#ifdef __cplusplus

line_segment create_line_from_vector(const vector &mv)
{
    return sg_Geometry_CreateLineFromVector(&mv);
}

#endif

line_segment create_line_from_vector(const vector *mv)
{
    return sg_Geometry_CreateLineFromVector(mv);
}

line_segment create_line_from_vector_byval(const vector mv)
{
    return sg_Geometry_CreateLineFromVector(&mv);
}

#ifdef __cplusplus

line_segment create_line_from_vector(const point2d &pt, const vector &mv)
{
    return sg_Geometry_CreateLineVectorWithStartPoint(&pt, &mv);
}

#endif

line_segment create_line_vector_with_start_point(const point2d *pt, const vector *mv)
{
    return sg_Geometry_CreateLineVectorWithStartPoint(pt, mv);
}

line_segment create_line_vector_with_start_point_byval(const point2d pt, const vector mv)
{
    return sg_Geometry_CreateLineVectorWithStartPoint(&pt, &mv);
}

#ifdef __cplusplus

line_segment create_line_from_vector(float x, float y, const vector &mv)
{
    return sg_Geometry_CreateLineVectorWithStartXY(x, y, &mv);
}

#endif

line_segment create_line_vector_with_start_xy(float x, float y, const vector *mv)
{
    return sg_Geometry_CreateLineVectorWithStartXY(x, y, mv);
}

line_segment create_line_vector_with_start_xy_byval(float x, float y, const vector mv)
{
    return sg_Geometry_CreateLineVectorWithStartXY(x, y, &mv);
}

rectangle create_rectangle(float x, float y, float w, float h)
{
    return sg_Geometry_CreateRectangle(x, y, w, h);
}

#ifdef __cplusplus

rectangle create_rectangle(const triangle  &tri)
{
    return sg_Geometry_CreateRectangleTriangle(&tri);
}

#endif

rectangle create_rectangle_triangle(const triangle  *tri)
{
    return sg_Geometry_CreateRectangleTriangle(tri);
}

rectangle create_rectangle_triangle_byval(const triangle  tri)
{
    return sg_Geometry_CreateRectangleTriangle(&tri);
}

#ifdef __cplusplus

rectangle create_rectangle(const line_segment &line)
{
    return sg_Geometry_CreateRectangleLine(&line);
}

#endif

rectangle create_rectangle_line(const line_segment *line)
{
    return sg_Geometry_CreateRectangleLine(line);
}

rectangle create_rectangle_line_byval(const line_segment line)
{
    return sg_Geometry_CreateRectangleLine(&line);
}

#ifdef __cplusplus

rectangle create_rectangle(const circle &c)
{
    return sg_Geometry_CreateRectangleCircle(&c);
}

#endif

rectangle create_rectangle_circle(const circle *c)
{
    return sg_Geometry_CreateRectangleCircle(c);
}

rectangle create_rectangle_circle_byval(const circle c)
{
    return sg_Geometry_CreateRectangleCircle(&c);
}

#ifdef __cplusplus

rectangle create_rectangle(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_CreateRectangleForPoints(&pt1, &pt2);
}

#endif

rectangle create_rectangle_for_points(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_CreateRectangleForPoints(pt1, pt2);
}

rectangle create_rectangle_for_points_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_CreateRectangleForPoints(&pt1, &pt2);
}

#ifdef __cplusplus

rectangle create_rectangle(const point2d &pt, float width, float height)
{
    return sg_Geometry_CreateRectangleAtPoint(&pt, width, height);
}

#endif

rectangle create_rectangle_at_point(const point2d *pt, float width, float height)
{
    return sg_Geometry_CreateRectangleAtPoint(pt, width, height);
}

rectangle create_rectangle_at_point_byval(const point2d pt, float width, float height)
{
    return sg_Geometry_CreateRectangleAtPoint(&pt, width, height);
}

triangle  create_triangle(float ax, float ay, float bx, float by, float cx, float cy)
{
    return sg_Geometry_CreateTriangle(ax, ay, bx, by, cx, cy);
}

#ifdef __cplusplus

triangle  create_triangle(const point2d &a, const point2d &b, const point2d &c)
{
    return sg_Geometry_CreateTrianglePoints(&a, &b, &c);
}

#endif

triangle  create_triangle_points(const point2d *a, const point2d *b, const point2d *c)
{
    return sg_Geometry_CreateTrianglePoints(a, b, c);
}

triangle  create_triangle_points_byval(const point2d a, const point2d b, const point2d c)
{
    return sg_Geometry_CreateTrianglePoints(&a, &b, &c);
}

vector create_vector_from_angle(float angle, float magnitude)
{
    return sg_Geometry_CreateVectorFromAngle(angle, magnitude);
}

#ifdef __cplusplus

vector create_vector_from_point_to_rect(const point2d &pt, const rectangle &rect)
{
    return sg_Geometry_CreateVectorFromPointPtToRectangle(&pt, &rect);
}

#endif

vector create_vector_from_point_pt_to_rectangle(const point2d *pt, const rectangle *rect)
{
    return sg_Geometry_CreateVectorFromPointPtToRectangle(pt, rect);
}

vector create_vector_from_point_pt_to_rectangle_byval(const point2d pt, const rectangle rect)
{
    return sg_Geometry_CreateVectorFromPointPtToRectangle(&pt, &rect);
}

#ifdef __cplusplus

vector create_vector_from_point_to_rect(float x, float y, const rectangle &rect)
{
    return sg_Geometry_CreateVectorFromPointToRectangle(x, y, &rect);
}

#endif

vector create_vector_from_point_to_rectangle(float x, float y, const rectangle *rect)
{
    return sg_Geometry_CreateVectorFromPointToRectangle(x, y, rect);
}

vector create_vector_from_point_to_rectangle_byval(float x, float y, const rectangle rect)
{
    return sg_Geometry_CreateVectorFromPointToRectangle(x, y, &rect);
}

vector create_vector_from_point_to_rect(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)
{
    return sg_Geometry_CreateVectorFromPointToRect(x, y, rectX, rectY, rectWidth, rectHeight);
}

#ifdef __cplusplus

vector create_vector_from_points(const point2d &p1, const point2d &p2)
{
    return sg_Geometry_CreateVectorFromPoints(&p1, &p2);
}

#endif

vector create_vector_from_points(const point2d *p1, const point2d *p2)
{
    return sg_Geometry_CreateVectorFromPoints(p1, p2);
}

vector create_vector_from_points_byval(const point2d p1, const point2d p2)
{
    return sg_Geometry_CreateVectorFromPoints(&p1, &p2);
}

#ifdef __cplusplus

vector create_vector_to_point(const point2d &p1)
{
    return sg_Geometry_CreateVectorToPoint(&p1);
}

#endif

vector create_vector_to_point(const point2d *p1)
{
    return sg_Geometry_CreateVectorToPoint(p1);
}

vector create_vector_to_point_byval(const point2d p1)
{
    return sg_Geometry_CreateVectorToPoint(&p1);
}

#ifdef __cplusplus

point2d distant_point_on_circle(const point2d &pt, const circle &c)
{
    return sg_Geometry_DistantPointOnCircle(&pt, &c);
}

#endif

point2d distant_point_on_circle(const point2d *pt, const circle *c)
{
    return sg_Geometry_DistantPointOnCircle(pt, c);
}

point2d distant_point_on_circle_byval(const point2d pt, const circle c)
{
    return sg_Geometry_DistantPointOnCircle(&pt, &c);
}

#ifdef __cplusplus

bool distant_point_on_circle_heading(const point2d &pt, const circle &c, const vector &heading, point2d &oppositePt)
{
    return sg_Geometry_DistantPointOnCircleHeading(&pt, &c, &heading, &oppositePt) != 0;
}

#endif

bool distant_point_on_circle_heading(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt)
{
    return sg_Geometry_DistantPointOnCircleHeading(pt, c, heading, oppositePt) != 0;
}

bool distant_point_on_circle_heading_byval(const point2d pt, const circle c, const vector heading, point2d *oppositePt)
{
    return sg_Geometry_DistantPointOnCircleHeading(&pt, &c, &heading, oppositePt) != 0;
}

#ifdef __cplusplus

float dot_product(const vector &v1, const vector &v2)
{
    return sg_Geometry_DotProduct(&v1, &v2);
}

#endif

float dot_product(const vector *v1, const vector *v2)
{
    return sg_Geometry_DotProduct(v1, v2);
}

float dot_product_byval(const vector v1, const vector v2)
{
    return sg_Geometry_DotProduct(&v1, &v2);
}

#ifdef __cplusplus

void fix_rectangle(rectangle &rect)
{
    sg_Geometry_FixRectangle(&rect);
}

#endif

void fix_rectangle(rectangle *rect)
{
    sg_Geometry_FixRectangle(rect);
}

#ifdef __cplusplus

void fix_rectangle(float &x, float &y, float &width, float &height)
{
    sg_Geometry_FixRect(&x, &y, &width, &height);
}

#endif

void fix_rect(float *x, float *y, float *width, float *height)
{
    sg_Geometry_FixRect(x, y, width, height);
}

matrix2d  identity_matrix()
{
    return sg_Geometry_IdentityMatrix();
}

#ifdef __cplusplus

rectangle inset_rectangle(const rectangle &rect, float insetAmount)
{
    return sg_Geometry_InsetRectangle(&rect, insetAmount);
}

#endif

rectangle inset_rectangle(const rectangle *rect, float insetAmount)
{
    return sg_Geometry_InsetRectangle(rect, insetAmount);
}

rectangle inset_rectangle_byval(const rectangle rect, float insetAmount)
{
    return sg_Geometry_InsetRectangle(&rect, insetAmount);
}

#ifdef __cplusplus

rectangle intersection(const rectangle &rect1, const rectangle &rect2)
{
    return sg_Geometry_Intersection(&rect1, &rect2);
}

#endif

rectangle intersection(const rectangle *rect1, const rectangle *rect2)
{
    return sg_Geometry_Intersection(rect1, rect2);
}

rectangle intersection_byval(const rectangle rect1, const rectangle rect2)
{
    return sg_Geometry_Intersection(&rect1, &rect2);
}

#ifdef __cplusplus

vector invert_vector(const vector &v)
{
    return sg_Geometry_InvertVector(&v);
}

#endif

vector invert_vector(const vector *v)
{
    return sg_Geometry_InvertVector(v);
}

vector invert_vector_byval(const vector v)
{
    return sg_Geometry_InvertVector(&v);
}

#ifdef __cplusplus

vector limit_vector(const vector &v, float limit)
{
    return sg_Geometry_LimitVector(&v, limit);
}

#endif

vector limit_vector(const vector *v, float limit)
{
    return sg_Geometry_LimitVector(v, limit);
}

vector limit_vector_byval(const vector v, float limit)
{
    return sg_Geometry_LimitVector(&v, limit);
}

#ifdef __cplusplus

vector line_as_vector(const line_segment &line)
{
    return sg_Geometry_LineAsVector(&line);
}

#endif

vector line_as_vector(const line_segment *line)
{
    return sg_Geometry_LineAsVector(line);
}

vector line_as_vector_byval(const line_segment line)
{
    return sg_Geometry_LineAsVector(&line);
}

line_segment line_from(float x1, float y1, float x2, float y2)
{
    return sg_Geometry_LineFrom(x1, y1, x2, y2);
}

#ifdef __cplusplus

line_segment line_from(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_LineFromPointToPoint(&pt1, &pt2);
}

#endif

line_segment line_from_point_to_point(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_LineFromPointToPoint(pt1, pt2);
}

line_segment line_from_point_to_point_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_LineFromPointToPoint(&pt1, &pt2);
}

#ifdef __cplusplus

line_segment line_from_vector(const vector &mv)
{
    return sg_Geometry_LineFromVector(&mv);
}

#endif

line_segment line_from_vector(const vector *mv)
{
    return sg_Geometry_LineFromVector(mv);
}

line_segment line_from_vector_byval(const vector mv)
{
    return sg_Geometry_LineFromVector(&mv);
}

#ifdef __cplusplus

line_segment line_from_vector(const point2d &pt, const vector &mv)
{
    return sg_Geometry_LineFromVectorWithStartPoint(&pt, &mv);
}

#endif

line_segment line_from_vector_with_start_point(const point2d *pt, const vector *mv)
{
    return sg_Geometry_LineFromVectorWithStartPoint(pt, mv);
}

line_segment line_from_vector_with_start_point_byval(const point2d pt, const vector mv)
{
    return sg_Geometry_LineFromVectorWithStartPoint(&pt, &mv);
}

#ifdef __cplusplus

line_segment line_from_vector(float x, float y, const vector &mv)
{
    return sg_Geometry_LineFromVectorWithStartXY(x, y, &mv);
}

#endif

line_segment line_from_vector_with_start_xy(float x, float y, const vector *mv)
{
    return sg_Geometry_LineFromVectorWithStartXY(x, y, mv);
}

line_segment line_from_vector_with_start_xy_byval(float x, float y, const vector mv)
{
    return sg_Geometry_LineFromVectorWithStartXY(x, y, &mv);
}

#ifdef __cplusplus

bool line_intersection_point(const line_segment &line1, const line_segment &line2, point2d &pt)
{
    return sg_Geometry_LineIntersectionPoint(&line1, &line2, &pt) != 0;
}

#endif

bool line_intersection_point(const line_segment *line1, const line_segment *line2, point2d *pt)
{
    return sg_Geometry_LineIntersectionPoint(line1, line2, pt) != 0;
}

bool line_intersection_point_byval(const line_segment line1, const line_segment line2, point2d *pt)
{
    return sg_Geometry_LineIntersectionPoint(&line1, &line2, pt) != 0;
}

#ifdef __cplusplus

bool line_intersects_circle(const line_segment &l, const circle &c)
{
    return sg_Geometry_LineIntersectsCircle(&l, &c) != 0;
}

#endif

bool line_intersects_circle(const line_segment *l, const circle *c)
{
    return sg_Geometry_LineIntersectsCircle(l, c) != 0;
}

bool line_intersects_circle_byval(const line_segment l, const circle c)
{
    return sg_Geometry_LineIntersectsCircle(&l, &c) != 0;
}

#ifdef __cplusplus

bool line_intersects_rect(const line_segment &line, const rectangle &rect)
{
    return sg_Geometry_LineIntersectsRect(&line, &rect) != 0;
}

#endif

bool line_intersects_rect(const line_segment *line, const rectangle *rect)
{
    return sg_Geometry_LineIntersectsRect(line, rect) != 0;
}

bool line_intersects_rect_byval(const line_segment line, const rectangle rect)
{
    return sg_Geometry_LineIntersectsRect(&line, &rect) != 0;
}

#ifdef __cplusplus

float line_magnitude_sq(const line_segment &line)
{
    return sg_Geometry_LineMagnitudeSqFromLine(&line);
}

#endif

float line_magnitude_sq_from_line(const line_segment *line)
{
    return sg_Geometry_LineMagnitudeSqFromLine(line);
}

float line_magnitude_sq_from_line_byval(const line_segment line)
{
    return sg_Geometry_LineMagnitudeSqFromLine(&line);
}

float line_magnitude_sq(float x1, float y1, float x2, float y2)
{
    return sg_Geometry_LineMagnitudeSq(x1, y1, x2, y2);
}

#ifdef __cplusplus

point2d line_mid_point(const line_segment &line)
{
    return sg_Geometry_LineMidPoint(&line);
}

#endif

point2d line_mid_point(const line_segment *line)
{
    return sg_Geometry_LineMidPoint(line);
}

point2d line_mid_point_byval(const line_segment line)
{
    return sg_Geometry_LineMidPoint(&line);
}

#ifdef __cplusplus

vector line_normal(const line_segment &line)
{
    return sg_Geometry_LineNormal(&line);
}

#endif

vector line_normal(const line_segment *line)
{
    return sg_Geometry_LineNormal(line);
}

vector line_normal_byval(const line_segment line)
{
    return sg_Geometry_LineNormal(&line);
}

#ifdef __cplusplus

bool line_segments_intersect(const line_segment &line1, const line_segment &line2)
{
    return sg_Geometry_LineSegmentsIntersect(&line1, &line2) != 0;
}

#endif

bool line_segments_intersect(const line_segment *line1, const line_segment *line2)
{
    return sg_Geometry_LineSegmentsIntersect(line1, line2) != 0;
}

bool line_segments_intersect_byval(const line_segment line1, const line_segment line2)
{
    return sg_Geometry_LineSegmentsIntersect(&line1, &line2) != 0;
}

#ifdef __cplusplus

void line_to_string(const line_segment &ln, char *result)
{
    sg_Geometry_LineToString(&ln, result);
}

#endif

void line_to_string(const line_segment *ln, char *result)
{
    sg_Geometry_LineToString(ln, result);
}

void line_to_string_byval(const line_segment ln, char *result)
{
    sg_Geometry_LineToString(&ln, result);
}

#ifdef __cplusplus

matrix2d  matrix_inverse(const matrix2d  &m)
{
    return sg_Geometry_MatrixInverse(&m);
}

#endif

matrix2d  matrix_inverse(const matrix2d  *m)
{
    return sg_Geometry_MatrixInverse(m);
}

matrix2d  matrix_inverse_byval(const matrix2d  m)
{
    return sg_Geometry_MatrixInverse(&m);
}

#ifdef __cplusplus

vector matrix_multiply(const matrix2d  &m, const vector &v)
{
    return sg_Geometry_MatrixMultiplyVector(&m, &v);
}

#endif

vector matrix_multiply_vector(const matrix2d  *m, const vector *v)
{
    return sg_Geometry_MatrixMultiplyVector(m, v);
}

vector matrix_multiply_vector_byval(const matrix2d  m, const vector v)
{
    return sg_Geometry_MatrixMultiplyVector(&m, &v);
}

#ifdef __cplusplus

matrix2d  matrix_multiply(const matrix2d  &m1, const matrix2d  &m2)
{
    return sg_Geometry_MatrixMultiply(&m1, &m2);
}

#endif

matrix2d  matrix_multiply(const matrix2d  *m1, const matrix2d  *m2)
{
    return sg_Geometry_MatrixMultiply(m1, m2);
}

matrix2d  matrix_multiply_byval(const matrix2d  m1, const matrix2d  m2)
{
    return sg_Geometry_MatrixMultiply(&m1, &m2);
}

#ifdef __cplusplus

void matrix_to_string(const matrix2d  &m, char *result)
{
    sg_Geometry_MatrixToString(&m, result);
}

#endif

void matrix_to_string(const matrix2d  *m, char *result)
{
    sg_Geometry_MatrixToString(m, result);
}

void matrix_to_string_byval(const matrix2d  m, char *result)
{
    sg_Geometry_MatrixToString(&m, result);
}

#ifdef __cplusplus

point2d point_add(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_PointAdd(&pt1, &pt2);
}

#endif

point2d point_add(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_PointAdd(pt1, pt2);
}

point2d point_add_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_PointAdd(&pt1, &pt2);
}

point2d point_at(float x, float y)
{
    return sg_Geometry_PointAt(x, y);
}

#ifdef __cplusplus

point2d point_at(const point2d &startPoint, const vector &offset)
{
    return sg_Geometry_PointAtStartWithOffset(&startPoint, &offset);
}

#endif

point2d point_at_start_with_offset(const point2d *startPoint, const vector *offset)
{
    return sg_Geometry_PointAtStartWithOffset(startPoint, offset);
}

point2d point_at_start_with_offset_byval(const point2d startPoint, const vector offset)
{
    return sg_Geometry_PointAtStartWithOffset(&startPoint, &offset);
}

#ifdef __cplusplus

bool point_in_circle(const point2d &pt, const circle &c)
{
    return sg_Geometry_PointInCircle(&pt, &c) != 0;
}

#endif

bool point_in_circle(const point2d *pt, const circle *c)
{
    return sg_Geometry_PointInCircle(pt, c) != 0;
}

bool point_in_circle_byval(const point2d pt, const circle c)
{
    return sg_Geometry_PointInCircle(&pt, &c) != 0;
}

#ifdef __cplusplus

bool point_in_circle(const point2d &pt, float x, float y, float radius)
{
    return sg_Geometry_PointInCirclePt(&pt, x, y, radius) != 0;
}

#endif

bool point_in_circle_pt(const point2d *pt, float x, float y, float radius)
{
    return sg_Geometry_PointInCirclePt(pt, x, y, radius) != 0;
}

bool point_in_circle_pt_byval(const point2d pt, float x, float y, float radius)
{
    return sg_Geometry_PointInCirclePt(&pt, x, y, radius) != 0;
}

#ifdef __cplusplus

bool point_in_circle(float ptX, float ptY, float cX, float cY, float radius)
{
    return sg_Geometry_PointXYInCircle(ptX, ptY, cX, cY, radius) != 0;
}

#endif

bool point_xyin_circle(float ptX, float ptY, float cX, float cY, float radius)
{
    return sg_Geometry_PointXYInCircle(ptX, ptY, cX, cY, radius) != 0;
}

#ifdef __cplusplus

bool point_in_rect(const point2d &pt, const rectangle &rect)
{
    return sg_Geometry_PointInRect(&pt, &rect) != 0;
}

#endif

bool point_in_rect(const point2d *pt, const rectangle *rect)
{
    return sg_Geometry_PointInRect(pt, rect) != 0;
}

bool point_in_rect_byval(const point2d pt, const rectangle rect)
{
    return sg_Geometry_PointInRect(&pt, &rect) != 0;
}

#ifdef __cplusplus

bool point_in_rect(float x, float y, const rectangle &rect)
{
    return sg_Geometry_PointXYInRect(x, y, &rect) != 0;
}

#endif

bool point_xyin_rect(float x, float y, const rectangle *rect)
{
    return sg_Geometry_PointXYInRect(x, y, rect) != 0;
}

bool point_xyin_rect_byval(float x, float y, const rectangle rect)
{
    return sg_Geometry_PointXYInRect(x, y, &rect) != 0;
}

#ifdef __cplusplus

bool point_in_rect(const point2d &pt, float x, float y, float w, float h)
{
    return sg_Geometry_PointInRectXY(&pt, x, y, w, h) != 0;
}

#endif

bool point_in_rect_xy(const point2d *pt, float x, float y, float w, float h)
{
    return sg_Geometry_PointInRectXY(pt, x, y, w, h) != 0;
}

bool point_in_rect_xy_byval(const point2d pt, float x, float y, float w, float h)
{
    return sg_Geometry_PointInRectXY(&pt, x, y, w, h) != 0;
}

#ifdef __cplusplus

bool point_in_rect(float ptX, float ptY, float x, float y, float w, float h)
{
    return sg_Geometry_PointXYInRectXY(ptX, ptY, x, y, w, h) != 0;
}

#endif

bool point_xyin_rect_xy(float ptX, float ptY, float x, float y, float w, float h)
{
    return sg_Geometry_PointXYInRectXY(ptX, ptY, x, y, w, h) != 0;
}

#ifdef __cplusplus

bool point_in_triangle(const point2d &pt, const triangle  &tri)
{
    return sg_Geometry_PointInTriangle(&pt, &tri) != 0;
}

#endif

bool point_in_triangle(const point2d *pt, const triangle  *tri)
{
    return sg_Geometry_PointInTriangle(pt, tri) != 0;
}

bool point_in_triangle_byval(const point2d pt, const triangle  tri)
{
    return sg_Geometry_PointInTriangle(&pt, &tri) != 0;
}

#ifdef __cplusplus

float point_line_distance(float x, float y, const line_segment &line)
{
    return sg_Geometry_PointXYLineDistance(x, y, &line);
}

#endif

float point_xyline_distance(float x, float y, const line_segment *line)
{
    return sg_Geometry_PointXYLineDistance(x, y, line);
}

float point_xyline_distance_byval(float x, float y, const line_segment line)
{
    return sg_Geometry_PointXYLineDistance(x, y, &line);
}

#ifdef __cplusplus

float point_line_distance(const point2d &pt, const line_segment &line)
{
    return sg_Geometry_PointLineDistance(&pt, &line);
}

#endif

float point_line_distance(const point2d *pt, const line_segment *line)
{
    return sg_Geometry_PointLineDistance(pt, line);
}

float point_line_distance_byval(const point2d pt, const line_segment line)
{
    return sg_Geometry_PointLineDistance(&pt, &line);
}

#ifdef __cplusplus

bool point_on_line(const point2d &pt, const line_segment &line)
{
    return sg_Geometry_PointOnLine(&pt, &line) != 0;
}

#endif

bool point_on_line(const point2d *pt, const line_segment *line)
{
    return sg_Geometry_PointOnLine(pt, line) != 0;
}

bool point_on_line_byval(const point2d pt, const line_segment line)
{
    return sg_Geometry_PointOnLine(&pt, &line) != 0;
}

#ifdef __cplusplus

bool point_on_line(const point2d &pt, float x, float y, float endX, float endY)
{
    return sg_Geometry_PointOnLineXYXY(&pt, x, y, endX, endY) != 0;
}

#endif

bool point_on_line_xyxy(const point2d *pt, float x, float y, float endX, float endY)
{
    return sg_Geometry_PointOnLineXYXY(pt, x, y, endX, endY) != 0;
}

bool point_on_line_xyxy_byval(const point2d pt, float x, float y, float endX, float endY)
{
    return sg_Geometry_PointOnLineXYXY(&pt, x, y, endX, endY) != 0;
}

#ifdef __cplusplus

bool point_on_point(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_PointOnPoint(&pt1, &pt2) != 0;
}

#endif

bool point_on_point(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_PointOnPoint(pt1, pt2) != 0;
}

bool point_on_point_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_PointOnPoint(&pt1, &pt2) != 0;
}

#ifdef __cplusplus

float point_point_distance(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_PointPointDistance(&pt1, &pt2);
}

#endif

float point_point_distance(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_PointPointDistance(pt1, pt2);
}

float point_point_distance_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_PointPointDistance(&pt1, &pt2);
}

#ifdef __cplusplus

void point_to_string(const point2d &pt, char *result)
{
    sg_Geometry_PointToString(&pt, result);
}

#endif

void point_to_string(const point2d *pt, char *result)
{
    sg_Geometry_PointToString(pt, result);
}

void point_to_string_byval(const point2d pt, char *result)
{
    sg_Geometry_PointToString(&pt, result);
}

#ifdef __cplusplus

quad quad_from(const rectangle &rect)
{
    return sg_Geometry_QuadFromRect(&rect);
}

#endif

quad quad_from_rect(const rectangle *rect)
{
    return sg_Geometry_QuadFromRect(rect);
}

quad quad_from_rect_byval(const rectangle rect)
{
    return sg_Geometry_QuadFromRect(&rect);
}

quad quad_from(float xTopLeft, float yTopLeft, float xTopRight, float yTopRight, float xBottomLeft, float yBottomLeft, float xBottomRight, float yBottomRight)
{
    return sg_Geometry_QuadFrom(xTopLeft, yTopLeft, xTopRight, yTopRight, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight);
}

point2d random_screen_point()
{
    return sg_Geometry_RandomScreenPoint();
}

#ifdef __cplusplus

float ray_circle_intersect_distance(const point2d &ray_origin, const vector &ray_heading, const circle &c)
{
    return sg_Geometry_RayCircleIntersectDistance(&ray_origin, &ray_heading, &c);
}

#endif

float ray_circle_intersect_distance(const point2d *ray_origin, const vector *ray_heading, const circle *c)
{
    return sg_Geometry_RayCircleIntersectDistance(ray_origin, ray_heading, c);
}

float ray_circle_intersect_distance_byval(const point2d ray_origin, const vector ray_heading, const circle c)
{
    return sg_Geometry_RayCircleIntersectDistance(&ray_origin, &ray_heading, &c);
}

#ifdef __cplusplus

bool ray_intersection_point(const point2d &fromPt, const vector &heading, const line_segment &line, point2d &pt)
{
    return sg_Geometry_RayIntersectionPoint(&fromPt, &heading, &line, &pt) != 0;
}

#endif

bool ray_intersection_point(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt)
{
    return sg_Geometry_RayIntersectionPoint(fromPt, heading, line, pt) != 0;
}

bool ray_intersection_point_byval(const point2d fromPt, const vector heading, const line_segment line, point2d *pt)
{
    return sg_Geometry_RayIntersectionPoint(&fromPt, &heading, &line, pt) != 0;
}

#ifdef __cplusplus

rectangle rectangle_after_move(const rectangle &rect, const vector &mv)
{
    return sg_Geometry_RectangleAfterMove(&rect, &mv);
}

#endif

rectangle rectangle_after_move(const rectangle *rect, const vector *mv)
{
    return sg_Geometry_RectangleAfterMove(rect, mv);
}

rectangle rectangle_after_move_byval(const rectangle rect, const vector mv)
{
    return sg_Geometry_RectangleAfterMove(&rect, &mv);
}

#ifdef __cplusplus

float rectangle_bottom(const rectangle &rect)
{
    return sg_Geometry_RectangleBottom(&rect);
}

#endif

float rectangle_bottom(const rectangle *rect)
{
    return sg_Geometry_RectangleBottom(rect);
}

float rectangle_bottom_byval(const rectangle rect)
{
    return sg_Geometry_RectangleBottom(&rect);
}

#ifdef __cplusplus

point2d rectangle_bottom_left(const rectangle &rect)
{
    return sg_Geometry_RectangleBottomLeft(&rect);
}

#endif

point2d rectangle_bottom_left(const rectangle *rect)
{
    return sg_Geometry_RectangleBottomLeft(rect);
}

point2d rectangle_bottom_left_byval(const rectangle rect)
{
    return sg_Geometry_RectangleBottomLeft(&rect);
}

#ifdef __cplusplus

point2d rectangle_bottom_right(const rectangle &rect)
{
    return sg_Geometry_RectangleBottomRight(&rect);
}

#endif

point2d rectangle_bottom_right(const rectangle *rect)
{
    return sg_Geometry_RectangleBottomRight(rect);
}

point2d rectangle_bottom_right_byval(const rectangle rect)
{
    return sg_Geometry_RectangleBottomRight(&rect);
}

#ifdef __cplusplus

point2d rectangle_center(const rectangle &rect)
{
    return sg_Geometry_RectangleCenter(&rect);
}

#endif

point2d rectangle_center(const rectangle *rect)
{
    return sg_Geometry_RectangleCenter(rect);
}

point2d rectangle_center_byval(const rectangle rect)
{
    return sg_Geometry_RectangleCenter(&rect);
}

#ifdef __cplusplus

point2d rectangle_center_bottom(const rectangle &rect)
{
    return sg_Geometry_RectangleCenterBottom(&rect);
}

#endif

point2d rectangle_center_bottom(const rectangle *rect)
{
    return sg_Geometry_RectangleCenterBottom(rect);
}

point2d rectangle_center_bottom_byval(const rectangle rect)
{
    return sg_Geometry_RectangleCenterBottom(&rect);
}

#ifdef __cplusplus

point2d rectangle_center_left(const rectangle &rect)
{
    return sg_Geometry_RectangleCenterLeft(&rect);
}

#endif

point2d rectangle_center_left(const rectangle *rect)
{
    return sg_Geometry_RectangleCenterLeft(rect);
}

point2d rectangle_center_left_byval(const rectangle rect)
{
    return sg_Geometry_RectangleCenterLeft(&rect);
}

#ifdef __cplusplus

point2d rectangle_center_right(const rectangle &rect)
{
    return sg_Geometry_RectangleCenterRight(&rect);
}

#endif

point2d rectangle_center_right(const rectangle *rect)
{
    return sg_Geometry_RectangleCenterRight(rect);
}

point2d rectangle_center_right_byval(const rectangle rect)
{
    return sg_Geometry_RectangleCenterRight(&rect);
}

#ifdef __cplusplus

point2d rectangle_center_top(const rectangle &rect)
{
    return sg_Geometry_RectangleCenterTop(&rect);
}

#endif

point2d rectangle_center_top(const rectangle *rect)
{
    return sg_Geometry_RectangleCenterTop(rect);
}

point2d rectangle_center_top_byval(const rectangle rect)
{
    return sg_Geometry_RectangleCenterTop(&rect);
}

rectangle rectangle_from(float x, float y, float w, float h)
{
    return sg_Geometry_RectangleFrom(x, y, w, h);
}

#ifdef __cplusplus

rectangle rectangle_from(const triangle  &tri)
{
    return sg_Geometry_RectangleFromTriangle(&tri);
}

#endif

rectangle rectangle_from_triangle(const triangle  *tri)
{
    return sg_Geometry_RectangleFromTriangle(tri);
}

rectangle rectangle_from_triangle_byval(const triangle  tri)
{
    return sg_Geometry_RectangleFromTriangle(&tri);
}

#ifdef __cplusplus

rectangle rectangle_from(const line_segment &line)
{
    return sg_Geometry_RectangleFromLine(&line);
}

#endif

rectangle rectangle_from_line(const line_segment *line)
{
    return sg_Geometry_RectangleFromLine(line);
}

rectangle rectangle_from_line_byval(const line_segment line)
{
    return sg_Geometry_RectangleFromLine(&line);
}

#ifdef __cplusplus

rectangle rectangle_from(const circle &c)
{
    return sg_Geometry_RectangleFromCircle(&c);
}

#endif

rectangle rectangle_from_circle(const circle *c)
{
    return sg_Geometry_RectangleFromCircle(c);
}

rectangle rectangle_from_circle_byval(const circle c)
{
    return sg_Geometry_RectangleFromCircle(&c);
}

#ifdef __cplusplus

rectangle rectangle_from(const point2d &pt1, const point2d &pt2)
{
    return sg_Geometry_RectangleForPoints(&pt1, &pt2);
}

#endif

rectangle rectangle_for_points(const point2d *pt1, const point2d *pt2)
{
    return sg_Geometry_RectangleForPoints(pt1, pt2);
}

rectangle rectangle_for_points_byval(const point2d pt1, const point2d pt2)
{
    return sg_Geometry_RectangleForPoints(&pt1, &pt2);
}

#ifdef __cplusplus

rectangle rectangle_from(const point2d &pt, float width, float height)
{
    return sg_Geometry_RectangleAtPoint(&pt, width, height);
}

#endif

rectangle rectangle_at_point(const point2d *pt, float width, float height)
{
    return sg_Geometry_RectangleAtPoint(pt, width, height);
}

rectangle rectangle_at_point_byval(const point2d pt, float width, float height)
{
    return sg_Geometry_RectangleAtPoint(&pt, width, height);
}

#ifdef __cplusplus

float rectangle_left(const rectangle &rect)
{
    return sg_Geometry_RectangleLeft(&rect);
}

#endif

float rectangle_left(const rectangle *rect)
{
    return sg_Geometry_RectangleLeft(rect);
}

float rectangle_left_byval(const rectangle rect)
{
    return sg_Geometry_RectangleLeft(&rect);
}

#ifdef __cplusplus

rectangle rectangle_offset(const rectangle &rect, const vector &vec)
{
    return sg_Geometry_RectangleOffset(&rect, &vec);
}

#endif

rectangle rectangle_offset(const rectangle *rect, const vector *vec)
{
    return sg_Geometry_RectangleOffset(rect, vec);
}

rectangle rectangle_offset_byval(const rectangle rect, const vector vec)
{
    return sg_Geometry_RectangleOffset(&rect, &vec);
}

#ifdef __cplusplus

float rectangle_right(const rectangle &rect)
{
    return sg_Geometry_RectangleRight(&rect);
}

#endif

float rectangle_right(const rectangle *rect)
{
    return sg_Geometry_RectangleRight(rect);
}

float rectangle_right_byval(const rectangle rect)
{
    return sg_Geometry_RectangleRight(&rect);
}

#ifdef __cplusplus

void rectangle_to_string(const rectangle &rect, char *result)
{
    sg_Geometry_RectangleToString(&rect, result);
}

#endif

void rectangle_to_string(const rectangle *rect, char *result)
{
    sg_Geometry_RectangleToString(rect, result);
}

void rectangle_to_string_byval(const rectangle rect, char *result)
{
    sg_Geometry_RectangleToString(&rect, result);
}

#ifdef __cplusplus

float rectangle_top(const rectangle &rect)
{
    return sg_Geometry_RectangleTop(&rect);
}

#endif

float rectangle_top(const rectangle *rect)
{
    return sg_Geometry_RectangleTop(rect);
}

float rectangle_top_byval(const rectangle rect)
{
    return sg_Geometry_RectangleTop(&rect);
}

#ifdef __cplusplus

point2d rectangle_top_left(const rectangle &rect)
{
    return sg_Geometry_RectangleTopLeft(&rect);
}

#endif

point2d rectangle_top_left(const rectangle *rect)
{
    return sg_Geometry_RectangleTopLeft(rect);
}

point2d rectangle_top_left_byval(const rectangle rect)
{
    return sg_Geometry_RectangleTopLeft(&rect);
}

#ifdef __cplusplus

point2d rectangle_top_right(const rectangle &rect)
{
    return sg_Geometry_RectangleTopRight(&rect);
}

#endif

point2d rectangle_top_right(const rectangle *rect)
{
    return sg_Geometry_RectangleTopRight(rect);
}

point2d rectangle_top_right_byval(const rectangle rect)
{
    return sg_Geometry_RectangleTopRight(&rect);
}

#ifdef __cplusplus

bool rectangles_intersect(const rectangle &rect1, const rectangle &rect2)
{
    return sg_Geometry_RectanglesIntersect(&rect1, &rect2) != 0;
}

#endif

bool rectangles_intersect(const rectangle *rect1, const rectangle *rect2)
{
    return sg_Geometry_RectanglesIntersect(rect1, rect2) != 0;
}

bool rectangles_intersect_byval(const rectangle rect1, const rectangle rect2)
{
    return sg_Geometry_RectanglesIntersect(&rect1, &rect2) != 0;
}

matrix2d  rotation_matrix(float deg)
{
    return sg_Geometry_RotationMatrix(deg);
}

matrix2d  scale_matrix(float scale)
{
    return sg_Geometry_ScaleMatrix(scale);
}

#ifdef __cplusplus

matrix2d  scale_matrix(const point2d &scale)
{
    return sg_Geometry_ScaleMatrixByPoint(&scale);
}

#endif

matrix2d  scale_matrix_by_point(const point2d *scale)
{
    return sg_Geometry_ScaleMatrixByPoint(scale);
}

matrix2d  scale_matrix_by_point_byval(const point2d scale)
{
    return sg_Geometry_ScaleMatrixByPoint(&scale);
}

#ifdef __cplusplus

matrix2d  scale_rotate_translate_matrix(const point2d &scale, float deg, const point2d &translate)
{
    return sg_Geometry_ScaleRotateTranslateMatrix(&scale, deg, &translate);
}

#endif

matrix2d  scale_rotate_translate_matrix(const point2d *scale, float deg, const point2d *translate)
{
    return sg_Geometry_ScaleRotateTranslateMatrix(scale, deg, translate);
}

matrix2d  scale_rotate_translate_matrix_byval(const point2d scale, float deg, const point2d translate)
{
    return sg_Geometry_ScaleRotateTranslateMatrix(&scale, deg, &translate);
}

#ifdef __cplusplus

void set_quad_point(quad &q, int32_t idx, point2d value)
{
    sg_Geometry_SetQuadPoint(&q, idx, value);
}

#endif

void set_quad_point(quad *q, int32_t idx, point2d value)
{
    sg_Geometry_SetQuadPoint(q, idx, value);
}

float sine(float angle)
{
    return sg_Geometry_Sine(angle);
}

#ifdef __cplusplus

vector subtract_vectors(const vector &v1, const vector &v2)
{
    return sg_Geometry_SubtractVectors(&v1, &v2);
}

#endif

vector subtract_vectors(const vector *v1, const vector *v2)
{
    return sg_Geometry_SubtractVectors(v1, v2);
}

vector subtract_vectors_byval(const vector v1, const vector v2)
{
    return sg_Geometry_SubtractVectors(&v1, &v2);
}

float tangent(float angle)
{
    return sg_Geometry_Tangent(angle);
}

#ifdef __cplusplus

bool tangent_points(const point2d &fromPt, const circle &c, point2d &p1, point2d &p2)
{
    return sg_Geometry_TangentPoints(&fromPt, &c, &p1, &p2) != 0;
}

#endif

bool tangent_points(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2)
{
    return sg_Geometry_TangentPoints(fromPt, c, p1, p2) != 0;
}

bool tangent_points_byval(const point2d fromPt, const circle c, point2d *p1, point2d *p2)
{
    return sg_Geometry_TangentPoints(&fromPt, &c, p1, p2) != 0;
}

matrix2d  translation_matrix(float dx, float dy)
{
    return sg_Geometry_TranslationMatrix(dx, dy);
}

#ifdef __cplusplus

matrix2d  translation_matrix(const point2d &pt)
{
    return sg_Geometry_TranslationMatrixPt(&pt);
}

#endif

matrix2d  translation_matrix_pt(const point2d *pt)
{
    return sg_Geometry_TranslationMatrixPt(pt);
}

matrix2d  translation_matrix_pt_byval(const point2d pt)
{
    return sg_Geometry_TranslationMatrixPt(&pt);
}

#ifdef __cplusplus

point2d triangle_barycenter(const triangle  &tri)
{
    return sg_Geometry_TriangleBarycenter(&tri);
}

#endif

point2d triangle_barycenter(const triangle  *tri)
{
    return sg_Geometry_TriangleBarycenter(tri);
}

point2d triangle_barycenter_byval(const triangle  tri)
{
    return sg_Geometry_TriangleBarycenter(&tri);
}

triangle  triangle_from(float ax, float ay, float bx, float by, float cx, float cy)
{
    return sg_Geometry_TriangleFrom(ax, ay, bx, by, cx, cy);
}

#ifdef __cplusplus

triangle  triangle_from(const point2d &a, const point2d &b, const point2d &c)
{
    return sg_Geometry_TriangleFromPoints(&a, &b, &c);
}

#endif

triangle  triangle_from_points(const point2d *a, const point2d *b, const point2d *c)
{
    return sg_Geometry_TriangleFromPoints(a, b, c);
}

triangle  triangle_from_points_byval(const point2d a, const point2d b, const point2d c)
{
    return sg_Geometry_TriangleFromPoints(&a, &b, &c);
}

#ifdef __cplusplus

bool triangle_rectangle_intersect(const triangle  &tri, const rectangle &rect)
{
    return sg_Geometry_TriangleRectangleIntersect(&tri, &rect) != 0;
}

#endif

bool triangle_rectangle_intersect(const triangle  *tri, const rectangle *rect)
{
    return sg_Geometry_TriangleRectangleIntersect(tri, rect) != 0;
}

bool triangle_rectangle_intersect_byval(const triangle  tri, const rectangle rect)
{
    return sg_Geometry_TriangleRectangleIntersect(&tri, &rect) != 0;
}

#ifdef __cplusplus

void triangle_to_string(const triangle  &tri, char *result)
{
    sg_Geometry_TriangleToString(&tri, result);
}

#endif

void triangle_to_string(const triangle  *tri, char *result)
{
    sg_Geometry_TriangleToString(tri, result);
}

void triangle_to_string_byval(const triangle  tri, char *result)
{
    sg_Geometry_TriangleToString(&tri, result);
}

#ifdef __cplusplus

vector unit_vector(const vector &v)
{
    return sg_Geometry_UnitVector(&v);
}

#endif

vector unit_vector(const vector *v)
{
    return sg_Geometry_UnitVector(v);
}

vector unit_vector_byval(const vector v)
{
    return sg_Geometry_UnitVector(&v);
}

#ifdef __cplusplus

float vector_angle(const vector &v)
{
    return sg_Geometry_VectorAngle(&v);
}

#endif

float vector_angle(const vector *v)
{
    return sg_Geometry_VectorAngle(v);
}

float vector_angle_byval(const vector v)
{
    return sg_Geometry_VectorAngle(&v);
}

vector vector_from_angle(float angle, float magnitude)
{
    return sg_Geometry_VectorFromAngle(angle, magnitude);
}

#ifdef __cplusplus

vector vector_from_point_to_rect(const point2d &pt, const rectangle &rect)
{
    return sg_Geometry_VectorFromPointPtToRectangle(&pt, &rect);
}

#endif

vector vector_from_point_pt_to_rectangle(const point2d *pt, const rectangle *rect)
{
    return sg_Geometry_VectorFromPointPtToRectangle(pt, rect);
}

vector vector_from_point_pt_to_rectangle_byval(const point2d pt, const rectangle rect)
{
    return sg_Geometry_VectorFromPointPtToRectangle(&pt, &rect);
}

#ifdef __cplusplus

vector vector_from_point_to_rect(float x, float y, const rectangle &rect)
{
    return sg_Geometry_VectorFromPointToRectangle(x, y, &rect);
}

#endif

vector vector_from_point_to_rectangle(float x, float y, const rectangle *rect)
{
    return sg_Geometry_VectorFromPointToRectangle(x, y, rect);
}

vector vector_from_point_to_rectangle_byval(float x, float y, const rectangle rect)
{
    return sg_Geometry_VectorFromPointToRectangle(x, y, &rect);
}

vector vector_from_point_to_rect(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)
{
    return sg_Geometry_VectorFromPointToRect(x, y, rectX, rectY, rectWidth, rectHeight);
}

#ifdef __cplusplus

vector vector_from_points(const point2d &p1, const point2d &p2)
{
    return sg_Geometry_VectorFromPoints(&p1, &p2);
}

#endif

vector vector_from_points(const point2d *p1, const point2d *p2)
{
    return sg_Geometry_VectorFromPoints(p1, p2);
}

vector vector_from_points_byval(const point2d p1, const point2d p2)
{
    return sg_Geometry_VectorFromPoints(&p1, &p2);
}

#ifdef __cplusplus

bool vector_in_rect(const vector &v, const rectangle &rect)
{
    return sg_Geometry_VectorInRect(&v, &rect) != 0;
}

#endif

bool vector_in_rect(const vector *v, const rectangle *rect)
{
    return sg_Geometry_VectorInRect(v, rect) != 0;
}

bool vector_in_rect_byval(const vector v, const rectangle rect)
{
    return sg_Geometry_VectorInRect(&v, &rect) != 0;
}

#ifdef __cplusplus

bool vector_in_rect(const vector &v, float x, float y, float w, float h)
{
    return sg_Geometry_VectorInRectXY(&v, x, y, w, h) != 0;
}

#endif

bool vector_in_rect_xy(const vector *v, float x, float y, float w, float h)
{
    return sg_Geometry_VectorInRectXY(v, x, y, w, h) != 0;
}

bool vector_in_rect_xy_byval(const vector v, float x, float y, float w, float h)
{
    return sg_Geometry_VectorInRectXY(&v, x, y, w, h) != 0;
}

#ifdef __cplusplus

bool vector_is_zero(const vector &v)
{
    return sg_Geometry_VectorIsZero(&v) != 0;
}

#endif

bool vector_is_zero(const vector *v)
{
    return sg_Geometry_VectorIsZero(v) != 0;
}

bool vector_is_zero_byval(const vector v)
{
    return sg_Geometry_VectorIsZero(&v) != 0;
}

#ifdef __cplusplus

float vector_magnitude(const vector &v)
{
    return sg_Geometry_VectorMagnitude(&v);
}

#endif

float vector_magnitude(const vector *v)
{
    return sg_Geometry_VectorMagnitude(v);
}

float vector_magnitude_byval(const vector v)
{
    return sg_Geometry_VectorMagnitude(&v);
}

#ifdef __cplusplus

float vector_magnitude_sq(const vector &v)
{
    return sg_Geometry_VectorMagnitudeSq(&v);
}

#endif

float vector_magnitude_sq(const vector *v)
{
    return sg_Geometry_VectorMagnitudeSq(v);
}

float vector_magnitude_sq_byval(const vector v)
{
    return sg_Geometry_VectorMagnitudeSq(&v);
}

#ifdef __cplusplus

vector vector_multiply(const vector &v, float s)
{
    return sg_Geometry_VectorMultiply(&v, s);
}

#endif

vector vector_multiply(const vector *v, float s)
{
    return sg_Geometry_VectorMultiply(v, s);
}

vector vector_multiply_byval(const vector v, float s)
{
    return sg_Geometry_VectorMultiply(&v, s);
}

#ifdef __cplusplus

vector vector_normal(const vector &v)
{
    return sg_Geometry_VectorNormal(&v);
}

#endif

vector vector_normal(const vector *v)
{
    return sg_Geometry_VectorNormal(v);
}

vector vector_normal_byval(const vector v)
{
    return sg_Geometry_VectorNormal(&v);
}

#ifdef __cplusplus

vector vector_out_of_circle_from_circle(const circle &src, const circle &bounds, const vector &velocity)
{
    return sg_Geometry_VectorOutOfCircleFromCircle(&src, &bounds, &velocity);
}

#endif

vector vector_out_of_circle_from_circle(const circle *src, const circle *bounds, const vector *velocity)
{
    return sg_Geometry_VectorOutOfCircleFromCircle(src, bounds, velocity);
}

vector vector_out_of_circle_from_circle_byval(const circle src, const circle bounds, const vector velocity)
{
    return sg_Geometry_VectorOutOfCircleFromCircle(&src, &bounds, &velocity);
}

#ifdef __cplusplus

vector vector_out_of_circle_from_point(const point2d &pt, const circle &c, const vector &velocity)
{
    return sg_Geometry_VectorOutOfCircleFromPoint(&pt, &c, &velocity);
}

#endif

vector vector_out_of_circle_from_point(const point2d *pt, const circle *c, const vector *velocity)
{
    return sg_Geometry_VectorOutOfCircleFromPoint(pt, c, velocity);
}

vector vector_out_of_circle_from_point_byval(const point2d pt, const circle c, const vector velocity)
{
    return sg_Geometry_VectorOutOfCircleFromPoint(&pt, &c, &velocity);
}

#ifdef __cplusplus

vector vector_out_of_rect_from_circle(const circle &c, const rectangle &rect, const vector &velocity)
{
    return sg_Geometry_VectorOutOfRectFromCircle(&c, &rect, &velocity);
}

#endif

vector vector_out_of_rect_from_circle(const circle *c, const rectangle *rect, const vector *velocity)
{
    return sg_Geometry_VectorOutOfRectFromCircle(c, rect, velocity);
}

vector vector_out_of_rect_from_circle_byval(const circle c, const rectangle rect, const vector velocity)
{
    return sg_Geometry_VectorOutOfRectFromCircle(&c, &rect, &velocity);
}

#ifdef __cplusplus

vector vector_out_of_rect_from_point(const point2d &pt, const rectangle &rect, const vector &velocity)
{
    return sg_Geometry_VectorOutOfRectFromPoint(&pt, &rect, &velocity);
}

#endif

vector vector_out_of_rect_from_point(const point2d *pt, const rectangle *rect, const vector *velocity)
{
    return sg_Geometry_VectorOutOfRectFromPoint(pt, rect, velocity);
}

vector vector_out_of_rect_from_point_byval(const point2d pt, const rectangle rect, const vector velocity)
{
    return sg_Geometry_VectorOutOfRectFromPoint(&pt, &rect, &velocity);
}

#ifdef __cplusplus

vector vector_out_of_rect_from_rect(const rectangle &src, const rectangle &bounds, const vector &velocity)
{
    return sg_Geometry_VectorOutOfRectFromRect(&src, &bounds, &velocity);
}

#endif

vector vector_out_of_rect_from_rect(const rectangle *src, const rectangle *bounds, const vector *velocity)
{
    return sg_Geometry_VectorOutOfRectFromRect(src, bounds, velocity);
}

vector vector_out_of_rect_from_rect_byval(const rectangle src, const rectangle bounds, const vector velocity)
{
    return sg_Geometry_VectorOutOfRectFromRect(&src, &bounds, &velocity);
}

vector vector_to(float x, float y)
{
    return sg_Geometry_VectorTo(x, y, false != 0);
}

#ifdef __cplusplus

vector vector_to(float x, float y, bool invertY)
{
    return sg_Geometry_VectorTo(x, y, invertY != 0);
}

#endif

vector vector_to_with_invert_y(float x, float y, bool invertY)
{
    return sg_Geometry_VectorTo(x, y, invertY != 0);
}

#ifdef __cplusplus

vector vector_to_point(const point2d &p1)
{
    return sg_Geometry_VectorToPoint(&p1);
}

#endif

vector vector_to_point(const point2d *p1)
{
    return sg_Geometry_VectorToPoint(p1);
}

vector vector_to_point_byval(const point2d p1)
{
    return sg_Geometry_VectorToPoint(&p1);
}

#ifdef __cplusplus

bool vectors_equal(const vector &v1, const vector &v2)
{
    return sg_Geometry_VectorsEqual(&v1, &v2) != 0;
}

#endif

bool vectors_equal(const vector *v1, const vector *v2)
{
    return sg_Geometry_VectorsEqual(v1, v2) != 0;
}

bool vectors_equal_byval(const vector v1, const vector v2)
{
    return sg_Geometry_VectorsEqual(&v1, &v2) != 0;
}

#ifdef __cplusplus

bool vectors_not_equal(const vector &v1, const vector &v2)
{
    return sg_Geometry_VectorsNotEqual(&v1, &v2) != 0;
}

#endif

bool vectors_not_equal(const vector *v1, const vector *v2)
{
    return sg_Geometry_VectorsNotEqual(v1, v2) != 0;
}

bool vectors_not_equal_byval(const vector v1, const vector v2)
{
    return sg_Geometry_VectorsNotEqual(&v1, &v2) != 0;
}

#ifdef __cplusplus

void widest_points(const circle &c, const vector &along, point2d &pt1, point2d &pt2)
{
    sg_Geometry_WidestPoints(&c, &along, &pt1, &pt2);
}

#endif

void widest_points(const circle *c, const vector *along, point2d *pt1, point2d *pt2)
{
    sg_Geometry_WidestPoints(c, along, pt1, pt2);
}

void widest_points_byval(const circle c, const vector along, point2d *pt1, point2d *pt2)
{
    sg_Geometry_WidestPoints(&c, &along, pt1, pt2);
}

