/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Text
*
* Wrapping sgText.pas
*/

#include "SGSDK.h"
#include "Text.h"

#include "Types.h"

#ifdef __cplusplus

void draw_framerate(float x, float y)
{
    sg_Text_DrawFramerateWithSimpleFont(x, y);
}

#endif

void draw_framerate_with_simple_font(float x, float y)
{
    sg_Text_DrawFramerateWithSimpleFont(x, y);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, float x, float y)
{
    sg_Text_DrawSimpleText(theText, textColor, x, y);
}

#endif

void draw_simple_text(const char *theText, color textColor, float x, float y)
{
    sg_Text_DrawSimpleText(theText, textColor, x, y);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, float x, float y, const drawing_options &opts)
{
    sg_Text_DrawSimpleTextOpts(theText, textColor, x, y, &opts);
}

#endif

void draw_simple_text_opts(const char *theText, color textColor, float x, float y, const drawing_options *opts)
{
    sg_Text_DrawSimpleTextOpts(theText, textColor, x, y, opts);
}

void draw_simple_text_opts_byval(const char *theText, color textColor, float x, float y, const drawing_options opts)
{
    sg_Text_DrawSimpleTextOpts(theText, textColor, x, y, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, const char *name, float x, float y)
{
    sg_Text_DrawTextWithFontNamed(theText, textColor, name, x, y);
}

#endif

void draw_text_with_font_named(const char *theText, color textColor, const char *name, float x, float y)
{
    sg_Text_DrawTextWithFontNamed(theText, textColor, name, x, y);
}

void draw_text(const char *theText, color textColor, font theFont, float x, float y)
{
    sg_Text_DrawText(theText, textColor, theFont, x, y);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle &area)
{
    sg_Text_DrawTextInRect(theText, textColor, backColor, theFont, align, &area);
}

#endif

void draw_text_in_rect(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area)
{
    sg_Text_DrawTextInRect(theText, textColor, backColor, theFont, align, area);
}

void draw_text_in_rect_byval(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle area)
{
    sg_Text_DrawTextInRect(theText, textColor, backColor, theFont, align, &area);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, const char *name, float x, float y, const drawing_options &opts)
{
    sg_Text_DrawTextWithFontNamedOpts(theText, textColor, name, x, y, &opts);
}

#endif

void draw_text_with_font_named_opts(const char *theText, color textColor, const char *name, float x, float y, const drawing_options *opts)
{
    sg_Text_DrawTextWithFontNamedOpts(theText, textColor, name, x, y, opts);
}

void draw_text_with_font_named_opts_byval(const char *theText, color textColor, const char *name, float x, float y, const drawing_options opts)
{
    sg_Text_DrawTextWithFontNamedOpts(theText, textColor, name, x, y, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle &area)
{
    sg_Text_DrawTextInRectWithFontNamed(theText, textColor, backColor, name, align, &area);
}

#endif

void draw_text_in_rect_with_font_named(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area)
{
    sg_Text_DrawTextInRectWithFontNamed(theText, textColor, backColor, name, align, area);
}

void draw_text_in_rect_with_font_named_byval(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle area)
{
    sg_Text_DrawTextInRectWithFontNamed(theText, textColor, backColor, name, align, &area);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, font theFont, float x, float y, const drawing_options &opts)
{
    sg_Text_DrawTextOpts(theText, textColor, theFont, x, y, &opts);
}

#endif

void draw_text_opts(const char *theText, color textColor, font theFont, float x, float y, const drawing_options *opts)
{
    sg_Text_DrawTextOpts(theText, textColor, theFont, x, y, opts);
}

void draw_text_opts_byval(const char *theText, color textColor, font theFont, float x, float y, const drawing_options opts)
{
    sg_Text_DrawTextOpts(theText, textColor, theFont, x, y, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, const char *name, int32_t size, float x, float y)
{
    sg_Text_DrawTextWithFontNamedSize(theText, textColor, name, size, x, y);
}

#endif

void draw_text_with_font_named_size(const char *theText, color textColor, const char *name, int32_t size, float x, float y)
{
    sg_Text_DrawTextWithFontNamedSize(theText, textColor, name, size, x, y);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle &area, const drawing_options &opts)
{
    sg_Text_DrawTextInRectOpts(theText, textColor, backColor, theFont, align, &area, &opts);
}

#endif

void draw_text_in_rect_opts(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area, const drawing_options *opts)
{
    sg_Text_DrawTextInRectOpts(theText, textColor, backColor, theFont, align, area, opts);
}

void draw_text_in_rect_opts_byval(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle area, const drawing_options opts)
{
    sg_Text_DrawTextInRectOpts(theText, textColor, backColor, theFont, align, &area, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options &opts)
{
    sg_Text_DrawTextWithFontNamedAndSizeOpts(theText, textColor, name, size, x, y, &opts);
}

#endif

void draw_text_with_font_named_and_size_opts(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options *opts)
{
    sg_Text_DrawTextWithFontNamedAndSizeOpts(theText, textColor, name, size, x, y, opts);
}

void draw_text_with_font_named_and_size_opts_byval(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options opts)
{
    sg_Text_DrawTextWithFontNamedAndSizeOpts(theText, textColor, name, size, x, y, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle &area, const drawing_options &opts)
{
    sg_Text_DrawTextInRectWithFontNamedOpts(theText, textColor, backColor, name, align, &area, &opts);
}

#endif

void draw_text_in_rect_with_font_named_opts(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area, const drawing_options *opts)
{
    sg_Text_DrawTextInRectWithFontNamedOpts(theText, textColor, backColor, name, align, area, opts);
}

void draw_text_in_rect_with_font_named_opts_byval(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle area, const drawing_options opts)
{
    sg_Text_DrawTextInRectWithFontNamedOpts(theText, textColor, backColor, name, align, &area, &opts);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle &area)
{
    sg_Text_DrawTextInRectWithFontNamedAndSize(theText, textColor, backColor, name, size, align, &area);
}

#endif

void draw_text_in_rect_with_font_named_and_size(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area)
{
    sg_Text_DrawTextInRectWithFontNamedAndSize(theText, textColor, backColor, name, size, align, area);
}

void draw_text_in_rect_with_font_named_and_size_byval(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle area)
{
    sg_Text_DrawTextInRectWithFontNamedAndSize(theText, textColor, backColor, name, size, align, &area);
}

#ifdef __cplusplus

void draw_text(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle &area, const drawing_options &opts)
{
    sg_Text_DrawTextInRectWithFontNamedAndSizeOpts(theText, textColor, backColor, name, size, align, &area, &opts);
}

#endif

void draw_text_in_rect_with_font_named_and_size_opts(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area, const drawing_options *opts)
{
    sg_Text_DrawTextInRectWithFontNamedAndSizeOpts(theText, textColor, backColor, name, size, align, area, opts);
}

void draw_text_in_rect_with_font_named_and_size_opts_byval(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle area, const drawing_options opts)
{
    sg_Text_DrawTextInRectWithFontNamedAndSizeOpts(theText, textColor, backColor, name, size, align, &area, &opts);
}

#ifdef __cplusplus

bitmap draw_text_to_bitmap(font font, const char *str, color clrFg, color backgroundColor)
{
    return sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font, str, clrFg, backgroundColor);
}

#endif

bitmap draw_text_to_bitmap_at_point_with_font_named_and_size(font font, const char *str, color clrFg, color backgroundColor)
{
    return sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font, str, clrFg, backgroundColor);
}

font_style font_font_style(font font)
{
    return sg_Text_FontFontStyle(font);
}

void font_name_for(const char *fontName, int32_t size, char *result)
{
    sg_Text_FontNameFor(fontName, size, result);
}

font font_named(const char *name)
{
    return sg_Text_FontNamed(name);
}

#ifdef __cplusplus

font font_named(const char *name, int32_t size)
{
    return sg_Text_FontNamedWithSize(name, size);
}

#endif

font font_named_with_size(const char *name, int32_t size)
{
    return sg_Text_FontNamedWithSize(name, size);
}

void font_set_style(font font, font_style value)
{
    sg_Text_FontSetStyle(font, value);
}

#ifdef __cplusplus

void free_font(font &fontToFree)
{
    sg_Text_FreeFont(&fontToFree);
}

#endif

void free_font(font *fontToFree)
{
    sg_Text_FreeFont(fontToFree);
}

bool has_font(const char *name)
{
    return sg_Text_HasFont(name) != 0;
}

font load_font(const char *fontName, int32_t size)
{
    return sg_Text_LoadFont(fontName, size);
}

font load_font_named(const char *name, const char *filename, int32_t size)
{
    return sg_Text_LoadFontNamed(name, filename, size);
}

void release_all_fonts()
{
    sg_Text_ReleaseAllFonts();
}

void release_font(const char *name)
{
    sg_Text_ReleaseFont(name);
}

font_alignment text_alignment_from(const char *str)
{
    return sg_Text_TextAlignmentFrom(str);
}

int32_t text_height(font theFont, const char *theText)
{
    return sg_Text_TextHeight(theFont, theText);
}

int32_t text_width(font theFont, const char *theText)
{
    return sg_Text_TextWidth(theFont, theText);
}

