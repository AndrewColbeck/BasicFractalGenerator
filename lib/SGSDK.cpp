/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - SGSDK
*
* Wrapping SGSDK.pas
*/

#include "SGSDK.h"
#include "SGSDK.h"

#include "Timers.h"
#include "Web.h"
#include "Audio.h"
#include "Images.h"
#include "Arduino.h"
#include "Animations.h"
#include "WindowManager.h"
#include "Sprites.h"
#include "Utils.h"
#include "Input.h"
#include "Types.h"
#include "Graphics.h"
#include "Geometry.h"
#include "Text.h"
#include "UserInterface.h"
#include "Resources.h"
#include "Camera.h"
#include "Networking.h"
#include "DrawingOptions.h"
#include "Physics.h"

#ifdef __cplusplus
#ifdef _MSC_VER
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

int32_t (*var_sg_Animations_AnimationCount)(animation_script script);
int32_t sg_Animations_AnimationCount(animation_script script)
{
	return var_sg_Animations_AnimationCount(script);
}
int32_t (*var_sg_Animations_AnimationCurrentCell)(animation anim);
int32_t sg_Animations_AnimationCurrentCell(animation anim)
{
	return var_sg_Animations_AnimationCurrentCell(anim);
}
vector (*var_sg_Animations_AnimationCurrentVector)(animation anim);
vector sg_Animations_AnimationCurrentVector(animation anim)
{
	return var_sg_Animations_AnimationCurrentVector(anim);
}
bool (*var_sg_Animations_AnimationEnded)(animation anim);
bool sg_Animations_AnimationEnded(animation anim)
{
	return var_sg_Animations_AnimationEnded(anim);
}
bool (*var_sg_Animations_AnimationEnteredFrame)(animation anim);
bool sg_Animations_AnimationEnteredFrame(animation anim)
{
	return var_sg_Animations_AnimationEnteredFrame(anim);
}
float (*var_sg_Animations_AnimationFrameTime)(animation anim);
float sg_Animations_AnimationFrameTime(animation anim)
{
	return var_sg_Animations_AnimationFrameTime(anim);
}
int32_t (*var_sg_Animations_AnimationIndex)(animation_script temp, const char *name);
int32_t sg_Animations_AnimationIndex(animation_script temp, const char *name)
{
	return var_sg_Animations_AnimationIndex(temp,name);
}
void (*var_sg_Animations_AnimationName)(animation temp, char *result);
void sg_Animations_AnimationName(animation temp, char *result)
{
	var_sg_Animations_AnimationName(temp,result);
}
void (*var_sg_Animations_AnimationScriptAnimationName)(animation_script temp, int32_t idx, char *result);
void sg_Animations_AnimationScriptAnimationName(animation_script temp, int32_t idx, char *result)
{
	var_sg_Animations_AnimationScriptAnimationName(temp,idx,result);
}
void (*var_sg_Animations_AnimationScriptName)(animation_script script, char *result);
void sg_Animations_AnimationScriptName(animation_script script, char *result)
{
	var_sg_Animations_AnimationScriptName(script,result);
}
animation_script (*var_sg_Animations_AnimationScriptNamed)(const char *name);
animation_script sg_Animations_AnimationScriptNamed(const char *name)
{
	return var_sg_Animations_AnimationScriptNamed(name);
}
void (*var_sg_Animations_AssignAnimation)(animation anim, int32_t idx, animation_script script);
void sg_Animations_AssignAnimation(animation anim, int32_t idx, animation_script script)
{
	var_sg_Animations_AssignAnimation(anim,idx,script);
}
void (*var_sg_Animations_AssignAnimationNamed)(animation anim, const char *name, animation_script script);
void sg_Animations_AssignAnimationNamed(animation anim, const char *name, animation_script script)
{
	var_sg_Animations_AssignAnimationNamed(anim,name,script);
}
void (*var_sg_Animations_AssignAnimationNamedWithSound)(animation anim, const char *name, animation_script script, bool withSound);
void sg_Animations_AssignAnimationNamedWithSound(animation anim, const char *name, animation_script script, bool withSound)
{
	var_sg_Animations_AssignAnimationNamedWithSound(anim,name,script,withSound != 0);
}
void (*var_sg_Animations_AssignAnimationWithSound)(animation anim, int32_t idx, animation_script script, bool withSound);
void sg_Animations_AssignAnimationWithSound(animation anim, int32_t idx, animation_script script, bool withSound)
{
	var_sg_Animations_AssignAnimationWithSound(anim,idx,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimation)(int32_t identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimation(int32_t identifier, animation_script script, bool withSound)
{
	return var_sg_Animations_CreateAnimation(identifier,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimationNamed)(const char *identifier, animation_script script);
animation sg_Animations_CreateAnimationNamed(const char *identifier, animation_script script)
{
	return var_sg_Animations_CreateAnimationNamed(identifier,script);
}
animation (*var_sg_Animations_CreateAnimationNamedWithSound)(const char *identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimationNamedWithSound(const char *identifier, animation_script script, bool withSound)
{
	return var_sg_Animations_CreateAnimationNamedWithSound(identifier,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimationWithSound)(int32_t identifier, animation_script script);
animation sg_Animations_CreateAnimationWithSound(int32_t identifier, animation_script script)
{
	return var_sg_Animations_CreateAnimationWithSound(identifier,script);
}
void (*var_sg_Animations_DrawAnimation)(animation ani, bitmap bmp, float x, float y);
void sg_Animations_DrawAnimation(animation ani, bitmap bmp, float x, float y)
{
	var_sg_Animations_DrawAnimation(ani,bmp,x,y);
}
void (*var_sg_Animations_DrawAnimationAtPoint)(animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationAtPoint(animation ani, bitmap bmp, const point2d *pt)
{
	var_sg_Animations_DrawAnimationAtPoint(ani,bmp,pt);
}
void (*var_sg_Animations_DrawAnimationAtPointWithOptions)(animation ani, bitmap bmp, const point2d *pt, const drawing_options *opts);
void sg_Animations_DrawAnimationAtPointWithOptions(animation ani, bitmap bmp, const point2d *pt, const drawing_options *opts)
{
	var_sg_Animations_DrawAnimationAtPointWithOptions(ani,bmp,pt,opts);
}
void (*var_sg_Animations_DrawAnimationWithOptions)(animation ani, bitmap bmp, float x, float y, const drawing_options *opts);
void sg_Animations_DrawAnimationWithOptions(animation ani, bitmap bmp, float x, float y, const drawing_options *opts)
{
	var_sg_Animations_DrawAnimationWithOptions(ani,bmp,x,y,opts);
}
void (*var_sg_Animations_FreeAnimation)(animation *ani);
void sg_Animations_FreeAnimation(animation *ani)
{
	var_sg_Animations_FreeAnimation(ani);
}
void (*var_sg_Animations_FreeAnimationScript)(animation_script *scriptToFree);
void sg_Animations_FreeAnimationScript(animation_script *scriptToFree)
{
	var_sg_Animations_FreeAnimationScript(scriptToFree);
}
bool (*var_sg_Animations_HasAnimationScript)(const char *name);
bool sg_Animations_HasAnimationScript(const char *name)
{
	return var_sg_Animations_HasAnimationScript(name);
}
animation_script (*var_sg_Animations_LoadAnimationScript)(const char *filename);
animation_script sg_Animations_LoadAnimationScript(const char *filename)
{
	return var_sg_Animations_LoadAnimationScript(filename);
}
animation_script (*var_sg_Animations_LoadAnimationScriptNamed)(const char *name, const char *filename);
animation_script sg_Animations_LoadAnimationScriptNamed(const char *name, const char *filename)
{
	return var_sg_Animations_LoadAnimationScriptNamed(name,filename);
}
void (*var_sg_Animations_ReleaseAllAnimationScripts)();
void sg_Animations_ReleaseAllAnimationScripts()
{
	var_sg_Animations_ReleaseAllAnimationScripts();
}
void (*var_sg_Animations_ReleaseAnimationScript)(const char *name);
void sg_Animations_ReleaseAnimationScript(const char *name)
{
	var_sg_Animations_ReleaseAnimationScript(name);
}
void (*var_sg_Animations_ResetAnimationWithSound)(animation anim, bool withSound);
void sg_Animations_ResetAnimationWithSound(animation anim, bool withSound)
{
	var_sg_Animations_ResetAnimationWithSound(anim,withSound != 0);
}
void (*var_sg_Animations_RestartAnimation)(animation anim);
void sg_Animations_RestartAnimation(animation anim)
{
	var_sg_Animations_RestartAnimation(anim);
}
void (*var_sg_Animations_UpdateAnimation)(animation anim);
void sg_Animations_UpdateAnimation(animation anim)
{
	var_sg_Animations_UpdateAnimation(anim);
}
void (*var_sg_Animations_UpdateAnimationPct)(animation anim, float pct);
void sg_Animations_UpdateAnimationPct(animation anim, float pct)
{
	var_sg_Animations_UpdateAnimationPct(anim,pct);
}
void (*var_sg_Animations_UpdateAnimationPctAndSound)(animation anim, float pct, bool withSound);
void sg_Animations_UpdateAnimationPctAndSound(animation anim, float pct, bool withSound)
{
	var_sg_Animations_UpdateAnimationPctAndSound(anim,pct,withSound != 0);
}
arduino_device (*var_sg_Arduino_ArduinoDeviceNamed)(const char *name);
arduino_device sg_Arduino_ArduinoDeviceNamed(const char *name)
{
	return var_sg_Arduino_ArduinoDeviceNamed(name);
}
bool (*var_sg_Arduino_ArduinoHasData)(arduino_device dev);
bool sg_Arduino_ArduinoHasData(arduino_device dev)
{
	return var_sg_Arduino_ArduinoHasData(dev);
}
unsigned char (*var_sg_Arduino_ArduinoReadByte)(arduino_device dev);
unsigned char sg_Arduino_ArduinoReadByte(arduino_device dev)
{
	return var_sg_Arduino_ArduinoReadByte(dev);
}
unsigned char (*var_sg_Arduino_ArduinoReadByteTimeout)(arduino_device dev, int32_t timeout);
unsigned char sg_Arduino_ArduinoReadByteTimeout(arduino_device dev, int32_t timeout)
{
	return var_sg_Arduino_ArduinoReadByteTimeout(dev,timeout);
}
void (*var_sg_Arduino_ArduinoReadLine)(arduino_device dev, char *result);
void sg_Arduino_ArduinoReadLine(arduino_device dev, char *result)
{
	var_sg_Arduino_ArduinoReadLine(dev,result);
}
void (*var_sg_Arduino_ArduinoReadLineTimeout)(arduino_device dev, int32_t timeout, char *result);
void sg_Arduino_ArduinoReadLineTimeout(arduino_device dev, int32_t timeout, char *result)
{
	var_sg_Arduino_ArduinoReadLineTimeout(dev,timeout,result);
}
void (*var_sg_Arduino_ArduinoSendByte)(arduino_device dev, unsigned char value);
void sg_Arduino_ArduinoSendByte(arduino_device dev, unsigned char value)
{
	var_sg_Arduino_ArduinoSendByte(dev,value);
}
void (*var_sg_Arduino_ArduinoSendString)(arduino_device dev, const char *value);
void sg_Arduino_ArduinoSendString(arduino_device dev, const char *value)
{
	var_sg_Arduino_ArduinoSendString(dev,value);
}
void (*var_sg_Arduino_ArduinoSendStringLine)(arduino_device dev, const char *value);
void sg_Arduino_ArduinoSendStringLine(arduino_device dev, const char *value)
{
	var_sg_Arduino_ArduinoSendStringLine(dev,value);
}
arduino_device (*var_sg_Arduino_CreateArduinoDevice)(const char *port, int32_t baud);
arduino_device sg_Arduino_CreateArduinoDevice(const char *port, int32_t baud)
{
	return var_sg_Arduino_CreateArduinoDevice(port,baud);
}
arduino_device (*var_sg_Arduino_CreateArduinoNamed)(const char *name, const char *port, int32_t baud);
arduino_device sg_Arduino_CreateArduinoNamed(const char *name, const char *port, int32_t baud)
{
	return var_sg_Arduino_CreateArduinoNamed(name,port,baud);
}
void (*var_sg_Arduino_FreeArduinoDevice)(arduino_device *dev);
void sg_Arduino_FreeArduinoDevice(arduino_device *dev)
{
	var_sg_Arduino_FreeArduinoDevice(dev);
}
bool (*var_sg_Arduino_HasArduinoDevice)(const char *name);
bool sg_Arduino_HasArduinoDevice(const char *name)
{
	return var_sg_Arduino_HasArduinoDevice(name);
}
void (*var_sg_Arduino_ReleaseAllArduinoDevices)();
void sg_Arduino_ReleaseAllArduinoDevices()
{
	var_sg_Arduino_ReleaseAllArduinoDevices();
}
void (*var_sg_Arduino_ReleaseArduinoDevice)(const char *name);
void sg_Arduino_ReleaseArduinoDevice(const char *name)
{
	var_sg_Arduino_ReleaseArduinoDevice(name);
}
bool (*var_sg_Audio_AudioReady)();
bool sg_Audio_AudioReady()
{
	return var_sg_Audio_AudioReady();
}
void (*var_sg_Audio_CloseAudio)();
void sg_Audio_CloseAudio()
{
	var_sg_Audio_CloseAudio();
}
void (*var_sg_Audio_FadeMusicIn)(music mus, int32_t ms);
void sg_Audio_FadeMusicIn(music mus, int32_t ms)
{
	var_sg_Audio_FadeMusicIn(mus,ms);
}
void (*var_sg_Audio_FadeMusicInWithLoops)(music mus, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicInWithLoops(music mus, int32_t loops, int32_t ms)
{
	var_sg_Audio_FadeMusicInWithLoops(mus,loops,ms);
}
void (*var_sg_Audio_FadeMusicNamedIn)(const char *name, int32_t ms);
void sg_Audio_FadeMusicNamedIn(const char *name, int32_t ms)
{
	var_sg_Audio_FadeMusicNamedIn(name,ms);
}
void (*var_sg_Audio_FadeMusicNamedInWithLoops)(const char *name, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicNamedInWithLoops(const char *name, int32_t loops, int32_t ms)
{
	var_sg_Audio_FadeMusicNamedInWithLoops(name,loops,ms);
}
void (*var_sg_Audio_FadeMusicOut)(int32_t ms);
void sg_Audio_FadeMusicOut(int32_t ms)
{
	var_sg_Audio_FadeMusicOut(ms);
}
void (*var_sg_Audio_FreeMusic)(music *mus);
void sg_Audio_FreeMusic(music *mus)
{
	var_sg_Audio_FreeMusic(mus);
}
void (*var_sg_Audio_FreeSoundEffect)(sound_effect *effect);
void sg_Audio_FreeSoundEffect(sound_effect *effect)
{
	var_sg_Audio_FreeSoundEffect(effect);
}
bool (*var_sg_Audio_HasMusic)(const char *name);
bool sg_Audio_HasMusic(const char *name)
{
	return var_sg_Audio_HasMusic(name);
}
bool (*var_sg_Audio_HasSoundEffect)(const char *name);
bool sg_Audio_HasSoundEffect(const char *name)
{
	return var_sg_Audio_HasSoundEffect(name);
}
music (*var_sg_Audio_LoadMusic)(const char *filename);
music sg_Audio_LoadMusic(const char *filename)
{
	return var_sg_Audio_LoadMusic(filename);
}
music (*var_sg_Audio_LoadMusicNamed)(const char *name, const char *filename);
music sg_Audio_LoadMusicNamed(const char *name, const char *filename)
{
	return var_sg_Audio_LoadMusicNamed(name,filename);
}
sound_effect (*var_sg_Audio_LoadSoundEffect)(const char *filename);
sound_effect sg_Audio_LoadSoundEffect(const char *filename)
{
	return var_sg_Audio_LoadSoundEffect(filename);
}
sound_effect (*var_sg_Audio_LoadSoundEffectNamed)(const char *name, const char *filename);
sound_effect sg_Audio_LoadSoundEffectNamed(const char *name, const char *filename)
{
	return var_sg_Audio_LoadSoundEffectNamed(name,filename);
}
void (*var_sg_Audio_MusicFilename)(music mus, char *result);
void sg_Audio_MusicFilename(music mus, char *result)
{
	var_sg_Audio_MusicFilename(mus,result);
}
void (*var_sg_Audio_MusicName)(music mus, char *result);
void sg_Audio_MusicName(music mus, char *result)
{
	var_sg_Audio_MusicName(mus,result);
}
music (*var_sg_Audio_MusicNamed)(const char *name);
music sg_Audio_MusicNamed(const char *name)
{
	return var_sg_Audio_MusicNamed(name);
}
bool (*var_sg_Audio_MusicPlaying)();
bool sg_Audio_MusicPlaying()
{
	return var_sg_Audio_MusicPlaying();
}
float (*var_sg_Audio_MusicVolume)();
float sg_Audio_MusicVolume()
{
	return var_sg_Audio_MusicVolume();
}
void (*var_sg_Audio_OpenAudio)();
void sg_Audio_OpenAudio()
{
	var_sg_Audio_OpenAudio();
}
void (*var_sg_Audio_PauseMusic)();
void sg_Audio_PauseMusic()
{
	var_sg_Audio_PauseMusic();
}
void (*var_sg_Audio_PlayMusicNamedWithLoops)(const char *name, int32_t loops);
void sg_Audio_PlayMusicNamedWithLoops(const char *name, int32_t loops)
{
	var_sg_Audio_PlayMusicNamedWithLoops(name,loops);
}
void (*var_sg_Audio_PlayMusicWithLoops)(music mus, int32_t loops);
void sg_Audio_PlayMusicWithLoops(music mus, int32_t loops)
{
	var_sg_Audio_PlayMusicWithLoops(mus,loops);
}
void (*var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume)(const char *name, int32_t loops, float vol);
void sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(const char *name, int32_t loops, float vol)
{
	var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(name,loops,vol);
}
void (*var_sg_Audio_PlaySoundEffectWithLoopAndVolume)(sound_effect effect, int32_t loops, float vol);
void sg_Audio_PlaySoundEffectWithLoopAndVolume(sound_effect effect, int32_t loops, float vol)
{
	var_sg_Audio_PlaySoundEffectWithLoopAndVolume(effect,loops,vol);
}
void (*var_sg_Audio_ReleaseAllMusic)();
void sg_Audio_ReleaseAllMusic()
{
	var_sg_Audio_ReleaseAllMusic();
}
void (*var_sg_Audio_ReleaseAllSoundEffects)();
void sg_Audio_ReleaseAllSoundEffects()
{
	var_sg_Audio_ReleaseAllSoundEffects();
}
void (*var_sg_Audio_ReleaseMusic)(const char *name);
void sg_Audio_ReleaseMusic(const char *name)
{
	var_sg_Audio_ReleaseMusic(name);
}
void (*var_sg_Audio_ReleaseSoundEffect)(const char *name);
void sg_Audio_ReleaseSoundEffect(const char *name)
{
	var_sg_Audio_ReleaseSoundEffect(name);
}
void (*var_sg_Audio_ResumeMusic)();
void sg_Audio_ResumeMusic()
{
	var_sg_Audio_ResumeMusic();
}
void (*var_sg_Audio_SetMusicVolume)(float value);
void sg_Audio_SetMusicVolume(float value)
{
	var_sg_Audio_SetMusicVolume(value);
}
void (*var_sg_Audio_SoundEffectFilename)(sound_effect effect, char *result);
void sg_Audio_SoundEffectFilename(sound_effect effect, char *result)
{
	var_sg_Audio_SoundEffectFilename(effect,result);
}
void (*var_sg_Audio_SoundEffectName)(sound_effect effect, char *result);
void sg_Audio_SoundEffectName(sound_effect effect, char *result)
{
	var_sg_Audio_SoundEffectName(effect,result);
}
sound_effect (*var_sg_Audio_SoundEffectNamed)(const char *name);
sound_effect sg_Audio_SoundEffectNamed(const char *name)
{
	return var_sg_Audio_SoundEffectNamed(name);
}
bool (*var_sg_Audio_SoundEffectNamedPlaying)(const char *name);
bool sg_Audio_SoundEffectNamedPlaying(const char *name)
{
	return var_sg_Audio_SoundEffectNamedPlaying(name);
}
bool (*var_sg_Audio_SoundEffectPlaying)(sound_effect effect);
bool sg_Audio_SoundEffectPlaying(sound_effect effect)
{
	return var_sg_Audio_SoundEffectPlaying(effect);
}
void (*var_sg_Audio_StopMusic)();
void sg_Audio_StopMusic()
{
	var_sg_Audio_StopMusic();
}
void (*var_sg_Audio_StopSoundEffect)(sound_effect effect);
void sg_Audio_StopSoundEffect(sound_effect effect)
{
	var_sg_Audio_StopSoundEffect(effect);
}
void (*var_sg_Audio_StopSoundEffectNamed)(const char *name);
void sg_Audio_StopSoundEffectNamed(const char *name)
{
	var_sg_Audio_StopSoundEffectNamed(name);
}
bool (*var_sg_Audio_TryOpenAudio)();
bool sg_Audio_TryOpenAudio()
{
	return var_sg_Audio_TryOpenAudio();
}
point2d (*var_sg_Camera_CameraPos)();
point2d sg_Camera_CameraPos()
{
	return var_sg_Camera_CameraPos();
}
float (*var_sg_Camera_CameraX)();
float sg_Camera_CameraX()
{
	return var_sg_Camera_CameraX();
}
float (*var_sg_Camera_CameraY)();
float sg_Camera_CameraY()
{
	return var_sg_Camera_CameraY();
}
void (*var_sg_Camera_CenterCameraOn)(sprite s, const vector *offset);
void sg_Camera_CenterCameraOn(sprite s, const vector *offset)
{
	var_sg_Camera_CenterCameraOn(s,offset);
}
void (*var_sg_Camera_CenterCameraOnWithXYOffset)(sprite s, float offsetX, float offsetY);
void sg_Camera_CenterCameraOnWithXYOffset(sprite s, float offsetX, float offsetY)
{
	var_sg_Camera_CenterCameraOnWithXYOffset(s,offsetX,offsetY);
}
void (*var_sg_Camera_MoveCameraBy)(const vector *offset);
void sg_Camera_MoveCameraBy(const vector *offset)
{
	var_sg_Camera_MoveCameraBy(offset);
}
void (*var_sg_Camera_MoveCameraByXY)(float dx, float dy);
void sg_Camera_MoveCameraByXY(float dx, float dy)
{
	var_sg_Camera_MoveCameraByXY(dx,dy);
}
void (*var_sg_Camera_MoveCameraTo)(const point2d *pt);
void sg_Camera_MoveCameraTo(const point2d *pt)
{
	var_sg_Camera_MoveCameraTo(pt);
}
void (*var_sg_Camera_MoveCameraToXY)(float x, float y);
void sg_Camera_MoveCameraToXY(float x, float y)
{
	var_sg_Camera_MoveCameraToXY(x,y);
}
bool (*var_sg_Camera_PointOnScreen)(const point2d *pt);
bool sg_Camera_PointOnScreen(const point2d *pt)
{
	return var_sg_Camera_PointOnScreen(pt);
}
bool (*var_sg_Camera_RectOnScreen)(const rectangle *rect);
bool sg_Camera_RectOnScreen(const rectangle *rect)
{
	return var_sg_Camera_RectOnScreen(rect);
}
void (*var_sg_Camera_SetCameraPos)(const point2d *pt);
void sg_Camera_SetCameraPos(const point2d *pt)
{
	var_sg_Camera_SetCameraPos(pt);
}
void (*var_sg_Camera_SetCameraX)(float x);
void sg_Camera_SetCameraX(float x)
{
	var_sg_Camera_SetCameraX(x);
}
void (*var_sg_Camera_SetCameraY)(float y);
void sg_Camera_SetCameraY(float y)
{
	var_sg_Camera_SetCameraY(y);
}
point2d (*var_sg_Camera_ToScreen)(const point2d *worldPoint);
point2d sg_Camera_ToScreen(const point2d *worldPoint)
{
	return var_sg_Camera_ToScreen(worldPoint);
}
rectangle (*var_sg_Camera_ToScreenRect)(const rectangle *rect);
rectangle sg_Camera_ToScreenRect(const rectangle *rect)
{
	return var_sg_Camera_ToScreenRect(rect);
}
float (*var_sg_Camera_ToScreenX)(float worldX);
float sg_Camera_ToScreenX(float worldX)
{
	return var_sg_Camera_ToScreenX(worldX);
}
float (*var_sg_Camera_ToScreenY)(float worldY);
float sg_Camera_ToScreenY(float worldY)
{
	return var_sg_Camera_ToScreenY(worldY);
}
point2d (*var_sg_Camera_ToWorld)(const point2d *screenPoint);
point2d sg_Camera_ToWorld(const point2d *screenPoint)
{
	return var_sg_Camera_ToWorld(screenPoint);
}
float (*var_sg_Camera_ToWorldX)(float screenX);
float sg_Camera_ToWorldX(float screenX)
{
	return var_sg_Camera_ToWorldX(screenX);
}
float (*var_sg_Camera_ToWorldY)(float screenY);
float sg_Camera_ToWorldY(float screenY)
{
	return var_sg_Camera_ToWorldY(screenY);
}
drawing_options (*var_sg_DrawingOptions_OptionDefaults)();
drawing_options sg_DrawingOptions_OptionDefaults()
{
	return var_sg_DrawingOptions_OptionDefaults();
}
drawing_options (*var_sg_DrawingOptions_OptionDrawToBitmap)(bitmap dest);
drawing_options sg_DrawingOptions_OptionDrawToBitmap(bitmap dest)
{
	return var_sg_DrawingOptions_OptionDrawToBitmap(dest);
}
drawing_options (*var_sg_DrawingOptions_OptionDrawToBitmapOpts)(bitmap dest, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionDrawToBitmapOpts(bitmap dest, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionDrawToBitmapOpts(dest,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionDrawToWindow)(window dest);
drawing_options sg_DrawingOptions_OptionDrawToWindow(window dest)
{
	return var_sg_DrawingOptions_OptionDrawToWindow(dest);
}
drawing_options (*var_sg_DrawingOptions_OptionDrawToWindowOpts)(window dest, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionDrawToWindowOpts(window dest, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionDrawToWindowOpts(dest,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionFlipX)();
drawing_options sg_DrawingOptions_OptionFlipX()
{
	return var_sg_DrawingOptions_OptionFlipX();
}
drawing_options (*var_sg_DrawingOptions_OptionFlipXOpts)(const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionFlipXOpts(const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionFlipXOpts(opts);
}
drawing_options (*var_sg_DrawingOptions_OptionFlipXY)();
drawing_options sg_DrawingOptions_OptionFlipXY()
{
	return var_sg_DrawingOptions_OptionFlipXY();
}
drawing_options (*var_sg_DrawingOptions_OptionFlipXYOpts)(const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionFlipXYOpts(const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionFlipXYOpts(opts);
}
drawing_options (*var_sg_DrawingOptions_OptionFlipY)();
drawing_options sg_DrawingOptions_OptionFlipY()
{
	return var_sg_DrawingOptions_OptionFlipY();
}
drawing_options (*var_sg_DrawingOptions_OptionFlipYOpts)(const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionFlipYOpts(const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionFlipYOpts(opts);
}
drawing_options (*var_sg_DrawingOptions_OptionLineWidth)(int32_t width);
drawing_options sg_DrawingOptions_OptionLineWidth(int32_t width)
{
	return var_sg_DrawingOptions_OptionLineWidth(width);
}
drawing_options (*var_sg_DrawingOptions_OptionLineWidthOpts)(int32_t width, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionLineWidthOpts(int32_t width, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionLineWidthOpts(width,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionPartBmp)(float x, float y, float w, float h);
drawing_options sg_DrawingOptions_OptionPartBmp(float x, float y, float w, float h)
{
	return var_sg_DrawingOptions_OptionPartBmp(x,y,w,h);
}
drawing_options (*var_sg_DrawingOptions_OptionPartBmpOpts)(float x, float y, float w, float h, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionPartBmpOpts(float x, float y, float w, float h, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionPartBmpOpts(x,y,w,h,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionPartBmpRect)(const rectangle *part);
drawing_options sg_DrawingOptions_OptionPartBmpRect(const rectangle *part)
{
	return var_sg_DrawingOptions_OptionPartBmpRect(part);
}
drawing_options (*var_sg_DrawingOptions_OptionPartBmpRectOpts)(const rectangle *part, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionPartBmpRectOpts(const rectangle *part, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionPartBmpRectOpts(part,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionRotateBmp)(float angle, float anchorX, float anchorY);
drawing_options sg_DrawingOptions_OptionRotateBmp(float angle, float anchorX, float anchorY)
{
	return var_sg_DrawingOptions_OptionRotateBmp(angle,anchorX,anchorY);
}
drawing_options (*var_sg_DrawingOptions_OptionRotateBmpAngle)(float angle);
drawing_options sg_DrawingOptions_OptionRotateBmpAngle(float angle)
{
	return var_sg_DrawingOptions_OptionRotateBmpAngle(angle);
}
drawing_options (*var_sg_DrawingOptions_OptionRotateBmpAngleOpts)(float angle, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionRotateBmpAngleOpts(float angle, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionRotateBmpAngleOpts(angle,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionRotateBmpOpts)(float angle, float anchorX, float anchorY, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionRotateBmpOpts(float angle, float anchorX, float anchorY, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionRotateBmpOpts(angle,anchorX,anchorY,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionScaleBmp)(float scaleX, float scaleY);
drawing_options sg_DrawingOptions_OptionScaleBmp(float scaleX, float scaleY)
{
	return var_sg_DrawingOptions_OptionScaleBmp(scaleX,scaleY);
}
drawing_options (*var_sg_DrawingOptions_OptionScaleBmpOpts)(float scaleX, float scaleY, const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionScaleBmpOpts(float scaleX, float scaleY, const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionScaleBmpOpts(scaleX,scaleY,opts);
}
drawing_options (*var_sg_DrawingOptions_OptionToScreen)();
drawing_options sg_DrawingOptions_OptionToScreen()
{
	return var_sg_DrawingOptions_OptionToScreen();
}
drawing_options (*var_sg_DrawingOptions_OptionToScreenOpts)(const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionToScreenOpts(const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionToScreenOpts(opts);
}
drawing_options (*var_sg_DrawingOptions_OptionToWorld)();
drawing_options sg_DrawingOptions_OptionToWorld()
{
	return var_sg_DrawingOptions_OptionToWorld();
}
drawing_options (*var_sg_DrawingOptions_OptionToWorldOpts)(const drawing_options *opts);
drawing_options sg_DrawingOptions_OptionToWorldOpts(const drawing_options *opts)
{
	return var_sg_DrawingOptions_OptionToWorldOpts(opts);
}
vector (*var_sg_Geometry_AddVectors)(const vector *v1, const vector *v2);
vector sg_Geometry_AddVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_AddVectors(v1,v2);
}
void (*var_sg_Geometry_ApplyMatrix)(const matrix2d  *m, triangle  *tri);
void sg_Geometry_ApplyMatrix(const matrix2d  *m, triangle  *tri)
{
	var_sg_Geometry_ApplyMatrix(m,tri);
}
void (*var_sg_Geometry_ApplyMatrixToQuad)(const matrix2d  *m, quad *quad);
void sg_Geometry_ApplyMatrixToQuad(const matrix2d  *m, quad *quad)
{
	var_sg_Geometry_ApplyMatrixToQuad(m,quad);
}
float (*var_sg_Geometry_CalculateAngle)(float x1, float y1, float x2, float y2);
float sg_Geometry_CalculateAngle(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_CalculateAngle(x1,y1,x2,y2);
}
float (*var_sg_Geometry_CalculateAngleBetween)(const point2d *pt1, const point2d *pt2);
float sg_Geometry_CalculateAngleBetween(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CalculateAngleBetween(pt1,pt2);
}
float (*var_sg_Geometry_CalculateAngleBetweenSprites)(sprite s1, sprite s2);
float sg_Geometry_CalculateAngleBetweenSprites(sprite s1, sprite s2)
{
	return var_sg_Geometry_CalculateAngleBetweenSprites(s1,s2);
}
float (*var_sg_Geometry_CalculateAngleBetweenVectors)(const vector *v1, const vector *v2);
float sg_Geometry_CalculateAngleBetweenVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_CalculateAngleBetweenVectors(v1,v2);
}
circle (*var_sg_Geometry_CircleAt)(const point2d *pt, float radius);
circle sg_Geometry_CircleAt(const point2d *pt, float radius)
{
	return var_sg_Geometry_CircleAt(pt,radius);
}
point2d (*var_sg_Geometry_CircleCenterPoint)(const circle *c);
point2d sg_Geometry_CircleCenterPoint(const circle *c)
{
	return var_sg_Geometry_CircleCenterPoint(c);
}
circle (*var_sg_Geometry_CircleFromXY)(float x, float y, float radius);
circle sg_Geometry_CircleFromXY(float x, float y, float radius)
{
	return var_sg_Geometry_CircleFromXY(x,y,radius);
}
float (*var_sg_Geometry_CircleRadius)(const circle *c);
float sg_Geometry_CircleRadius(const circle *c)
{
	return var_sg_Geometry_CircleRadius(c);
}
float (*var_sg_Geometry_CircleX)(const circle *c);
float sg_Geometry_CircleX(const circle *c)
{
	return var_sg_Geometry_CircleX(c);
}
float (*var_sg_Geometry_CircleY)(const circle *c);
float sg_Geometry_CircleY(const circle *c)
{
	return var_sg_Geometry_CircleY(c);
}
point2d (*var_sg_Geometry_ClosestPointOnCircle)(const point2d *fromPt, const circle *c);
point2d sg_Geometry_ClosestPointOnCircle(const point2d *fromPt, const circle *c)
{
	return var_sg_Geometry_ClosestPointOnCircle(fromPt,c);
}
point2d (*var_sg_Geometry_ClosestPointOnLine)(const point2d *fromPt, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLine(const point2d *fromPt, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLine(fromPt,line);
}
point2d (*var_sg_Geometry_ClosestPointOnLineFromCircle)(const circle *c, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineFromCircle(const circle *c, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLineFromCircle(c,line);
}
point2d (*var_sg_Geometry_ClosestPointOnLineXY)(float x, float y, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineXY(float x, float y, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLineXY(x,y,line);
}
point2d (*var_sg_Geometry_ClosestPointOnRectFromCircle)(const circle *c, const rectangle *rect);
point2d sg_Geometry_ClosestPointOnRectFromCircle(const circle *c, const rectangle *rect)
{
	return var_sg_Geometry_ClosestPointOnRectFromCircle(c,rect);
}
float (*var_sg_Geometry_Cosine)(float angle);
float sg_Geometry_Cosine(float angle)
{
	return var_sg_Geometry_Cosine(angle);
}
circle (*var_sg_Geometry_CreateCircle)(const point2d *pt, float radius);
circle sg_Geometry_CreateCircle(const point2d *pt, float radius)
{
	return var_sg_Geometry_CreateCircle(pt,radius);
}
circle (*var_sg_Geometry_CreateCircleFromXY)(float x, float y, float radius);
circle sg_Geometry_CreateCircleFromXY(float x, float y, float radius)
{
	return var_sg_Geometry_CreateCircleFromXY(x,y,radius);
}
line_segment (*var_sg_Geometry_CreateLine)(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_CreateLine(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_CreateLine(x1,y1,x2,y2);
}
vector (*var_sg_Geometry_CreateLineAsVector)(const line_segment *line);
vector sg_Geometry_CreateLineAsVector(const line_segment *line)
{
	return var_sg_Geometry_CreateLineAsVector(line);
}
line_segment (*var_sg_Geometry_CreateLineFromVector)(const vector *mv);
line_segment sg_Geometry_CreateLineFromVector(const vector *mv)
{
	return var_sg_Geometry_CreateLineFromVector(mv);
}
line_segment (*var_sg_Geometry_CreateLinePointToPoint)(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_CreateLinePointToPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CreateLinePointToPoint(pt1,pt2);
}
line_segment (*var_sg_Geometry_CreateLineVectorWithStartPoint)(const point2d *pt, const vector *mv);
line_segment sg_Geometry_CreateLineVectorWithStartPoint(const point2d *pt, const vector *mv)
{
	return var_sg_Geometry_CreateLineVectorWithStartPoint(pt,mv);
}
line_segment (*var_sg_Geometry_CreateLineVectorWithStartXY)(float x, float y, const vector *mv);
line_segment sg_Geometry_CreateLineVectorWithStartXY(float x, float y, const vector *mv)
{
	return var_sg_Geometry_CreateLineVectorWithStartXY(x,y,mv);
}
rectangle (*var_sg_Geometry_CreateRectangle)(float x, float y, float w, float h);
rectangle sg_Geometry_CreateRectangle(float x, float y, float w, float h)
{
	return var_sg_Geometry_CreateRectangle(x,y,w,h);
}
rectangle (*var_sg_Geometry_CreateRectangleAtPoint)(const point2d *pt, float width, float height);
rectangle sg_Geometry_CreateRectangleAtPoint(const point2d *pt, float width, float height)
{
	return var_sg_Geometry_CreateRectangleAtPoint(pt,width,height);
}
rectangle (*var_sg_Geometry_CreateRectangleCircle)(const circle *c);
rectangle sg_Geometry_CreateRectangleCircle(const circle *c)
{
	return var_sg_Geometry_CreateRectangleCircle(c);
}
rectangle (*var_sg_Geometry_CreateRectangleForPoints)(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_CreateRectangleForPoints(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CreateRectangleForPoints(pt1,pt2);
}
rectangle (*var_sg_Geometry_CreateRectangleLine)(const line_segment *line);
rectangle sg_Geometry_CreateRectangleLine(const line_segment *line)
{
	return var_sg_Geometry_CreateRectangleLine(line);
}
rectangle (*var_sg_Geometry_CreateRectangleTriangle)(const triangle  *tri);
rectangle sg_Geometry_CreateRectangleTriangle(const triangle  *tri)
{
	return var_sg_Geometry_CreateRectangleTriangle(tri);
}
triangle  (*var_sg_Geometry_CreateTriangle)(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_CreateTriangle(float ax, float ay, float bx, float by, float cx, float cy)
{
	return var_sg_Geometry_CreateTriangle(ax,ay,bx,by,cx,cy);
}
triangle  (*var_sg_Geometry_CreateTrianglePoints)(const point2d *a, const point2d *b, const point2d *c);
triangle  sg_Geometry_CreateTrianglePoints(const point2d *a, const point2d *b, const point2d *c)
{
	return var_sg_Geometry_CreateTrianglePoints(a,b,c);
}
vector (*var_sg_Geometry_CreateVectorFromAngle)(float angle, float magnitude);
vector sg_Geometry_CreateVectorFromAngle(float angle, float magnitude)
{
	return var_sg_Geometry_CreateVectorFromAngle(angle,magnitude);
}
vector (*var_sg_Geometry_CreateVectorFromPointPtToRectangle)(const point2d *pt, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_CreateVectorFromPointPtToRectangle(pt,rect);
}
vector (*var_sg_Geometry_CreateVectorFromPointToRect)(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight);
vector sg_Geometry_CreateVectorFromPointToRect(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)
{
	return var_sg_Geometry_CreateVectorFromPointToRect(x,y,rectX,rectY,rectWidth,rectHeight);
}
vector (*var_sg_Geometry_CreateVectorFromPointToRectangle)(float x, float y, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPointToRectangle(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_CreateVectorFromPointToRectangle(x,y,rect);
}
vector (*var_sg_Geometry_CreateVectorFromPoints)(const point2d *p1, const point2d *p2);
vector sg_Geometry_CreateVectorFromPoints(const point2d *p1, const point2d *p2)
{
	return var_sg_Geometry_CreateVectorFromPoints(p1,p2);
}
vector (*var_sg_Geometry_CreateVectorToPoint)(const point2d *p1);
vector sg_Geometry_CreateVectorToPoint(const point2d *p1)
{
	return var_sg_Geometry_CreateVectorToPoint(p1);
}
point2d (*var_sg_Geometry_DistantPointOnCircle)(const point2d *pt, const circle *c);
point2d sg_Geometry_DistantPointOnCircle(const point2d *pt, const circle *c)
{
	return var_sg_Geometry_DistantPointOnCircle(pt,c);
}
bool (*var_sg_Geometry_DistantPointOnCircleHeading)(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt);
bool sg_Geometry_DistantPointOnCircleHeading(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt)
{
	return var_sg_Geometry_DistantPointOnCircleHeading(pt,c,heading,oppositePt);
}
float (*var_sg_Geometry_DotProduct)(const vector *v1, const vector *v2);
float sg_Geometry_DotProduct(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_DotProduct(v1,v2);
}
void (*var_sg_Geometry_FixRect)(float *x, float *y, float *width, float *height);
void sg_Geometry_FixRect(float *x, float *y, float *width, float *height)
{
	var_sg_Geometry_FixRect(x,y,width,height);
}
void (*var_sg_Geometry_FixRectangle)(rectangle *rect);
void sg_Geometry_FixRectangle(rectangle *rect)
{
	var_sg_Geometry_FixRectangle(rect);
}
matrix2d  (*var_sg_Geometry_IdentityMatrix)();
matrix2d  sg_Geometry_IdentityMatrix()
{
	return var_sg_Geometry_IdentityMatrix();
}
rectangle (*var_sg_Geometry_InsetRectangle)(const rectangle *rect, float insetAmount);
rectangle sg_Geometry_InsetRectangle(const rectangle *rect, float insetAmount)
{
	return var_sg_Geometry_InsetRectangle(rect,insetAmount);
}
rectangle (*var_sg_Geometry_Intersection)(const rectangle *rect1, const rectangle *rect2);
rectangle sg_Geometry_Intersection(const rectangle *rect1, const rectangle *rect2)
{
	return var_sg_Geometry_Intersection(rect1,rect2);
}
vector (*var_sg_Geometry_InvertVector)(const vector *v);
vector sg_Geometry_InvertVector(const vector *v)
{
	return var_sg_Geometry_InvertVector(v);
}
vector (*var_sg_Geometry_LimitVector)(const vector *v, float limit);
vector sg_Geometry_LimitVector(const vector *v, float limit)
{
	return var_sg_Geometry_LimitVector(v,limit);
}
vector (*var_sg_Geometry_LineAsVector)(const line_segment *line);
vector sg_Geometry_LineAsVector(const line_segment *line)
{
	return var_sg_Geometry_LineAsVector(line);
}
line_segment (*var_sg_Geometry_LineFrom)(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_LineFrom(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_LineFrom(x1,y1,x2,y2);
}
line_segment (*var_sg_Geometry_LineFromPointToPoint)(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_LineFromPointToPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_LineFromPointToPoint(pt1,pt2);
}
line_segment (*var_sg_Geometry_LineFromVector)(const vector *mv);
line_segment sg_Geometry_LineFromVector(const vector *mv)
{
	return var_sg_Geometry_LineFromVector(mv);
}
line_segment (*var_sg_Geometry_LineFromVectorWithStartPoint)(const point2d *pt, const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartPoint(const point2d *pt, const vector *mv)
{
	return var_sg_Geometry_LineFromVectorWithStartPoint(pt,mv);
}
line_segment (*var_sg_Geometry_LineFromVectorWithStartXY)(float x, float y, const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartXY(float x, float y, const vector *mv)
{
	return var_sg_Geometry_LineFromVectorWithStartXY(x,y,mv);
}
bool (*var_sg_Geometry_LineIntersectionPoint)(const line_segment *line1, const line_segment *line2, point2d *pt);
bool sg_Geometry_LineIntersectionPoint(const line_segment *line1, const line_segment *line2, point2d *pt)
{
	return var_sg_Geometry_LineIntersectionPoint(line1,line2,pt);
}
bool (*var_sg_Geometry_LineIntersectsCircle)(const line_segment *l, const circle *c);
bool sg_Geometry_LineIntersectsCircle(const line_segment *l, const circle *c)
{
	return var_sg_Geometry_LineIntersectsCircle(l,c);
}
bool (*var_sg_Geometry_LineIntersectsRect)(const line_segment *line, const rectangle *rect);
bool sg_Geometry_LineIntersectsRect(const line_segment *line, const rectangle *rect)
{
	return var_sg_Geometry_LineIntersectsRect(line,rect);
}
float (*var_sg_Geometry_LineMagnitudeSq)(float x1, float y1, float x2, float y2);
float sg_Geometry_LineMagnitudeSq(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_LineMagnitudeSq(x1,y1,x2,y2);
}
float (*var_sg_Geometry_LineMagnitudeSqFromLine)(const line_segment *line);
float sg_Geometry_LineMagnitudeSqFromLine(const line_segment *line)
{
	return var_sg_Geometry_LineMagnitudeSqFromLine(line);
}
point2d (*var_sg_Geometry_LineMidPoint)(const line_segment *line);
point2d sg_Geometry_LineMidPoint(const line_segment *line)
{
	return var_sg_Geometry_LineMidPoint(line);
}
vector (*var_sg_Geometry_LineNormal)(const line_segment *line);
vector sg_Geometry_LineNormal(const line_segment *line)
{
	return var_sg_Geometry_LineNormal(line);
}
bool (*var_sg_Geometry_LineSegmentsIntersect)(const line_segment *line1, const line_segment *line2);
bool sg_Geometry_LineSegmentsIntersect(const line_segment *line1, const line_segment *line2)
{
	return var_sg_Geometry_LineSegmentsIntersect(line1,line2);
}
void (*var_sg_Geometry_LineToString)(const line_segment *ln, char *result);
void sg_Geometry_LineToString(const line_segment *ln, char *result)
{
	var_sg_Geometry_LineToString(ln,result);
}
matrix2d  (*var_sg_Geometry_MatrixInverse)(const matrix2d  *m);
matrix2d  sg_Geometry_MatrixInverse(const matrix2d  *m)
{
	return var_sg_Geometry_MatrixInverse(m);
}
matrix2d  (*var_sg_Geometry_MatrixMultiply)(const matrix2d  *m1, const matrix2d  *m2);
matrix2d  sg_Geometry_MatrixMultiply(const matrix2d  *m1, const matrix2d  *m2)
{
	return var_sg_Geometry_MatrixMultiply(m1,m2);
}
vector (*var_sg_Geometry_MatrixMultiplyVector)(const matrix2d  *m, const vector *v);
vector sg_Geometry_MatrixMultiplyVector(const matrix2d  *m, const vector *v)
{
	return var_sg_Geometry_MatrixMultiplyVector(m,v);
}
void (*var_sg_Geometry_MatrixToString)(const matrix2d  *m, char *result);
void sg_Geometry_MatrixToString(const matrix2d  *m, char *result)
{
	var_sg_Geometry_MatrixToString(m,result);
}
point2d (*var_sg_Geometry_PointAdd)(const point2d *pt1, const point2d *pt2);
point2d sg_Geometry_PointAdd(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointAdd(pt1,pt2);
}
point2d (*var_sg_Geometry_PointAt)(float x, float y);
point2d sg_Geometry_PointAt(float x, float y)
{
	return var_sg_Geometry_PointAt(x,y);
}
point2d (*var_sg_Geometry_PointAtStartWithOffset)(const point2d *startPoint, const vector *offset);
point2d sg_Geometry_PointAtStartWithOffset(const point2d *startPoint, const vector *offset)
{
	return var_sg_Geometry_PointAtStartWithOffset(startPoint,offset);
}
bool (*var_sg_Geometry_PointInCircle)(const point2d *pt, const circle *c);
bool sg_Geometry_PointInCircle(const point2d *pt, const circle *c)
{
	return var_sg_Geometry_PointInCircle(pt,c);
}
bool (*var_sg_Geometry_PointInCirclePt)(const point2d *pt, float x, float y, float radius);
bool sg_Geometry_PointInCirclePt(const point2d *pt, float x, float y, float radius)
{
	return var_sg_Geometry_PointInCirclePt(pt,x,y,radius);
}
bool (*var_sg_Geometry_PointInRect)(const point2d *pt, const rectangle *rect);
bool sg_Geometry_PointInRect(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_PointInRect(pt,rect);
}
bool (*var_sg_Geometry_PointInRectXY)(const point2d *pt, float x, float y, float w, float h);
bool sg_Geometry_PointInRectXY(const point2d *pt, float x, float y, float w, float h)
{
	return var_sg_Geometry_PointInRectXY(pt,x,y,w,h);
}
bool (*var_sg_Geometry_PointInTriangle)(const point2d *pt, const triangle  *tri);
bool sg_Geometry_PointInTriangle(const point2d *pt, const triangle  *tri)
{
	return var_sg_Geometry_PointInTriangle(pt,tri);
}
float (*var_sg_Geometry_PointLineDistance)(const point2d *pt, const line_segment *line);
float sg_Geometry_PointLineDistance(const point2d *pt, const line_segment *line)
{
	return var_sg_Geometry_PointLineDistance(pt,line);
}
bool (*var_sg_Geometry_PointOnLine)(const point2d *pt, const line_segment *line);
bool sg_Geometry_PointOnLine(const point2d *pt, const line_segment *line)
{
	return var_sg_Geometry_PointOnLine(pt,line);
}
bool (*var_sg_Geometry_PointOnLineXYXY)(const point2d *pt, float x, float y, float endX, float endY);
bool sg_Geometry_PointOnLineXYXY(const point2d *pt, float x, float y, float endX, float endY)
{
	return var_sg_Geometry_PointOnLineXYXY(pt,x,y,endX,endY);
}
bool (*var_sg_Geometry_PointOnPoint)(const point2d *pt1, const point2d *pt2);
bool sg_Geometry_PointOnPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointOnPoint(pt1,pt2);
}
float (*var_sg_Geometry_PointPointDistance)(const point2d *pt1, const point2d *pt2);
float sg_Geometry_PointPointDistance(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointPointDistance(pt1,pt2);
}
void (*var_sg_Geometry_PointToString)(const point2d *pt, char *result);
void sg_Geometry_PointToString(const point2d *pt, char *result)
{
	var_sg_Geometry_PointToString(pt,result);
}
bool (*var_sg_Geometry_PointXYInCircle)(float ptX, float ptY, float cX, float cY, float radius);
bool sg_Geometry_PointXYInCircle(float ptX, float ptY, float cX, float cY, float radius)
{
	return var_sg_Geometry_PointXYInCircle(ptX,ptY,cX,cY,radius);
}
bool (*var_sg_Geometry_PointXYInRect)(float x, float y, const rectangle *rect);
bool sg_Geometry_PointXYInRect(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_PointXYInRect(x,y,rect);
}
bool (*var_sg_Geometry_PointXYInRectXY)(float ptX, float ptY, float x, float y, float w, float h);
bool sg_Geometry_PointXYInRectXY(float ptX, float ptY, float x, float y, float w, float h)
{
	return var_sg_Geometry_PointXYInRectXY(ptX,ptY,x,y,w,h);
}
float (*var_sg_Geometry_PointXYLineDistance)(float x, float y, const line_segment *line);
float sg_Geometry_PointXYLineDistance(float x, float y, const line_segment *line)
{
	return var_sg_Geometry_PointXYLineDistance(x,y,line);
}
quad (*var_sg_Geometry_QuadFrom)(float xTopLeft, float yTopLeft, float xTopRight, float yTopRight, float xBottomLeft, float yBottomLeft, float xBottomRight, float yBottomRight);
quad sg_Geometry_QuadFrom(float xTopLeft, float yTopLeft, float xTopRight, float yTopRight, float xBottomLeft, float yBottomLeft, float xBottomRight, float yBottomRight)
{
	return var_sg_Geometry_QuadFrom(xTopLeft,yTopLeft,xTopRight,yTopRight,xBottomLeft,yBottomLeft,xBottomRight,yBottomRight);
}
quad (*var_sg_Geometry_QuadFromRect)(const rectangle *rect);
quad sg_Geometry_QuadFromRect(const rectangle *rect)
{
	return var_sg_Geometry_QuadFromRect(rect);
}
point2d (*var_sg_Geometry_RandomScreenPoint)();
point2d sg_Geometry_RandomScreenPoint()
{
	return var_sg_Geometry_RandomScreenPoint();
}
float (*var_sg_Geometry_RayCircleIntersectDistance)(const point2d *ray_origin, const vector *ray_heading, const circle *c);
float sg_Geometry_RayCircleIntersectDistance(const point2d *ray_origin, const vector *ray_heading, const circle *c)
{
	return var_sg_Geometry_RayCircleIntersectDistance(ray_origin,ray_heading,c);
}
bool (*var_sg_Geometry_RayIntersectionPoint)(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt);
bool sg_Geometry_RayIntersectionPoint(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt)
{
	return var_sg_Geometry_RayIntersectionPoint(fromPt,heading,line,pt);
}
rectangle (*var_sg_Geometry_RectangleAfterMove)(const rectangle *rect, const vector *mv);
rectangle sg_Geometry_RectangleAfterMove(const rectangle *rect, const vector *mv)
{
	return var_sg_Geometry_RectangleAfterMove(rect,mv);
}
rectangle (*var_sg_Geometry_RectangleAtPoint)(const point2d *pt, float width, float height);
rectangle sg_Geometry_RectangleAtPoint(const point2d *pt, float width, float height)
{
	return var_sg_Geometry_RectangleAtPoint(pt,width,height);
}
float (*var_sg_Geometry_RectangleBottom)(const rectangle *rect);
float sg_Geometry_RectangleBottom(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottom(rect);
}
point2d (*var_sg_Geometry_RectangleBottomLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleBottomLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottomLeft(rect);
}
point2d (*var_sg_Geometry_RectangleBottomRight)(const rectangle *rect);
point2d sg_Geometry_RectangleBottomRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottomRight(rect);
}
point2d (*var_sg_Geometry_RectangleCenter)(const rectangle *rect);
point2d sg_Geometry_RectangleCenter(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenter(rect);
}
point2d (*var_sg_Geometry_RectangleCenterBottom)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterBottom(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterBottom(rect);
}
point2d (*var_sg_Geometry_RectangleCenterLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterLeft(rect);
}
point2d (*var_sg_Geometry_RectangleCenterRight)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterRight(rect);
}
point2d (*var_sg_Geometry_RectangleCenterTop)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterTop(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterTop(rect);
}
rectangle (*var_sg_Geometry_RectangleForPoints)(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_RectangleForPoints(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_RectangleForPoints(pt1,pt2);
}
rectangle (*var_sg_Geometry_RectangleFrom)(float x, float y, float w, float h);
rectangle sg_Geometry_RectangleFrom(float x, float y, float w, float h)
{
	return var_sg_Geometry_RectangleFrom(x,y,w,h);
}
rectangle (*var_sg_Geometry_RectangleFromCircle)(const circle *c);
rectangle sg_Geometry_RectangleFromCircle(const circle *c)
{
	return var_sg_Geometry_RectangleFromCircle(c);
}
rectangle (*var_sg_Geometry_RectangleFromLine)(const line_segment *line);
rectangle sg_Geometry_RectangleFromLine(const line_segment *line)
{
	return var_sg_Geometry_RectangleFromLine(line);
}
rectangle (*var_sg_Geometry_RectangleFromTriangle)(const triangle  *tri);
rectangle sg_Geometry_RectangleFromTriangle(const triangle  *tri)
{
	return var_sg_Geometry_RectangleFromTriangle(tri);
}
float (*var_sg_Geometry_RectangleLeft)(const rectangle *rect);
float sg_Geometry_RectangleLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleLeft(rect);
}
rectangle (*var_sg_Geometry_RectangleOffset)(const rectangle *rect, const vector *vec);
rectangle sg_Geometry_RectangleOffset(const rectangle *rect, const vector *vec)
{
	return var_sg_Geometry_RectangleOffset(rect,vec);
}
float (*var_sg_Geometry_RectangleRight)(const rectangle *rect);
float sg_Geometry_RectangleRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleRight(rect);
}
void (*var_sg_Geometry_RectangleToString)(const rectangle *rect, char *result);
void sg_Geometry_RectangleToString(const rectangle *rect, char *result)
{
	var_sg_Geometry_RectangleToString(rect,result);
}
float (*var_sg_Geometry_RectangleTop)(const rectangle *rect);
float sg_Geometry_RectangleTop(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTop(rect);
}
point2d (*var_sg_Geometry_RectangleTopLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleTopLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTopLeft(rect);
}
point2d (*var_sg_Geometry_RectangleTopRight)(const rectangle *rect);
point2d sg_Geometry_RectangleTopRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTopRight(rect);
}
bool (*var_sg_Geometry_RectanglesIntersect)(const rectangle *rect1, const rectangle *rect2);
bool sg_Geometry_RectanglesIntersect(const rectangle *rect1, const rectangle *rect2)
{
	return var_sg_Geometry_RectanglesIntersect(rect1,rect2);
}
matrix2d  (*var_sg_Geometry_RotationMatrix)(float deg);
matrix2d  sg_Geometry_RotationMatrix(float deg)
{
	return var_sg_Geometry_RotationMatrix(deg);
}
matrix2d  (*var_sg_Geometry_ScaleMatrix)(float scale);
matrix2d  sg_Geometry_ScaleMatrix(float scale)
{
	return var_sg_Geometry_ScaleMatrix(scale);
}
matrix2d  (*var_sg_Geometry_ScaleMatrixByPoint)(const point2d *scale);
matrix2d  sg_Geometry_ScaleMatrixByPoint(const point2d *scale)
{
	return var_sg_Geometry_ScaleMatrixByPoint(scale);
}
matrix2d  (*var_sg_Geometry_ScaleRotateTranslateMatrix)(const point2d *scale, float deg, const point2d *translate);
matrix2d  sg_Geometry_ScaleRotateTranslateMatrix(const point2d *scale, float deg, const point2d *translate)
{
	return var_sg_Geometry_ScaleRotateTranslateMatrix(scale,deg,translate);
}
void (*var_sg_Geometry_SetQuadPoint)(quad *q, int32_t idx, point2d value);
void sg_Geometry_SetQuadPoint(quad *q, int32_t idx, point2d value)
{
	var_sg_Geometry_SetQuadPoint(q,idx,value);
}
float (*var_sg_Geometry_Sine)(float angle);
float sg_Geometry_Sine(float angle)
{
	return var_sg_Geometry_Sine(angle);
}
vector (*var_sg_Geometry_SubtractVectors)(const vector *v1, const vector *v2);
vector sg_Geometry_SubtractVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_SubtractVectors(v1,v2);
}
float (*var_sg_Geometry_Tangent)(float angle);
float sg_Geometry_Tangent(float angle)
{
	return var_sg_Geometry_Tangent(angle);
}
bool (*var_sg_Geometry_TangentPoints)(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2);
bool sg_Geometry_TangentPoints(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2)
{
	return var_sg_Geometry_TangentPoints(fromPt,c,p1,p2);
}
matrix2d  (*var_sg_Geometry_TranslationMatrix)(float dx, float dy);
matrix2d  sg_Geometry_TranslationMatrix(float dx, float dy)
{
	return var_sg_Geometry_TranslationMatrix(dx,dy);
}
matrix2d  (*var_sg_Geometry_TranslationMatrixPt)(const point2d *pt);
matrix2d  sg_Geometry_TranslationMatrixPt(const point2d *pt)
{
	return var_sg_Geometry_TranslationMatrixPt(pt);
}
point2d (*var_sg_Geometry_TriangleBarycenter)(const triangle  *tri);
point2d sg_Geometry_TriangleBarycenter(const triangle  *tri)
{
	return var_sg_Geometry_TriangleBarycenter(tri);
}
triangle  (*var_sg_Geometry_TriangleFrom)(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_TriangleFrom(float ax, float ay, float bx, float by, float cx, float cy)
{
	return var_sg_Geometry_TriangleFrom(ax,ay,bx,by,cx,cy);
}
triangle  (*var_sg_Geometry_TriangleFromPoints)(const point2d *a, const point2d *b, const point2d *c);
triangle  sg_Geometry_TriangleFromPoints(const point2d *a, const point2d *b, const point2d *c)
{
	return var_sg_Geometry_TriangleFromPoints(a,b,c);
}
bool (*var_sg_Geometry_TriangleRectangleIntersect)(const triangle  *tri, const rectangle *rect);
bool sg_Geometry_TriangleRectangleIntersect(const triangle  *tri, const rectangle *rect)
{
	return var_sg_Geometry_TriangleRectangleIntersect(tri,rect);
}
void (*var_sg_Geometry_TriangleToString)(const triangle  *tri, char *result);
void sg_Geometry_TriangleToString(const triangle  *tri, char *result)
{
	var_sg_Geometry_TriangleToString(tri,result);
}
vector (*var_sg_Geometry_UnitVector)(const vector *v);
vector sg_Geometry_UnitVector(const vector *v)
{
	return var_sg_Geometry_UnitVector(v);
}
float (*var_sg_Geometry_VectorAngle)(const vector *v);
float sg_Geometry_VectorAngle(const vector *v)
{
	return var_sg_Geometry_VectorAngle(v);
}
vector (*var_sg_Geometry_VectorFromAngle)(float angle, float magnitude);
vector sg_Geometry_VectorFromAngle(float angle, float magnitude)
{
	return var_sg_Geometry_VectorFromAngle(angle,magnitude);
}
vector (*var_sg_Geometry_VectorFromPointPtToRectangle)(const point2d *pt, const rectangle *rect);
vector sg_Geometry_VectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_VectorFromPointPtToRectangle(pt,rect);
}
vector (*var_sg_Geometry_VectorFromPointToRect)(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight);
vector sg_Geometry_VectorFromPointToRect(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)
{
	return var_sg_Geometry_VectorFromPointToRect(x,y,rectX,rectY,rectWidth,rectHeight);
}
vector (*var_sg_Geometry_VectorFromPointToRectangle)(float x, float y, const rectangle *rect);
vector sg_Geometry_VectorFromPointToRectangle(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_VectorFromPointToRectangle(x,y,rect);
}
vector (*var_sg_Geometry_VectorFromPoints)(const point2d *p1, const point2d *p2);
vector sg_Geometry_VectorFromPoints(const point2d *p1, const point2d *p2)
{
	return var_sg_Geometry_VectorFromPoints(p1,p2);
}
bool (*var_sg_Geometry_VectorInRect)(const vector *v, const rectangle *rect);
bool sg_Geometry_VectorInRect(const vector *v, const rectangle *rect)
{
	return var_sg_Geometry_VectorInRect(v,rect);
}
bool (*var_sg_Geometry_VectorInRectXY)(const vector *v, float x, float y, float w, float h);
bool sg_Geometry_VectorInRectXY(const vector *v, float x, float y, float w, float h)
{
	return var_sg_Geometry_VectorInRectXY(v,x,y,w,h);
}
bool (*var_sg_Geometry_VectorIsZero)(const vector *v);
bool sg_Geometry_VectorIsZero(const vector *v)
{
	return var_sg_Geometry_VectorIsZero(v);
}
float (*var_sg_Geometry_VectorMagnitude)(const vector *v);
float sg_Geometry_VectorMagnitude(const vector *v)
{
	return var_sg_Geometry_VectorMagnitude(v);
}
float (*var_sg_Geometry_VectorMagnitudeSq)(const vector *v);
float sg_Geometry_VectorMagnitudeSq(const vector *v)
{
	return var_sg_Geometry_VectorMagnitudeSq(v);
}
vector (*var_sg_Geometry_VectorMultiply)(const vector *v, float s);
vector sg_Geometry_VectorMultiply(const vector *v, float s)
{
	return var_sg_Geometry_VectorMultiply(v,s);
}
vector (*var_sg_Geometry_VectorNormal)(const vector *v);
vector sg_Geometry_VectorNormal(const vector *v)
{
	return var_sg_Geometry_VectorNormal(v);
}
vector (*var_sg_Geometry_VectorOutOfCircleFromCircle)(const circle *src, const circle *bounds, const vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromCircle(const circle *src, const circle *bounds, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfCircleFromCircle(src,bounds,velocity);
}
vector (*var_sg_Geometry_VectorOutOfCircleFromPoint)(const point2d *pt, const circle *c, const vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromPoint(const point2d *pt, const circle *c, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfCircleFromPoint(pt,c,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromCircle)(const circle *c, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromCircle(const circle *c, const rectangle *rect, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromCircle(c,rect,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromPoint)(const point2d *pt, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromPoint(const point2d *pt, const rectangle *rect, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromPoint(pt,rect,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromRect)(const rectangle *src, const rectangle *bounds, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromRect(const rectangle *src, const rectangle *bounds, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromRect(src,bounds,velocity);
}
vector (*var_sg_Geometry_VectorTo)(float x, float y, bool invertY);
vector sg_Geometry_VectorTo(float x, float y, bool invertY)
{
	return var_sg_Geometry_VectorTo(x,y,invertY != 0);
}
vector (*var_sg_Geometry_VectorToPoint)(const point2d *p1);
vector sg_Geometry_VectorToPoint(const point2d *p1)
{
	return var_sg_Geometry_VectorToPoint(p1);
}
bool (*var_sg_Geometry_VectorsEqual)(const vector *v1, const vector *v2);
bool sg_Geometry_VectorsEqual(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_VectorsEqual(v1,v2);
}
bool (*var_sg_Geometry_VectorsNotEqual)(const vector *v1, const vector *v2);
bool sg_Geometry_VectorsNotEqual(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_VectorsNotEqual(v1,v2);
}
void (*var_sg_Geometry_WidestPoints)(const circle *c, const vector *along, point2d *pt1, point2d *pt2);
void sg_Geometry_WidestPoints(const circle *c, const vector *along, point2d *pt1, point2d *pt2)
{
	var_sg_Geometry_WidestPoints(c,along,pt1,pt2);
}
resolution (*var_sg_Graphics_AvailableResolution)(int32_t idx);
resolution sg_Graphics_AvailableResolution(int32_t idx)
{
	return var_sg_Graphics_AvailableResolution(idx);
}
unsigned char (*var_sg_Graphics_BlueOf)(color c);
unsigned char sg_Graphics_BlueOf(color c)
{
	return var_sg_Graphics_BlueOf(c);
}
float (*var_sg_Graphics_BrightnessOf)(color c);
float sg_Graphics_BrightnessOf(color c)
{
	return var_sg_Graphics_BrightnessOf(c);
}
void (*var_sg_Graphics_ClearScreen)();
void sg_Graphics_ClearScreen()
{
	var_sg_Graphics_ClearScreen();
}
void (*var_sg_Graphics_ClearScreenTo)(color toColor);
void sg_Graphics_ClearScreenTo(color toColor)
{
	var_sg_Graphics_ClearScreenTo(toColor);
}
color (*var_sg_Graphics_ColorAliceBlue)();
color sg_Graphics_ColorAliceBlue()
{
	return var_sg_Graphics_ColorAliceBlue();
}
color (*var_sg_Graphics_ColorAntiqueWhite)();
color sg_Graphics_ColorAntiqueWhite()
{
	return var_sg_Graphics_ColorAntiqueWhite();
}
color (*var_sg_Graphics_ColorAqua)();
color sg_Graphics_ColorAqua()
{
	return var_sg_Graphics_ColorAqua();
}
color (*var_sg_Graphics_ColorAquamarine)();
color sg_Graphics_ColorAquamarine()
{
	return var_sg_Graphics_ColorAquamarine();
}
color (*var_sg_Graphics_ColorAzure)();
color sg_Graphics_ColorAzure()
{
	return var_sg_Graphics_ColorAzure();
}
color (*var_sg_Graphics_ColorBeige)();
color sg_Graphics_ColorBeige()
{
	return var_sg_Graphics_ColorBeige();
}
color (*var_sg_Graphics_ColorBisque)();
color sg_Graphics_ColorBisque()
{
	return var_sg_Graphics_ColorBisque();
}
color (*var_sg_Graphics_ColorBlack)();
color sg_Graphics_ColorBlack()
{
	return var_sg_Graphics_ColorBlack();
}
color (*var_sg_Graphics_ColorBlanchedAlmond)();
color sg_Graphics_ColorBlanchedAlmond()
{
	return var_sg_Graphics_ColorBlanchedAlmond();
}
color (*var_sg_Graphics_ColorBlue)();
color sg_Graphics_ColorBlue()
{
	return var_sg_Graphics_ColorBlue();
}
color (*var_sg_Graphics_ColorBlueViolet)();
color sg_Graphics_ColorBlueViolet()
{
	return var_sg_Graphics_ColorBlueViolet();
}
color (*var_sg_Graphics_ColorBrightGreen)();
color sg_Graphics_ColorBrightGreen()
{
	return var_sg_Graphics_ColorBrightGreen();
}
color (*var_sg_Graphics_ColorBrown)();
color sg_Graphics_ColorBrown()
{
	return var_sg_Graphics_ColorBrown();
}
color (*var_sg_Graphics_ColorBurlyWood)();
color sg_Graphics_ColorBurlyWood()
{
	return var_sg_Graphics_ColorBurlyWood();
}
color (*var_sg_Graphics_ColorCadetBlue)();
color sg_Graphics_ColorCadetBlue()
{
	return var_sg_Graphics_ColorCadetBlue();
}
color (*var_sg_Graphics_ColorChartreuse)();
color sg_Graphics_ColorChartreuse()
{
	return var_sg_Graphics_ColorChartreuse();
}
color (*var_sg_Graphics_ColorChocolate)();
color sg_Graphics_ColorChocolate()
{
	return var_sg_Graphics_ColorChocolate();
}
void (*var_sg_Graphics_ColorComponents)(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void sg_Graphics_ColorComponents(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)
{
	var_sg_Graphics_ColorComponents(c,r,g,b,a);
}
color (*var_sg_Graphics_ColorCoral)();
color sg_Graphics_ColorCoral()
{
	return var_sg_Graphics_ColorCoral();
}
color (*var_sg_Graphics_ColorCornflowerBlue)();
color sg_Graphics_ColorCornflowerBlue()
{
	return var_sg_Graphics_ColorCornflowerBlue();
}
color (*var_sg_Graphics_ColorCornsilk)();
color sg_Graphics_ColorCornsilk()
{
	return var_sg_Graphics_ColorCornsilk();
}
color (*var_sg_Graphics_ColorCrimson)();
color sg_Graphics_ColorCrimson()
{
	return var_sg_Graphics_ColorCrimson();
}
color (*var_sg_Graphics_ColorCyan)();
color sg_Graphics_ColorCyan()
{
	return var_sg_Graphics_ColorCyan();
}
color (*var_sg_Graphics_ColorDarkBlue)();
color sg_Graphics_ColorDarkBlue()
{
	return var_sg_Graphics_ColorDarkBlue();
}
color (*var_sg_Graphics_ColorDarkCyan)();
color sg_Graphics_ColorDarkCyan()
{
	return var_sg_Graphics_ColorDarkCyan();
}
color (*var_sg_Graphics_ColorDarkGoldenrod)();
color sg_Graphics_ColorDarkGoldenrod()
{
	return var_sg_Graphics_ColorDarkGoldenrod();
}
color (*var_sg_Graphics_ColorDarkGray)();
color sg_Graphics_ColorDarkGray()
{
	return var_sg_Graphics_ColorDarkGray();
}
color (*var_sg_Graphics_ColorDarkGreen)();
color sg_Graphics_ColorDarkGreen()
{
	return var_sg_Graphics_ColorDarkGreen();
}
color (*var_sg_Graphics_ColorDarkKhaki)();
color sg_Graphics_ColorDarkKhaki()
{
	return var_sg_Graphics_ColorDarkKhaki();
}
color (*var_sg_Graphics_ColorDarkMagenta)();
color sg_Graphics_ColorDarkMagenta()
{
	return var_sg_Graphics_ColorDarkMagenta();
}
color (*var_sg_Graphics_ColorDarkOliveGreen)();
color sg_Graphics_ColorDarkOliveGreen()
{
	return var_sg_Graphics_ColorDarkOliveGreen();
}
color (*var_sg_Graphics_ColorDarkOrange)();
color sg_Graphics_ColorDarkOrange()
{
	return var_sg_Graphics_ColorDarkOrange();
}
color (*var_sg_Graphics_ColorDarkOrchid)();
color sg_Graphics_ColorDarkOrchid()
{
	return var_sg_Graphics_ColorDarkOrchid();
}
color (*var_sg_Graphics_ColorDarkRed)();
color sg_Graphics_ColorDarkRed()
{
	return var_sg_Graphics_ColorDarkRed();
}
color (*var_sg_Graphics_ColorDarkSalmon)();
color sg_Graphics_ColorDarkSalmon()
{
	return var_sg_Graphics_ColorDarkSalmon();
}
color (*var_sg_Graphics_ColorDarkSeaGreen)();
color sg_Graphics_ColorDarkSeaGreen()
{
	return var_sg_Graphics_ColorDarkSeaGreen();
}
color (*var_sg_Graphics_ColorDarkSlateBlue)();
color sg_Graphics_ColorDarkSlateBlue()
{
	return var_sg_Graphics_ColorDarkSlateBlue();
}
color (*var_sg_Graphics_ColorDarkSlateGray)();
color sg_Graphics_ColorDarkSlateGray()
{
	return var_sg_Graphics_ColorDarkSlateGray();
}
color (*var_sg_Graphics_ColorDarkTurquoise)();
color sg_Graphics_ColorDarkTurquoise()
{
	return var_sg_Graphics_ColorDarkTurquoise();
}
color (*var_sg_Graphics_ColorDarkViolet)();
color sg_Graphics_ColorDarkViolet()
{
	return var_sg_Graphics_ColorDarkViolet();
}
color (*var_sg_Graphics_ColorDeepPink)();
color sg_Graphics_ColorDeepPink()
{
	return var_sg_Graphics_ColorDeepPink();
}
color (*var_sg_Graphics_ColorDeepSkyBlue)();
color sg_Graphics_ColorDeepSkyBlue()
{
	return var_sg_Graphics_ColorDeepSkyBlue();
}
color (*var_sg_Graphics_ColorDimGray)();
color sg_Graphics_ColorDimGray()
{
	return var_sg_Graphics_ColorDimGray();
}
color (*var_sg_Graphics_ColorDodgerBlue)();
color sg_Graphics_ColorDodgerBlue()
{
	return var_sg_Graphics_ColorDodgerBlue();
}
color (*var_sg_Graphics_ColorFirebrick)();
color sg_Graphics_ColorFirebrick()
{
	return var_sg_Graphics_ColorFirebrick();
}
color (*var_sg_Graphics_ColorFloralWhite)();
color sg_Graphics_ColorFloralWhite()
{
	return var_sg_Graphics_ColorFloralWhite();
}
color (*var_sg_Graphics_ColorForestGreen)();
color sg_Graphics_ColorForestGreen()
{
	return var_sg_Graphics_ColorForestGreen();
}
color (*var_sg_Graphics_ColorFuchsia)();
color sg_Graphics_ColorFuchsia()
{
	return var_sg_Graphics_ColorFuchsia();
}
color (*var_sg_Graphics_ColorGainsboro)();
color sg_Graphics_ColorGainsboro()
{
	return var_sg_Graphics_ColorGainsboro();
}
color (*var_sg_Graphics_ColorGhostWhite)();
color sg_Graphics_ColorGhostWhite()
{
	return var_sg_Graphics_ColorGhostWhite();
}
color (*var_sg_Graphics_ColorGold)();
color sg_Graphics_ColorGold()
{
	return var_sg_Graphics_ColorGold();
}
color (*var_sg_Graphics_ColorGoldenrod)();
color sg_Graphics_ColorGoldenrod()
{
	return var_sg_Graphics_ColorGoldenrod();
}
color (*var_sg_Graphics_ColorGray)();
color sg_Graphics_ColorGray()
{
	return var_sg_Graphics_ColorGray();
}
color (*var_sg_Graphics_ColorGreen)();
color sg_Graphics_ColorGreen()
{
	return var_sg_Graphics_ColorGreen();
}
color (*var_sg_Graphics_ColorGreenYellow)();
color sg_Graphics_ColorGreenYellow()
{
	return var_sg_Graphics_ColorGreenYellow();
}
color (*var_sg_Graphics_ColorGrey)();
color sg_Graphics_ColorGrey()
{
	return var_sg_Graphics_ColorGrey();
}
color (*var_sg_Graphics_ColorHoneydew)();
color sg_Graphics_ColorHoneydew()
{
	return var_sg_Graphics_ColorHoneydew();
}
color (*var_sg_Graphics_ColorHotPink)();
color sg_Graphics_ColorHotPink()
{
	return var_sg_Graphics_ColorHotPink();
}
color (*var_sg_Graphics_ColorIndianRed)();
color sg_Graphics_ColorIndianRed()
{
	return var_sg_Graphics_ColorIndianRed();
}
color (*var_sg_Graphics_ColorIndigo)();
color sg_Graphics_ColorIndigo()
{
	return var_sg_Graphics_ColorIndigo();
}
color (*var_sg_Graphics_ColorIvory)();
color sg_Graphics_ColorIvory()
{
	return var_sg_Graphics_ColorIvory();
}
color (*var_sg_Graphics_ColorKhaki)();
color sg_Graphics_ColorKhaki()
{
	return var_sg_Graphics_ColorKhaki();
}
color (*var_sg_Graphics_ColorLavender)();
color sg_Graphics_ColorLavender()
{
	return var_sg_Graphics_ColorLavender();
}
color (*var_sg_Graphics_ColorLavenderBlush)();
color sg_Graphics_ColorLavenderBlush()
{
	return var_sg_Graphics_ColorLavenderBlush();
}
color (*var_sg_Graphics_ColorLawnGreen)();
color sg_Graphics_ColorLawnGreen()
{
	return var_sg_Graphics_ColorLawnGreen();
}
color (*var_sg_Graphics_ColorLemonChiffon)();
color sg_Graphics_ColorLemonChiffon()
{
	return var_sg_Graphics_ColorLemonChiffon();
}
color (*var_sg_Graphics_ColorLightBlue)();
color sg_Graphics_ColorLightBlue()
{
	return var_sg_Graphics_ColorLightBlue();
}
color (*var_sg_Graphics_ColorLightCoral)();
color sg_Graphics_ColorLightCoral()
{
	return var_sg_Graphics_ColorLightCoral();
}
color (*var_sg_Graphics_ColorLightCyan)();
color sg_Graphics_ColorLightCyan()
{
	return var_sg_Graphics_ColorLightCyan();
}
color (*var_sg_Graphics_ColorLightGoldenrodYellow)();
color sg_Graphics_ColorLightGoldenrodYellow()
{
	return var_sg_Graphics_ColorLightGoldenrodYellow();
}
color (*var_sg_Graphics_ColorLightGray)();
color sg_Graphics_ColorLightGray()
{
	return var_sg_Graphics_ColorLightGray();
}
color (*var_sg_Graphics_ColorLightGreen)();
color sg_Graphics_ColorLightGreen()
{
	return var_sg_Graphics_ColorLightGreen();
}
color (*var_sg_Graphics_ColorLightGrey)();
color sg_Graphics_ColorLightGrey()
{
	return var_sg_Graphics_ColorLightGrey();
}
color (*var_sg_Graphics_ColorLightPink)();
color sg_Graphics_ColorLightPink()
{
	return var_sg_Graphics_ColorLightPink();
}
color (*var_sg_Graphics_ColorLightSalmon)();
color sg_Graphics_ColorLightSalmon()
{
	return var_sg_Graphics_ColorLightSalmon();
}
color (*var_sg_Graphics_ColorLightSeaGreen)();
color sg_Graphics_ColorLightSeaGreen()
{
	return var_sg_Graphics_ColorLightSeaGreen();
}
color (*var_sg_Graphics_ColorLightSkyBlue)();
color sg_Graphics_ColorLightSkyBlue()
{
	return var_sg_Graphics_ColorLightSkyBlue();
}
color (*var_sg_Graphics_ColorLightSlateGray)();
color sg_Graphics_ColorLightSlateGray()
{
	return var_sg_Graphics_ColorLightSlateGray();
}
color (*var_sg_Graphics_ColorLightSteelBlue)();
color sg_Graphics_ColorLightSteelBlue()
{
	return var_sg_Graphics_ColorLightSteelBlue();
}
color (*var_sg_Graphics_ColorLightYellow)();
color sg_Graphics_ColorLightYellow()
{
	return var_sg_Graphics_ColorLightYellow();
}
color (*var_sg_Graphics_ColorLime)();
color sg_Graphics_ColorLime()
{
	return var_sg_Graphics_ColorLime();
}
color (*var_sg_Graphics_ColorLimeGreen)();
color sg_Graphics_ColorLimeGreen()
{
	return var_sg_Graphics_ColorLimeGreen();
}
color (*var_sg_Graphics_ColorLinen)();
color sg_Graphics_ColorLinen()
{
	return var_sg_Graphics_ColorLinen();
}
color (*var_sg_Graphics_ColorMagenta)();
color sg_Graphics_ColorMagenta()
{
	return var_sg_Graphics_ColorMagenta();
}
color (*var_sg_Graphics_ColorMaroon)();
color sg_Graphics_ColorMaroon()
{
	return var_sg_Graphics_ColorMaroon();
}
color (*var_sg_Graphics_ColorMediumAquamarine)();
color sg_Graphics_ColorMediumAquamarine()
{
	return var_sg_Graphics_ColorMediumAquamarine();
}
color (*var_sg_Graphics_ColorMediumBlue)();
color sg_Graphics_ColorMediumBlue()
{
	return var_sg_Graphics_ColorMediumBlue();
}
color (*var_sg_Graphics_ColorMediumOrchid)();
color sg_Graphics_ColorMediumOrchid()
{
	return var_sg_Graphics_ColorMediumOrchid();
}
color (*var_sg_Graphics_ColorMediumPurple)();
color sg_Graphics_ColorMediumPurple()
{
	return var_sg_Graphics_ColorMediumPurple();
}
color (*var_sg_Graphics_ColorMediumSeaGreen)();
color sg_Graphics_ColorMediumSeaGreen()
{
	return var_sg_Graphics_ColorMediumSeaGreen();
}
color (*var_sg_Graphics_ColorMediumSlateBlue)();
color sg_Graphics_ColorMediumSlateBlue()
{
	return var_sg_Graphics_ColorMediumSlateBlue();
}
color (*var_sg_Graphics_ColorMediumSpringGreen)();
color sg_Graphics_ColorMediumSpringGreen()
{
	return var_sg_Graphics_ColorMediumSpringGreen();
}
color (*var_sg_Graphics_ColorMediumTurquoise)();
color sg_Graphics_ColorMediumTurquoise()
{
	return var_sg_Graphics_ColorMediumTurquoise();
}
color (*var_sg_Graphics_ColorMediumVioletRed)();
color sg_Graphics_ColorMediumVioletRed()
{
	return var_sg_Graphics_ColorMediumVioletRed();
}
color (*var_sg_Graphics_ColorMidnightBlue)();
color sg_Graphics_ColorMidnightBlue()
{
	return var_sg_Graphics_ColorMidnightBlue();
}
color (*var_sg_Graphics_ColorMintCream)();
color sg_Graphics_ColorMintCream()
{
	return var_sg_Graphics_ColorMintCream();
}
color (*var_sg_Graphics_ColorMistyRose)();
color sg_Graphics_ColorMistyRose()
{
	return var_sg_Graphics_ColorMistyRose();
}
color (*var_sg_Graphics_ColorMoccasin)();
color sg_Graphics_ColorMoccasin()
{
	return var_sg_Graphics_ColorMoccasin();
}
color (*var_sg_Graphics_ColorNavajoWhite)();
color sg_Graphics_ColorNavajoWhite()
{
	return var_sg_Graphics_ColorNavajoWhite();
}
color (*var_sg_Graphics_ColorNavy)();
color sg_Graphics_ColorNavy()
{
	return var_sg_Graphics_ColorNavy();
}
color (*var_sg_Graphics_ColorOldLace)();
color sg_Graphics_ColorOldLace()
{
	return var_sg_Graphics_ColorOldLace();
}
color (*var_sg_Graphics_ColorOlive)();
color sg_Graphics_ColorOlive()
{
	return var_sg_Graphics_ColorOlive();
}
color (*var_sg_Graphics_ColorOliveDrab)();
color sg_Graphics_ColorOliveDrab()
{
	return var_sg_Graphics_ColorOliveDrab();
}
color (*var_sg_Graphics_ColorOrange)();
color sg_Graphics_ColorOrange()
{
	return var_sg_Graphics_ColorOrange();
}
color (*var_sg_Graphics_ColorOrangeRed)();
color sg_Graphics_ColorOrangeRed()
{
	return var_sg_Graphics_ColorOrangeRed();
}
color (*var_sg_Graphics_ColorOrchid)();
color sg_Graphics_ColorOrchid()
{
	return var_sg_Graphics_ColorOrchid();
}
color (*var_sg_Graphics_ColorPaleGoldenrod)();
color sg_Graphics_ColorPaleGoldenrod()
{
	return var_sg_Graphics_ColorPaleGoldenrod();
}
color (*var_sg_Graphics_ColorPaleGreen)();
color sg_Graphics_ColorPaleGreen()
{
	return var_sg_Graphics_ColorPaleGreen();
}
color (*var_sg_Graphics_ColorPaleTurquoise)();
color sg_Graphics_ColorPaleTurquoise()
{
	return var_sg_Graphics_ColorPaleTurquoise();
}
color (*var_sg_Graphics_ColorPaleVioletRed)();
color sg_Graphics_ColorPaleVioletRed()
{
	return var_sg_Graphics_ColorPaleVioletRed();
}
color (*var_sg_Graphics_ColorPapayaWhip)();
color sg_Graphics_ColorPapayaWhip()
{
	return var_sg_Graphics_ColorPapayaWhip();
}
color (*var_sg_Graphics_ColorPeachPuff)();
color sg_Graphics_ColorPeachPuff()
{
	return var_sg_Graphics_ColorPeachPuff();
}
color (*var_sg_Graphics_ColorPeru)();
color sg_Graphics_ColorPeru()
{
	return var_sg_Graphics_ColorPeru();
}
color (*var_sg_Graphics_ColorPink)();
color sg_Graphics_ColorPink()
{
	return var_sg_Graphics_ColorPink();
}
color (*var_sg_Graphics_ColorPlum)();
color sg_Graphics_ColorPlum()
{
	return var_sg_Graphics_ColorPlum();
}
color (*var_sg_Graphics_ColorPowderBlue)();
color sg_Graphics_ColorPowderBlue()
{
	return var_sg_Graphics_ColorPowderBlue();
}
color (*var_sg_Graphics_ColorPurple)();
color sg_Graphics_ColorPurple()
{
	return var_sg_Graphics_ColorPurple();
}
color (*var_sg_Graphics_ColorRed)();
color sg_Graphics_ColorRed()
{
	return var_sg_Graphics_ColorRed();
}
color (*var_sg_Graphics_ColorRosyBrown)();
color sg_Graphics_ColorRosyBrown()
{
	return var_sg_Graphics_ColorRosyBrown();
}
color (*var_sg_Graphics_ColorRoyalBlue)();
color sg_Graphics_ColorRoyalBlue()
{
	return var_sg_Graphics_ColorRoyalBlue();
}
color (*var_sg_Graphics_ColorSaddleBrown)();
color sg_Graphics_ColorSaddleBrown()
{
	return var_sg_Graphics_ColorSaddleBrown();
}
color (*var_sg_Graphics_ColorSalmon)();
color sg_Graphics_ColorSalmon()
{
	return var_sg_Graphics_ColorSalmon();
}
color (*var_sg_Graphics_ColorSandyBrown)();
color sg_Graphics_ColorSandyBrown()
{
	return var_sg_Graphics_ColorSandyBrown();
}
color (*var_sg_Graphics_ColorSeaGreen)();
color sg_Graphics_ColorSeaGreen()
{
	return var_sg_Graphics_ColorSeaGreen();
}
color (*var_sg_Graphics_ColorSeaShell)();
color sg_Graphics_ColorSeaShell()
{
	return var_sg_Graphics_ColorSeaShell();
}
color (*var_sg_Graphics_ColorSienna)();
color sg_Graphics_ColorSienna()
{
	return var_sg_Graphics_ColorSienna();
}
color (*var_sg_Graphics_ColorSilver)();
color sg_Graphics_ColorSilver()
{
	return var_sg_Graphics_ColorSilver();
}
color (*var_sg_Graphics_ColorSkyBlue)();
color sg_Graphics_ColorSkyBlue()
{
	return var_sg_Graphics_ColorSkyBlue();
}
color (*var_sg_Graphics_ColorSlateBlue)();
color sg_Graphics_ColorSlateBlue()
{
	return var_sg_Graphics_ColorSlateBlue();
}
color (*var_sg_Graphics_ColorSlateGray)();
color sg_Graphics_ColorSlateGray()
{
	return var_sg_Graphics_ColorSlateGray();
}
color (*var_sg_Graphics_ColorSnow)();
color sg_Graphics_ColorSnow()
{
	return var_sg_Graphics_ColorSnow();
}
color (*var_sg_Graphics_ColorSpringGreen)();
color sg_Graphics_ColorSpringGreen()
{
	return var_sg_Graphics_ColorSpringGreen();
}
color (*var_sg_Graphics_ColorSteelBlue)();
color sg_Graphics_ColorSteelBlue()
{
	return var_sg_Graphics_ColorSteelBlue();
}
color (*var_sg_Graphics_ColorSwinburneRed)();
color sg_Graphics_ColorSwinburneRed()
{
	return var_sg_Graphics_ColorSwinburneRed();
}
color (*var_sg_Graphics_ColorTan)();
color sg_Graphics_ColorTan()
{
	return var_sg_Graphics_ColorTan();
}
color (*var_sg_Graphics_ColorTeal)();
color sg_Graphics_ColorTeal()
{
	return var_sg_Graphics_ColorTeal();
}
color (*var_sg_Graphics_ColorThistle)();
color sg_Graphics_ColorThistle()
{
	return var_sg_Graphics_ColorThistle();
}
void (*var_sg_Graphics_ColorToString)(color c, char *result);
void sg_Graphics_ColorToString(color c, char *result)
{
	var_sg_Graphics_ColorToString(c,result);
}
color (*var_sg_Graphics_ColorTomato)();
color sg_Graphics_ColorTomato()
{
	return var_sg_Graphics_ColorTomato();
}
color (*var_sg_Graphics_ColorTransparent)();
color sg_Graphics_ColorTransparent()
{
	return var_sg_Graphics_ColorTransparent();
}
color (*var_sg_Graphics_ColorTurquoise)();
color sg_Graphics_ColorTurquoise()
{
	return var_sg_Graphics_ColorTurquoise();
}
color (*var_sg_Graphics_ColorViolet)();
color sg_Graphics_ColorViolet()
{
	return var_sg_Graphics_ColorViolet();
}
color (*var_sg_Graphics_ColorWheat)();
color sg_Graphics_ColorWheat()
{
	return var_sg_Graphics_ColorWheat();
}
color (*var_sg_Graphics_ColorWhite)();
color sg_Graphics_ColorWhite()
{
	return var_sg_Graphics_ColorWhite();
}
color (*var_sg_Graphics_ColorWhiteSmoke)();
color sg_Graphics_ColorWhiteSmoke()
{
	return var_sg_Graphics_ColorWhiteSmoke();
}
color (*var_sg_Graphics_ColorYellow)();
color sg_Graphics_ColorYellow()
{
	return var_sg_Graphics_ColorYellow();
}
color (*var_sg_Graphics_ColorYellowGreen)();
color sg_Graphics_ColorYellowGreen()
{
	return var_sg_Graphics_ColorYellowGreen();
}
rectangle (*var_sg_Graphics_CurrentClipForBitmap)(bitmap bmp);
rectangle sg_Graphics_CurrentClipForBitmap(bitmap bmp)
{
	return var_sg_Graphics_CurrentClipForBitmap(bmp);
}
rectangle (*var_sg_Graphics_CurrentClipForWindow)(window wnd);
rectangle sg_Graphics_CurrentClipForWindow(window wnd)
{
	return var_sg_Graphics_CurrentClipForWindow(wnd);
}
rectangle (*var_sg_Graphics_CurrentWindowClip)();
rectangle sg_Graphics_CurrentWindowClip()
{
	return var_sg_Graphics_CurrentWindowClip();
}
void (*var_sg_Graphics_DrawCircle)(color clr, float x, float y, float radius);
void sg_Graphics_DrawCircle(color clr, float x, float y, float radius)
{
	var_sg_Graphics_DrawCircle(clr,x,y,radius);
}
void (*var_sg_Graphics_DrawCircleOpts)(color clr, float x, float y, float radius, const drawing_options *opts);
void sg_Graphics_DrawCircleOpts(color clr, float x, float y, float radius, const drawing_options *opts)
{
	var_sg_Graphics_DrawCircleOpts(clr,x,y,radius,opts);
}
void (*var_sg_Graphics_DrawCircleStruct)(color clr, const circle *c);
void sg_Graphics_DrawCircleStruct(color clr, const circle *c)
{
	var_sg_Graphics_DrawCircleStruct(clr,c);
}
void (*var_sg_Graphics_DrawCircleStructOpts)(color clr, const circle *c, const drawing_options *opts);
void sg_Graphics_DrawCircleStructOpts(color clr, const circle *c, const drawing_options *opts)
{
	var_sg_Graphics_DrawCircleStructOpts(clr,c,opts);
}
void (*var_sg_Graphics_DrawEllipse)(color clr, float xPos, float yPos, float width, float height);
void sg_Graphics_DrawEllipse(color clr, float xPos, float yPos, float width, float height)
{
	var_sg_Graphics_DrawEllipse(clr,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawEllipseOpts)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts);
void sg_Graphics_DrawEllipseOpts(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)
{
	var_sg_Graphics_DrawEllipseOpts(clr,xPos,yPos,width,height,opts);
}
void (*var_sg_Graphics_DrawEllipseStruct)(color clr, const rectangle *rec);
void sg_Graphics_DrawEllipseStruct(color clr, const rectangle *rec)
{
	var_sg_Graphics_DrawEllipseStruct(clr,rec);
}
void (*var_sg_Graphics_DrawEllipseStructOpts)(color clr, const rectangle *rec, const drawing_options *opts);
void sg_Graphics_DrawEllipseStructOpts(color clr, const rectangle *rec, const drawing_options *opts)
{
	var_sg_Graphics_DrawEllipseStructOpts(clr,rec,opts);
}
void (*var_sg_Graphics_DrawLine)(color clr, float x1, float y1, float x2, float y2);
void sg_Graphics_DrawLine(color clr, float x1, float y1, float x2, float y2)
{
	var_sg_Graphics_DrawLine(clr,x1,y1,x2,y2);
}
void (*var_sg_Graphics_DrawLineOpts)(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd, const drawing_options *opts);
void sg_Graphics_DrawLineOpts(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd, const drawing_options *opts)
{
	var_sg_Graphics_DrawLineOpts(clr,xPosStart,yPosStart,xPosEnd,yPosEnd,opts);
}
void (*var_sg_Graphics_DrawLinePt2Pt)(color clr, const point2d *fromPt, const point2d *toPt);
void sg_Graphics_DrawLinePt2Pt(color clr, const point2d *fromPt, const point2d *toPt)
{
	var_sg_Graphics_DrawLinePt2Pt(clr,fromPt,toPt);
}
void (*var_sg_Graphics_DrawLinePt2PtOpts)(color clr, const point2d *fromPt, const point2d *toPt, const drawing_options *opts);
void sg_Graphics_DrawLinePt2PtOpts(color clr, const point2d *fromPt, const point2d *toPt, const drawing_options *opts)
{
	var_sg_Graphics_DrawLinePt2PtOpts(clr,fromPt,toPt,opts);
}
void (*var_sg_Graphics_DrawLineStruct)(color clr, const line_segment *l);
void sg_Graphics_DrawLineStruct(color clr, const line_segment *l)
{
	var_sg_Graphics_DrawLineStruct(clr,l);
}
void (*var_sg_Graphics_DrawLineStructOpts)(color clr, const line_segment *l, const drawing_options *opts);
void sg_Graphics_DrawLineStructOpts(color clr, const line_segment *l, const drawing_options *opts)
{
	var_sg_Graphics_DrawLineStructOpts(clr,l,opts);
}
void (*var_sg_Graphics_DrawPixel)(color clr, float x, float y);
void sg_Graphics_DrawPixel(color clr, float x, float y)
{
	var_sg_Graphics_DrawPixel(clr,x,y);
}
void (*var_sg_Graphics_DrawPixelAtPoint)(color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPoint(color clr, const point2d *position)
{
	var_sg_Graphics_DrawPixelAtPoint(clr,position);
}
void (*var_sg_Graphics_DrawPixelAtPointOpts)(color clr, const point2d *position, const drawing_options *opts);
void sg_Graphics_DrawPixelAtPointOpts(color clr, const point2d *position, const drawing_options *opts)
{
	var_sg_Graphics_DrawPixelAtPointOpts(clr,position,opts);
}
void (*var_sg_Graphics_DrawPixelOpts)(color clr, float x, float y, const drawing_options *opts);
void sg_Graphics_DrawPixelOpts(color clr, float x, float y, const drawing_options *opts)
{
	var_sg_Graphics_DrawPixelOpts(clr,x,y,opts);
}
void (*var_sg_Graphics_DrawQuadStruct)(color clr, const quad *q);
void sg_Graphics_DrawQuadStruct(color clr, const quad *q)
{
	var_sg_Graphics_DrawQuadStruct(clr,q);
}
void (*var_sg_Graphics_DrawQuadStructOpts)(color clr, const quad *q, const drawing_options *opts);
void sg_Graphics_DrawQuadStructOpts(color clr, const quad *q, const drawing_options *opts)
{
	var_sg_Graphics_DrawQuadStructOpts(clr,q,opts);
}
void (*var_sg_Graphics_DrawRectangle)(color clr, float x, float y, float width, float height);
void sg_Graphics_DrawRectangle(color clr, float x, float y, float width, float height)
{
	var_sg_Graphics_DrawRectangle(clr,x,y,width,height);
}
void (*var_sg_Graphics_DrawRectangleOpts)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts);
void sg_Graphics_DrawRectangleOpts(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)
{
	var_sg_Graphics_DrawRectangleOpts(clr,xPos,yPos,width,height,opts);
}
void (*var_sg_Graphics_DrawRectangleStruct)(color clr, const rectangle *rect);
void sg_Graphics_DrawRectangleStruct(color clr, const rectangle *rect)
{
	var_sg_Graphics_DrawRectangleStruct(clr,rect);
}
void (*var_sg_Graphics_DrawRectangleStructOpts)(color clr, const rectangle *rect, const drawing_options *opts);
void sg_Graphics_DrawRectangleStructOpts(color clr, const rectangle *rect, const drawing_options *opts)
{
	var_sg_Graphics_DrawRectangleStructOpts(clr,rect,opts);
}
void (*var_sg_Graphics_DrawTriangle)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_DrawTriangle(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_DrawTriangleOpts)(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts);
void sg_Graphics_DrawTriangleOpts(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts)
{
	var_sg_Graphics_DrawTriangleOpts(clr,x1,y1,x2,y2,x3,y3,opts);
}
void (*var_sg_Graphics_DrawTriangleStruct)(color clr, const triangle  *tri);
void sg_Graphics_DrawTriangleStruct(color clr, const triangle  *tri)
{
	var_sg_Graphics_DrawTriangleStruct(clr,tri);
}
void (*var_sg_Graphics_DrawTriangleStructOpts)(color clr, const triangle  *tri, const drawing_options *opts);
void sg_Graphics_DrawTriangleStructOpts(color clr, const triangle  *tri, const drawing_options *opts)
{
	var_sg_Graphics_DrawTriangleStructOpts(clr,tri,opts);
}
void (*var_sg_Graphics_FillCircle)(color clr, float x, float y, float radius);
void sg_Graphics_FillCircle(color clr, float x, float y, float radius)
{
	var_sg_Graphics_FillCircle(clr,x,y,radius);
}
void (*var_sg_Graphics_FillCircleAtPoint)(color clr, const point2d *pt, int32_t radius);
void sg_Graphics_FillCircleAtPoint(color clr, const point2d *pt, int32_t radius)
{
	var_sg_Graphics_FillCircleAtPoint(clr,pt,radius);
}
void (*var_sg_Graphics_FillCircleAtPointWithOpts)(color clr, const point2d *pt, int32_t radius, const drawing_options *opts);
void sg_Graphics_FillCircleAtPointWithOpts(color clr, const point2d *pt, int32_t radius, const drawing_options *opts)
{
	var_sg_Graphics_FillCircleAtPointWithOpts(clr,pt,radius,opts);
}
void (*var_sg_Graphics_FillCircleOpts)(color clr, float x, float y, float radius, const drawing_options *opts);
void sg_Graphics_FillCircleOpts(color clr, float x, float y, float radius, const drawing_options *opts)
{
	var_sg_Graphics_FillCircleOpts(clr,x,y,radius,opts);
}
void (*var_sg_Graphics_FillCircleStruct)(color clr, const circle *c);
void sg_Graphics_FillCircleStruct(color clr, const circle *c)
{
	var_sg_Graphics_FillCircleStruct(clr,c);
}
void (*var_sg_Graphics_FillCircleStructOpts)(color clr, const circle *c, const drawing_options *opts);
void sg_Graphics_FillCircleStructOpts(color clr, const circle *c, const drawing_options *opts)
{
	var_sg_Graphics_FillCircleStructOpts(clr,c,opts);
}
void (*var_sg_Graphics_FillEllipse)(color clr, float xPos, float yPos, float width, float height);
void sg_Graphics_FillEllipse(color clr, float xPos, float yPos, float width, float height)
{
	var_sg_Graphics_FillEllipse(clr,xPos,yPos,width,height);
}
void (*var_sg_Graphics_FillEllipseOpts)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts);
void sg_Graphics_FillEllipseOpts(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)
{
	var_sg_Graphics_FillEllipseOpts(clr,xPos,yPos,width,height,opts);
}
void (*var_sg_Graphics_FillEllipseStruct)(color clr, const rectangle *rec);
void sg_Graphics_FillEllipseStruct(color clr, const rectangle *rec)
{
	var_sg_Graphics_FillEllipseStruct(clr,rec);
}
void (*var_sg_Graphics_FillEllipseStructOpts)(color clr, const rectangle *rec, const drawing_options *opts);
void sg_Graphics_FillEllipseStructOpts(color clr, const rectangle *rec, const drawing_options *opts)
{
	var_sg_Graphics_FillEllipseStructOpts(clr,rec,opts);
}
void (*var_sg_Graphics_FillQuadStruct)(color clr, const quad *q);
void sg_Graphics_FillQuadStruct(color clr, const quad *q)
{
	var_sg_Graphics_FillQuadStruct(clr,q);
}
void (*var_sg_Graphics_FillQuadStructOpts)(color clr, const quad *q, const drawing_options *opts);
void sg_Graphics_FillQuadStructOpts(color clr, const quad *q, const drawing_options *opts)
{
	var_sg_Graphics_FillQuadStructOpts(clr,q,opts);
}
void (*var_sg_Graphics_FillRectangle)(color clr, float x, float y, float width, float height);
void sg_Graphics_FillRectangle(color clr, float x, float y, float width, float height)
{
	var_sg_Graphics_FillRectangle(clr,x,y,width,height);
}
void (*var_sg_Graphics_FillRectangleOpts)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts);
void sg_Graphics_FillRectangleOpts(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)
{
	var_sg_Graphics_FillRectangleOpts(clr,xPos,yPos,width,height,opts);
}
void (*var_sg_Graphics_FillRectangleStruct)(color clr, const rectangle *rect);
void sg_Graphics_FillRectangleStruct(color clr, const rectangle *rect)
{
	var_sg_Graphics_FillRectangleStruct(clr,rect);
}
void (*var_sg_Graphics_FillRectangleStructOpts)(color clr, const rectangle *rect, const drawing_options *opts);
void sg_Graphics_FillRectangleStructOpts(color clr, const rectangle *rect, const drawing_options *opts)
{
	var_sg_Graphics_FillRectangleStructOpts(clr,rect,opts);
}
void (*var_sg_Graphics_FillTriangle)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_FillTriangle(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_FillTriangleOpts)(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts);
void sg_Graphics_FillTriangleOpts(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts)
{
	var_sg_Graphics_FillTriangleOpts(clr,x1,y1,x2,y2,x3,y3,opts);
}
void (*var_sg_Graphics_FillTriangleStruct)(color clr, const triangle  *tri);
void sg_Graphics_FillTriangleStruct(color clr, const triangle  *tri)
{
	var_sg_Graphics_FillTriangleStruct(clr,tri);
}
void (*var_sg_Graphics_FillTriangleStructOpts)(color clr, const triangle  *tri, const drawing_options *opts);
void sg_Graphics_FillTriangleStructOpts(color clr, const triangle  *tri, const drawing_options *opts)
{
	var_sg_Graphics_FillTriangleStructOpts(clr,tri,opts);
}
color (*var_sg_Graphics_GetPixelFromBitmap)(bitmap bmp, float x, float y);
color sg_Graphics_GetPixelFromBitmap(bitmap bmp, float x, float y)
{
	return var_sg_Graphics_GetPixelFromBitmap(bmp,x,y);
}
color (*var_sg_Graphics_GetPixelFromScreen)(float x, float y);
color sg_Graphics_GetPixelFromScreen(float x, float y)
{
	return var_sg_Graphics_GetPixelFromScreen(x,y);
}
color (*var_sg_Graphics_GetPixelFromWindow)(window wnd, float x, float y);
color sg_Graphics_GetPixelFromWindow(window wnd, float x, float y)
{
	return var_sg_Graphics_GetPixelFromWindow(wnd,x,y);
}
unsigned char (*var_sg_Graphics_GreenOf)(color c);
unsigned char sg_Graphics_GreenOf(color c)
{
	return var_sg_Graphics_GreenOf(c);
}
color (*var_sg_Graphics_HSBColor)(float hue, float saturation, float brightness);
color sg_Graphics_HSBColor(float hue, float saturation, float brightness)
{
	return var_sg_Graphics_HSBColor(hue,saturation,brightness);
}
void (*var_sg_Graphics_HSBValuesOf)(color c, float *h, float *s, float *b);
void sg_Graphics_HSBValuesOf(color c, float *h, float *s, float *b)
{
	var_sg_Graphics_HSBValuesOf(c,h,s,b);
}
float (*var_sg_Graphics_HueOf)(color c);
float sg_Graphics_HueOf(color c)
{
	return var_sg_Graphics_HueOf(c);
}
int32_t (*var_sg_Graphics_NumberOfResolutions)();
int32_t sg_Graphics_NumberOfResolutions()
{
	return var_sg_Graphics_NumberOfResolutions();
}
void (*var_sg_Graphics_OpenGraphicsWindow)(const char *caption, int32_t width, int32_t height);
void sg_Graphics_OpenGraphicsWindow(const char *caption, int32_t width, int32_t height)
{
	var_sg_Graphics_OpenGraphicsWindow(caption,width,height);
}
void (*var_sg_Graphics_PopClipForBitmap)(bitmap bmp);
void sg_Graphics_PopClipForBitmap(bitmap bmp)
{
	var_sg_Graphics_PopClipForBitmap(bmp);
}
void (*var_sg_Graphics_PopClipForWindow)(window wnd);
void sg_Graphics_PopClipForWindow(window wnd)
{
	var_sg_Graphics_PopClipForWindow(wnd);
}
void (*var_sg_Graphics_PopClipScreen)();
void sg_Graphics_PopClipScreen()
{
	var_sg_Graphics_PopClipScreen();
}
void (*var_sg_Graphics_PushClipRect)(const rectangle *r);
void sg_Graphics_PushClipRect(const rectangle *r)
{
	var_sg_Graphics_PushClipRect(r);
}
void (*var_sg_Graphics_PushClipRectForBitmap)(bitmap bmp, const rectangle *r);
void sg_Graphics_PushClipRectForBitmap(bitmap bmp, const rectangle *r)
{
	var_sg_Graphics_PushClipRectForBitmap(bmp,r);
}
void (*var_sg_Graphics_PushClipRectForWindow)(window wnd, const rectangle *r);
void sg_Graphics_PushClipRectForWindow(window wnd, const rectangle *r)
{
	var_sg_Graphics_PushClipRectForWindow(wnd,r);
}
color (*var_sg_Graphics_RGBAColor)(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
color sg_Graphics_RGBAColor(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)
{
	return var_sg_Graphics_RGBAColor(red,green,blue,alpha);
}
color (*var_sg_Graphics_RGBAFloatColor)(float r, float g, float b, float a);
color sg_Graphics_RGBAFloatColor(float r, float g, float b, float a)
{
	return var_sg_Graphics_RGBAFloatColor(r,g,b,a);
}
color (*var_sg_Graphics_RGBFloatColor)(float r, float g, float b);
color sg_Graphics_RGBFloatColor(float r, float g, float b)
{
	return var_sg_Graphics_RGBFloatColor(r,g,b);
}
color (*var_sg_Graphics_RandomColor)();
color sg_Graphics_RandomColor()
{
	return var_sg_Graphics_RandomColor();
}
color (*var_sg_Graphics_RandomRGBColor)(unsigned char alpha);
color sg_Graphics_RandomRGBColor(unsigned char alpha)
{
	return var_sg_Graphics_RandomRGBColor(alpha);
}
unsigned char (*var_sg_Graphics_RedOf)(color c);
unsigned char sg_Graphics_RedOf(color c)
{
	return var_sg_Graphics_RedOf(c);
}
void (*var_sg_Graphics_RefreshScreen)();
void sg_Graphics_RefreshScreen()
{
	var_sg_Graphics_RefreshScreen();
}
void (*var_sg_Graphics_RefreshScreenRestrictFPS)(int32_t TargetFPS);
void sg_Graphics_RefreshScreenRestrictFPS(int32_t TargetFPS)
{
	var_sg_Graphics_RefreshScreenRestrictFPS(TargetFPS);
}
void (*var_sg_Graphics_RefreshScrenWindowFPS)(window wnd, int32_t targetFPS);
void sg_Graphics_RefreshScrenWindowFPS(window wnd, int32_t targetFPS)
{
	var_sg_Graphics_RefreshScrenWindowFPS(wnd,targetFPS);
}
void (*var_sg_Graphics_ResetClip)();
void sg_Graphics_ResetClip()
{
	var_sg_Graphics_ResetClip();
}
void (*var_sg_Graphics_ResetClipForBitmap)(bitmap bmp);
void sg_Graphics_ResetClipForBitmap(bitmap bmp)
{
	var_sg_Graphics_ResetClipForBitmap(bmp);
}
void (*var_sg_Graphics_ResetClipForWindow)(window wnd);
void sg_Graphics_ResetClipForWindow(window wnd)
{
	var_sg_Graphics_ResetClipForWindow(wnd);
}
float (*var_sg_Graphics_SaturationOf)(color c);
float sg_Graphics_SaturationOf(color c)
{
	return var_sg_Graphics_SaturationOf(c);
}
void (*var_sg_Graphics_SetClip)(const rectangle *r);
void sg_Graphics_SetClip(const rectangle *r)
{
	var_sg_Graphics_SetClip(r);
}
void (*var_sg_Graphics_SetClipForBitmap)(bitmap bmp, const rectangle *r);
void sg_Graphics_SetClipForBitmap(bitmap bmp, const rectangle *r)
{
	var_sg_Graphics_SetClipForBitmap(bmp,r);
}
void (*var_sg_Graphics_SetClipForWindow)(window wnd, const rectangle *r);
void sg_Graphics_SetClipForWindow(window wnd, const rectangle *r)
{
	var_sg_Graphics_SetClipForWindow(wnd,r);
}
void (*var_sg_Graphics_SetIcon)(const char *filename);
void sg_Graphics_SetIcon(const char *filename)
{
	var_sg_Graphics_SetIcon(filename);
}
void (*var_sg_Graphics_ShowSwinGameSplashScreen)();
void sg_Graphics_ShowSwinGameSplashScreen()
{
	var_sg_Graphics_ShowSwinGameSplashScreen();
}
void (*var_sg_Graphics_TakeScreenshot)(const char *basename);
void sg_Graphics_TakeScreenshot(const char *basename)
{
	var_sg_Graphics_TakeScreenshot(basename);
}
unsigned char (*var_sg_Graphics_TransparencyOf)(color c);
unsigned char sg_Graphics_TransparencyOf(color c)
{
	return var_sg_Graphics_TransparencyOf(c);
}
circle (*var_sg_Images_BitmapCellCircle)(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCellCircle(bitmap bmp, const point2d *pt)
{
	return var_sg_Images_BitmapCellCircle(bmp,pt);
}
circle (*var_sg_Images_BitmapCellCircleScale)(bitmap bmp, const point2d *pt, float scale);
circle sg_Images_BitmapCellCircleScale(bitmap bmp, const point2d *pt, float scale)
{
	return var_sg_Images_BitmapCellCircleScale(bmp,pt,scale);
}
circle (*var_sg_Images_BitmapCellCircleXY)(bitmap bmp, float x, float y);
circle sg_Images_BitmapCellCircleXY(bitmap bmp, float x, float y)
{
	return var_sg_Images_BitmapCellCircleXY(bmp,x,y);
}
int32_t (*var_sg_Images_BitmapCellColumns)(bitmap bmp);
int32_t sg_Images_BitmapCellColumns(bitmap bmp)
{
	return var_sg_Images_BitmapCellColumns(bmp);
}
int32_t (*var_sg_Images_BitmapCellCount)(bitmap bmp);
int32_t sg_Images_BitmapCellCount(bitmap bmp)
{
	return var_sg_Images_BitmapCellCount(bmp);
}
int32_t (*var_sg_Images_BitmapCellHeight)(bitmap bmp);
int32_t sg_Images_BitmapCellHeight(bitmap bmp)
{
	return var_sg_Images_BitmapCellHeight(bmp);
}
rectangle (*var_sg_Images_BitmapCellRectangleAtOrigin)(bitmap bmp);
rectangle sg_Images_BitmapCellRectangleAtOrigin(bitmap bmp)
{
	return var_sg_Images_BitmapCellRectangleAtOrigin(bmp);
}
rectangle (*var_sg_Images_BitmapCellRectangleXY)(float x, float y, bitmap bmp);
rectangle sg_Images_BitmapCellRectangleXY(float x, float y, bitmap bmp)
{
	return var_sg_Images_BitmapCellRectangleXY(x,y,bmp);
}
int32_t (*var_sg_Images_BitmapCellRows)(bitmap bmp);
int32_t sg_Images_BitmapCellRows(bitmap bmp)
{
	return var_sg_Images_BitmapCellRows(bmp);
}
int32_t (*var_sg_Images_BitmapCellWidth)(bitmap bmp);
int32_t sg_Images_BitmapCellWidth(bitmap bmp)
{
	return var_sg_Images_BitmapCellWidth(bmp);
}
circle (*var_sg_Images_BitmapCircle)(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCircle(bitmap bmp, const point2d *pt)
{
	return var_sg_Images_BitmapCircle(bmp,pt);
}
circle (*var_sg_Images_BitmapCircleXY)(bitmap bmp, float x, float y);
circle sg_Images_BitmapCircleXY(bitmap bmp, float x, float y)
{
	return var_sg_Images_BitmapCircleXY(bmp,x,y);
}
void (*var_sg_Images_BitmapFilename)(bitmap bmp, char *result);
void sg_Images_BitmapFilename(bitmap bmp, char *result)
{
	var_sg_Images_BitmapFilename(bmp,result);
}
int32_t (*var_sg_Images_BitmapHeight)(bitmap bmp);
int32_t sg_Images_BitmapHeight(bitmap bmp)
{
	return var_sg_Images_BitmapHeight(bmp);
}
void (*var_sg_Images_BitmapName)(bitmap bmp, char *result);
void sg_Images_BitmapName(bitmap bmp, char *result)
{
	var_sg_Images_BitmapName(bmp,result);
}
bitmap (*var_sg_Images_BitmapNamed)(const char *name);
bitmap sg_Images_BitmapNamed(const char *name)
{
	return var_sg_Images_BitmapNamed(name);
}
rectangle (*var_sg_Images_BitmapRectAtOrigin)(bitmap bmp);
rectangle sg_Images_BitmapRectAtOrigin(bitmap bmp)
{
	return var_sg_Images_BitmapRectAtOrigin(bmp);
}
rectangle (*var_sg_Images_BitmapRectXY)(float x, float y, bitmap bmp);
rectangle sg_Images_BitmapRectXY(float x, float y, bitmap bmp)
{
	return var_sg_Images_BitmapRectXY(x,y,bmp);
}
rectangle (*var_sg_Images_BitmapRectangleOfCell)(bitmap src, int32_t cell);
rectangle sg_Images_BitmapRectangleOfCell(bitmap src, int32_t cell)
{
	return var_sg_Images_BitmapRectangleOfCell(src,cell);
}
void (*var_sg_Images_BitmapSetCellDetails)(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count);
void sg_Images_BitmapSetCellDetails(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count)
{
	var_sg_Images_BitmapSetCellDetails(bmp,width,height,columns,rows,count);
}
int32_t (*var_sg_Images_BitmapWidth)(bitmap bmp);
int32_t sg_Images_BitmapWidth(bitmap bmp)
{
	return var_sg_Images_BitmapWidth(bmp);
}
bool (*var_sg_Images_BitmapsInterchangable)(bitmap bmp1, bitmap bmp2);
bool sg_Images_BitmapsInterchangable(bitmap bmp1, bitmap bmp2)
{
	return var_sg_Images_BitmapsInterchangable(bmp1,bmp2);
}
void (*var_sg_Images_ClearSurface)(bitmap dest, color toColor);
void sg_Images_ClearSurface(bitmap dest, color toColor)
{
	var_sg_Images_ClearSurface(dest,toColor);
}
void (*var_sg_Images_ClearSurfaceToBlack)(bitmap dest);
void sg_Images_ClearSurfaceToBlack(bitmap dest)
{
	var_sg_Images_ClearSurfaceToBlack(dest);
}
bitmap (*var_sg_Images_CreateBitmap)(int32_t width, int32_t height);
bitmap sg_Images_CreateBitmap(int32_t width, int32_t height)
{
	return var_sg_Images_CreateBitmap(width,height);
}
bitmap (*var_sg_Images_CreateBitmapNamed)(const char *name, int32_t width, int32_t height);
bitmap sg_Images_CreateBitmapNamed(const char *name, int32_t width, int32_t height)
{
	return var_sg_Images_CreateBitmapNamed(name,width,height);
}
void (*var_sg_Images_DrawBitmap)(bitmap src, float x, float y);
void sg_Images_DrawBitmap(bitmap src, float x, float y)
{
	var_sg_Images_DrawBitmap(src,x,y);
}
void (*var_sg_Images_DrawBitmapNamed)(const char *name, float x, float y);
void sg_Images_DrawBitmapNamed(const char *name, float x, float y)
{
	var_sg_Images_DrawBitmapNamed(name,x,y);
}
void (*var_sg_Images_DrawBitmapNamedWithOpts)(const char *name, float x, float y, const drawing_options *opts);
void sg_Images_DrawBitmapNamedWithOpts(const char *name, float x, float y, const drawing_options *opts)
{
	var_sg_Images_DrawBitmapNamedWithOpts(name,x,y,opts);
}
void (*var_sg_Images_DrawBitmapWithOpts)(bitmap src, float x, float y, const drawing_options *opts);
void sg_Images_DrawBitmapWithOpts(bitmap src, float x, float y, const drawing_options *opts)
{
	var_sg_Images_DrawBitmapWithOpts(src,x,y,opts);
}
void (*var_sg_Images_DrawCell)(bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCell(bitmap src, int32_t cell, float x, float y)
{
	var_sg_Images_DrawCell(src,cell,x,y);
}
void (*var_sg_Images_DrawCellOpts)(bitmap src, int32_t cell, float x, float y, const drawing_options *opts);
void sg_Images_DrawCellOpts(bitmap src, int32_t cell, float x, float y, const drawing_options *opts)
{
	var_sg_Images_DrawCellOpts(src,cell,x,y,opts);
}
void (*var_sg_Images_FreeBitmap)(bitmap bitmapToFree);
void sg_Images_FreeBitmap(bitmap bitmapToFree)
{
	var_sg_Images_FreeBitmap(bitmapToFree);
}
bool (*var_sg_Images_HasBitmap)(const char *name);
bool sg_Images_HasBitmap(const char *name)
{
	return var_sg_Images_HasBitmap(name);
}
bitmap (*var_sg_Images_LoadBitmap)(const char *filename);
bitmap sg_Images_LoadBitmap(const char *filename)
{
	return var_sg_Images_LoadBitmap(filename);
}
bitmap (*var_sg_Images_LoadBitmapNamed)(const char *name, const char *filename);
bitmap sg_Images_LoadBitmapNamed(const char *name, const char *filename)
{
	return var_sg_Images_LoadBitmapNamed(name,filename);
}
bool (*var_sg_Images_PixelDrawnAtPoint)(bitmap bmp, float x, float y);
bool sg_Images_PixelDrawnAtPoint(bitmap bmp, float x, float y)
{
	return var_sg_Images_PixelDrawnAtPoint(bmp,x,y);
}
void (*var_sg_Images_ReleaseAllBitmaps)();
void sg_Images_ReleaseAllBitmaps()
{
	var_sg_Images_ReleaseAllBitmaps();
}
void (*var_sg_Images_ReleaseBitmap)(const char *name);
void sg_Images_ReleaseBitmap(const char *name)
{
	var_sg_Images_ReleaseBitmap(name);
}
void (*var_sg_Images_SaveBitmap)(bitmap src, const char *filepath);
void sg_Images_SaveBitmap(bitmap src, const char *filepath)
{
	var_sg_Images_SaveBitmap(src,filepath);
}
void (*var_sg_Images_SetupBitmapForCollisions)(bitmap src);
void sg_Images_SetupBitmapForCollisions(bitmap src)
{
	var_sg_Images_SetupBitmapForCollisions(src);
}
bool (*var_sg_Input_AnyKeyPressed)();
bool sg_Input_AnyKeyPressed()
{
	return var_sg_Input_AnyKeyPressed();
}
void (*var_sg_Input_EndReadingText)(char *result);
void sg_Input_EndReadingText(char *result)
{
	var_sg_Input_EndReadingText(result);
}
void (*var_sg_Input_HideMouse)();
void sg_Input_HideMouse()
{
	var_sg_Input_HideMouse();
}
bool (*var_sg_Input_KeyDown)(key_code key);
bool sg_Input_KeyDown(key_code key)
{
	return var_sg_Input_KeyDown(key);
}
void (*var_sg_Input_KeyName)(key_code key, char *result);
void sg_Input_KeyName(key_code key, char *result)
{
	var_sg_Input_KeyName(key,result);
}
bool (*var_sg_Input_KeyReleased)(key_code key);
bool sg_Input_KeyReleased(key_code key)
{
	return var_sg_Input_KeyReleased(key);
}
bool (*var_sg_Input_KeyTyped)(key_code key);
bool sg_Input_KeyTyped(key_code key)
{
	return var_sg_Input_KeyTyped(key);
}
bool (*var_sg_Input_KeyUp)(key_code key);
bool sg_Input_KeyUp(key_code key)
{
	return var_sg_Input_KeyUp(key);
}
bool (*var_sg_Input_MouseClicked)(mouse_button button);
bool sg_Input_MouseClicked(mouse_button button)
{
	return var_sg_Input_MouseClicked(button);
}
bool (*var_sg_Input_MouseDown)(mouse_button button);
bool sg_Input_MouseDown(mouse_button button)
{
	return var_sg_Input_MouseDown(button);
}
vector (*var_sg_Input_MouseMovement)();
vector sg_Input_MouseMovement()
{
	return var_sg_Input_MouseMovement();
}
point2d (*var_sg_Input_MousePosition)();
point2d sg_Input_MousePosition()
{
	return var_sg_Input_MousePosition();
}
vector (*var_sg_Input_MousePositionAsVector)();
vector sg_Input_MousePositionAsVector()
{
	return var_sg_Input_MousePositionAsVector();
}
bool (*var_sg_Input_MouseShown)();
bool sg_Input_MouseShown()
{
	return var_sg_Input_MouseShown();
}
bool (*var_sg_Input_MouseUp)(mouse_button button);
bool sg_Input_MouseUp(mouse_button button)
{
	return var_sg_Input_MouseUp(button);
}
float (*var_sg_Input_MouseX)();
float sg_Input_MouseX()
{
	return var_sg_Input_MouseX();
}
float (*var_sg_Input_MouseY)();
float sg_Input_MouseY()
{
	return var_sg_Input_MouseY();
}
void (*var_sg_Input_MoveMouse)(int32_t x, int32_t y);
void sg_Input_MoveMouse(int32_t x, int32_t y)
{
	var_sg_Input_MoveMouse(x,y);
}
void (*var_sg_Input_MoveMouseToPoint)(const point2d *point);
void sg_Input_MoveMouseToPoint(const point2d *point)
{
	var_sg_Input_MoveMouseToPoint(point);
}
void (*var_sg_Input_ProcessEvents)();
void sg_Input_ProcessEvents()
{
	var_sg_Input_ProcessEvents();
}
bool (*var_sg_Input_QuitRequested)();
bool sg_Input_QuitRequested()
{
	return var_sg_Input_QuitRequested();
}
bool (*var_sg_Input_ReadingText)();
bool sg_Input_ReadingText()
{
	return var_sg_Input_ReadingText();
}
void (*var_sg_Input_SetMouseVisible)(bool show);
void sg_Input_SetMouseVisible(bool show)
{
	var_sg_Input_SetMouseVisible(show != 0);
}
void (*var_sg_Input_ShowMouse)();
void sg_Input_ShowMouse()
{
	var_sg_Input_ShowMouse();
}
void (*var_sg_Input_StartReadingText)(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingText(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
	var_sg_Input_StartReadingText(textColor,maxLength,theFont,x,y);
}
void (*var_sg_Input_StartReadingTextWithText)(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingTextWithText(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
	var_sg_Input_StartReadingTextWithText(text,textColor,maxLength,theFont,x,y);
}
void (*var_sg_Input_StartReadingTextWithTextAndColorInArea)(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithTextAndColorInArea(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithTextAndColorInArea(text,textColor,backGroundColor,maxLength,theFont,area);
}
void (*var_sg_Input_StartReadingTextWithTextAtPt)(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt);
void sg_Input_StartReadingTextWithTextAtPt(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt)
{
	var_sg_Input_StartReadingTextWithTextAtPt(text,textColor,maxLength,theFont,pt);
}
void (*var_sg_Input_StartReadingTextWithTextInArea)(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithTextInArea(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithTextInArea(text,textColor,maxLength,theFont,area);
}
void (*var_sg_Input_StartReadingTextWithinArea)(color textColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithinArea(color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithinArea(textColor,maxLength,theFont,area);
}
bool (*var_sg_Input_TextEntryCancelled)();
bool sg_Input_TextEntryCancelled()
{
	return var_sg_Input_TextEntryCancelled();
}
void (*var_sg_Input_TextReadAsASCII)(char *result);
void sg_Input_TextReadAsASCII(char *result)
{
	var_sg_Input_TextReadAsASCII(result);
}
void (*var_sg_Networking_BroadcastMessage)(const char *aMsg);
void sg_Networking_BroadcastMessage(const char *aMsg)
{
	var_sg_Networking_BroadcastMessage(aMsg);
}
void (*var_sg_Networking_BroadcastMessageToServer)(const char *aMsg, server_socket svr);
void sg_Networking_BroadcastMessageToServer(const char *aMsg, server_socket svr)
{
	var_sg_Networking_BroadcastMessageToServer(aMsg,svr);
}
void (*var_sg_Networking_BroadcastMessageToServerNamed)(const char *aMsg, const char *name);
void sg_Networking_BroadcastMessageToServerNamed(const char *aMsg, const char *name)
{
	var_sg_Networking_BroadcastMessageToServerNamed(aMsg,name);
}
void (*var_sg_Networking_CheckNetworkActivity)();
void sg_Networking_CheckNetworkActivity()
{
	var_sg_Networking_CheckNetworkActivity();
}
void (*var_sg_Networking_ClearMessagesNamed)(const char *name);
void sg_Networking_ClearMessagesNamed(const char *name)
{
	var_sg_Networking_ClearMessagesNamed(name);
}
void (*var_sg_Networking_CloseAllConnections)();
void sg_Networking_CloseAllConnections()
{
	var_sg_Networking_CloseAllConnections();
}
void (*var_sg_Networking_CloseAllServers)();
void sg_Networking_CloseAllServers()
{
	var_sg_Networking_CloseAllServers();
}
void (*var_sg_Networking_CloseAllUDPSockets)();
void sg_Networking_CloseAllUDPSockets()
{
	var_sg_Networking_CloseAllUDPSockets();
}
bool (*var_sg_Networking_CloseConnection)(connection *aConnection);
bool sg_Networking_CloseConnection(connection *aConnection)
{
	return var_sg_Networking_CloseConnection(aConnection);
}
bool (*var_sg_Networking_CloseConnectionNamed)(const char *name);
bool sg_Networking_CloseConnectionNamed(const char *name)
{
	return var_sg_Networking_CloseConnectionNamed(name);
}
void (*var_sg_Networking_CloseMessage)(message msg);
void sg_Networking_CloseMessage(message msg)
{
	var_sg_Networking_CloseMessage(msg);
}
bool (*var_sg_Networking_CloseServer)(server_socket *svr);
bool sg_Networking_CloseServer(server_socket *svr)
{
	return var_sg_Networking_CloseServer(svr);
}
bool (*var_sg_Networking_CloseServerNamed)(const char *name);
bool sg_Networking_CloseServerNamed(const char *name)
{
	return var_sg_Networking_CloseServerNamed(name);
}
bool (*var_sg_Networking_CloseUDPSocket)(unsigned short int aPort);
bool sg_Networking_CloseUDPSocket(unsigned short int aPort)
{
	return var_sg_Networking_CloseUDPSocket(aPort);
}
void (*var_sg_Networking_ConnectionClearMessages)(connection aConnection);
void sg_Networking_ConnectionClearMessages(connection aConnection)
{
	var_sg_Networking_ConnectionClearMessages(aConnection);
}
int32_t (*var_sg_Networking_ConnectionCount)(server_socket server);
int32_t sg_Networking_ConnectionCount(server_socket server)
{
	return var_sg_Networking_ConnectionCount(server);
}
int32_t (*var_sg_Networking_ConnectionCountForServerNamed)(const char *name);
int32_t sg_Networking_ConnectionCountForServerNamed(const char *name)
{
	return var_sg_Networking_ConnectionCountForServerNamed(name);
}
uint32_t (*var_sg_Networking_ConnectionIP)(connection aConnection);
uint32_t sg_Networking_ConnectionIP(connection aConnection)
{
	return var_sg_Networking_ConnectionIP(aConnection);
}
uint32_t (*var_sg_Networking_ConnectionIPNamed)(const char *name);
uint32_t sg_Networking_ConnectionIPNamed(const char *name)
{
	return var_sg_Networking_ConnectionIPNamed(name);
}
int32_t (*var_sg_Networking_ConnectionMessageCount)(connection aConnection);
int32_t sg_Networking_ConnectionMessageCount(connection aConnection)
{
	return var_sg_Networking_ConnectionMessageCount(aConnection);
}
connection (*var_sg_Networking_ConnectionNamed)(const char *name);
connection sg_Networking_ConnectionNamed(const char *name)
{
	return var_sg_Networking_ConnectionNamed(name);
}
bool (*var_sg_Networking_ConnectionOpen)(connection con);
bool sg_Networking_ConnectionOpen(connection con)
{
	return var_sg_Networking_ConnectionOpen(con);
}
bool (*var_sg_Networking_ConnectionOpenNamed)(const char *name);
bool sg_Networking_ConnectionOpenNamed(const char *name)
{
	return var_sg_Networking_ConnectionOpenNamed(name);
}
unsigned short int (*var_sg_Networking_ConnectionPort)(connection aConnection);
unsigned short int sg_Networking_ConnectionPort(connection aConnection)
{
	return var_sg_Networking_ConnectionPort(aConnection);
}
unsigned short int (*var_sg_Networking_ConnectionPortNamed)(const char *name);
unsigned short int sg_Networking_ConnectionPortNamed(const char *name)
{
	return var_sg_Networking_ConnectionPortNamed(name);
}
server_socket (*var_sg_Networking_CreateServer)(const char *name, unsigned short int port);
server_socket sg_Networking_CreateServer(const char *name, unsigned short int port)
{
	return var_sg_Networking_CreateServer(name,port);
}
server_socket (*var_sg_Networking_CreateServerWithProtocol)(const char *name, unsigned short int port, connection_type protocol);
server_socket sg_Networking_CreateServerWithProtocol(const char *name, unsigned short int port, connection_type protocol)
{
	return var_sg_Networking_CreateServerWithProtocol(name,port,protocol);
}
void (*var_sg_Networking_DecToHex)(uint32_t aDec, char *result);
void sg_Networking_DecToHex(uint32_t aDec, char *result)
{
	var_sg_Networking_DecToHex(aDec,result);
}
void (*var_sg_Networking_FreeConnection)(connection *aConnection);
void sg_Networking_FreeConnection(connection *aConnection)
{
	var_sg_Networking_FreeConnection(aConnection);
}
void (*var_sg_Networking_FreeServer)(server_socket *svr);
void sg_Networking_FreeServer(server_socket *svr)
{
	var_sg_Networking_FreeServer(svr);
}
bool (*var_sg_Networking_HasMessageOnConnection)(connection con);
bool sg_Networking_HasMessageOnConnection(connection con)
{
	return var_sg_Networking_HasMessageOnConnection(con);
}
bool (*var_sg_Networking_HasMessageOnConnectionNamed)(const char *name);
bool sg_Networking_HasMessageOnConnectionNamed(const char *name)
{
	return var_sg_Networking_HasMessageOnConnectionNamed(name);
}
bool (*var_sg_Networking_HasMessageOnServer)(server_socket svr);
bool sg_Networking_HasMessageOnServer(server_socket svr)
{
	return var_sg_Networking_HasMessageOnServer(svr);
}
bool (*var_sg_Networking_HasMessages)();
bool sg_Networking_HasMessages()
{
	return var_sg_Networking_HasMessages();
}
bool (*var_sg_Networking_HasNewConnections)();
bool sg_Networking_HasNewConnections()
{
	return var_sg_Networking_HasNewConnections();
}
void (*var_sg_Networking_HexStrToIPv4)(const char *aHex, char *result);
void sg_Networking_HexStrToIPv4(const char *aHex, char *result)
{
	var_sg_Networking_HexStrToIPv4(aHex,result);
}
void (*var_sg_Networking_HexToDecString)(const char *aHex, char *result);
void sg_Networking_HexToDecString(const char *aHex, char *result)
{
	var_sg_Networking_HexToDecString(aHex,result);
}
uint32_t (*var_sg_Networking_IPv4ToDec)(const char *aIP);
uint32_t sg_Networking_IPv4ToDec(const char *aIP)
{
	return var_sg_Networking_IPv4ToDec(aIP);
}
void (*var_sg_Networking_IPv4ToStr)(uint32_t ip, char *result);
void sg_Networking_IPv4ToStr(uint32_t ip, char *result)
{
	var_sg_Networking_IPv4ToStr(ip,result);
}
connection (*var_sg_Networking_LastConnection)(server_socket server);
connection sg_Networking_LastConnection(server_socket server)
{
	return var_sg_Networking_LastConnection(server);
}
connection (*var_sg_Networking_LastConnectionForServerNamed)(const char *name);
connection sg_Networking_LastConnectionForServerNamed(const char *name)
{
	return var_sg_Networking_LastConnectionForServerNamed(name);
}
connection (*var_sg_Networking_MessageConnection)(message msg);
connection sg_Networking_MessageConnection(message msg)
{
	return var_sg_Networking_MessageConnection(msg);
}
int32_t (*var_sg_Networking_MessageCountOnConnectionNamed)(const char *name);
int32_t sg_Networking_MessageCountOnConnectionNamed(const char *name)
{
	return var_sg_Networking_MessageCountOnConnectionNamed(name);
}
void (*var_sg_Networking_MessageData)(message msg, char *result);
void sg_Networking_MessageData(message msg, char *result)
{
	var_sg_Networking_MessageData(msg,result);
}
void (*var_sg_Networking_MessageHost)(message msg, char *result);
void sg_Networking_MessageHost(message msg, char *result)
{
	var_sg_Networking_MessageHost(msg,result);
}
unsigned short int (*var_sg_Networking_MessagePort)(message msg);
unsigned short int sg_Networking_MessagePort(message msg)
{
	return var_sg_Networking_MessagePort(msg);
}
connection_type (*var_sg_Networking_MessageProtocol)(message msg);
connection_type sg_Networking_MessageProtocol(message msg)
{
	return var_sg_Networking_MessageProtocol(msg);
}
void (*var_sg_Networking_MyIP)(char *result);
void sg_Networking_MyIP(char *result)
{
	var_sg_Networking_MyIP(result);
}
connection (*var_sg_Networking_OpenConnection)(const char *host, unsigned short int port);
connection sg_Networking_OpenConnection(const char *host, unsigned short int port)
{
	return var_sg_Networking_OpenConnection(host,port);
}
connection (*var_sg_Networking_OpenConnectionNamed)(const char *name, const char *host, unsigned short int port);
connection sg_Networking_OpenConnectionNamed(const char *name, const char *host, unsigned short int port)
{
	return var_sg_Networking_OpenConnectionNamed(name,host,port);
}
connection (*var_sg_Networking_OpenConnectionNamedWithProtocol)(const char *name, const char *host, unsigned short int port, connection_type protocol);
connection sg_Networking_OpenConnectionNamedWithProtocol(const char *name, const char *host, unsigned short int port, connection_type protocol)
{
	return var_sg_Networking_OpenConnectionNamedWithProtocol(name,host,port,protocol);
}
message (*var_sg_Networking_ReadMessage)(connection aConnection);
message sg_Networking_ReadMessage(connection aConnection)
{
	return var_sg_Networking_ReadMessage(aConnection);
}
void (*var_sg_Networking_ReadMessageData)(connection aConnection, char *result);
void sg_Networking_ReadMessageData(connection aConnection, char *result)
{
	var_sg_Networking_ReadMessageData(aConnection,result);
}
void (*var_sg_Networking_ReadMessageDataFromServer)(server_socket svr, char *result);
void sg_Networking_ReadMessageDataFromServer(server_socket svr, char *result)
{
	var_sg_Networking_ReadMessageDataFromServer(svr,result);
}
void (*var_sg_Networking_ReadMessageDataNamed)(const char *name, char *result);
void sg_Networking_ReadMessageDataNamed(const char *name, char *result)
{
	var_sg_Networking_ReadMessageDataNamed(name,result);
}
message (*var_sg_Networking_ReadMessageFromServer)(server_socket svr);
message sg_Networking_ReadMessageFromServer(server_socket svr)
{
	return var_sg_Networking_ReadMessageFromServer(svr);
}
message (*var_sg_Networking_ReadMessageNamed)(const char *name);
message sg_Networking_ReadMessageNamed(const char *name)
{
	return var_sg_Networking_ReadMessageNamed(name);
}
void (*var_sg_Networking_Reconnect)(connection aConnection);
void sg_Networking_Reconnect(connection aConnection)
{
	var_sg_Networking_Reconnect(aConnection);
}
void (*var_sg_Networking_ReconnectConnectionNamed)(const char *name);
void sg_Networking_ReconnectConnectionNamed(const char *name)
{
	var_sg_Networking_ReconnectConnectionNamed(name);
}
void (*var_sg_Networking_ReleaseAllConnections)();
void sg_Networking_ReleaseAllConnections()
{
	var_sg_Networking_ReleaseAllConnections();
}
connection (*var_sg_Networking_RetreiveConnection)(server_socket server, int32_t idx);
connection sg_Networking_RetreiveConnection(server_socket server, int32_t idx)
{
	return var_sg_Networking_RetreiveConnection(server,idx);
}
connection (*var_sg_Networking_RetrieveConnectionFromServerNamed)(const char *name, int32_t idx);
connection sg_Networking_RetrieveConnectionFromServerNamed(const char *name, int32_t idx)
{
	return var_sg_Networking_RetrieveConnectionFromServerNamed(name,idx);
}
bool (*var_sg_Networking_SendMessageTo)(const char *aMsg, connection aConnection);
bool sg_Networking_SendMessageTo(const char *aMsg, connection aConnection)
{
	return var_sg_Networking_SendMessageTo(aMsg,aConnection);
}
bool (*var_sg_Networking_SendMessageToConnectionNamed)(const char *aMsg, const char *name);
bool sg_Networking_SendMessageToConnectionNamed(const char *aMsg, const char *name)
{
	return var_sg_Networking_SendMessageToConnectionNamed(aMsg,name);
}
void (*var_sg_Networking_ServerClearMessages)(server_socket svr);
void sg_Networking_ServerClearMessages(server_socket svr)
{
	var_sg_Networking_ServerClearMessages(svr);
}
bool (*var_sg_Networking_ServerHasNewConnection)(server_socket server);
bool sg_Networking_ServerHasNewConnection(server_socket server)
{
	return var_sg_Networking_ServerHasNewConnection(server);
}
int32_t (*var_sg_Networking_ServerMessageCount)(server_socket svr);
int32_t sg_Networking_ServerMessageCount(server_socket svr)
{
	return var_sg_Networking_ServerMessageCount(svr);
}
server_socket (*var_sg_Networking_ServerNamed)(const char *name);
server_socket sg_Networking_ServerNamed(const char *name)
{
	return var_sg_Networking_ServerNamed(name);
}
bool (*var_sg_Networking_ServerNamedHasNewConnection)(const char *name);
bool sg_Networking_ServerNamedHasNewConnection(const char *name)
{
	return var_sg_Networking_ServerNamedHasNewConnection(name);
}
void (*var_sg_Networking_SetUDPPacketSize)(int32_t val);
void sg_Networking_SetUDPPacketSize(int32_t val)
{
	var_sg_Networking_SetUDPPacketSize(val);
}
int32_t (*var_sg_Networking_UDPPacketSize)();
int32_t sg_Networking_UDPPacketSize()
{
	return var_sg_Networking_UDPPacketSize();
}
bool (*var_sg_Physics_BitmapAtPointsCollision)(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_BitmapAtPointsCollision(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2)
{
	return var_sg_Physics_BitmapAtPointsCollision(bmp1,pt1,bmp2,pt2);
}
bool (*var_sg_Physics_BitmapCollision)(bitmap bmp1, float x1, float y1, bitmap bmp2, float x2, float y2);
bool sg_Physics_BitmapCollision(bitmap bmp1, float x1, float y1, bitmap bmp2, float x2, float y2)
{
	return var_sg_Physics_BitmapCollision(bmp1,x1,y1,bmp2,x2,y2);
}
bool (*var_sg_Physics_BitmapPartAtPtRectCollision)(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPartAtPtRectCollision(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect)
{
	return var_sg_Physics_BitmapPartAtPtRectCollision(bmp,pt,part,rect);
}
bool (*var_sg_Physics_BitmapPartPointCollision)(bitmap bmp, float x, float y, const rectangle *part, float ptX, float ptY);
bool sg_Physics_BitmapPartPointCollision(bitmap bmp, float x, float y, const rectangle *part, float ptX, float ptY)
{
	return var_sg_Physics_BitmapPartPointCollision(bmp,x,y,part,ptX,ptY);
}
bool (*var_sg_Physics_BitmapPartPointXYCollision)(bitmap bmp, float x, float y, const rectangle *part, const point2d *pt);
bool sg_Physics_BitmapPartPointXYCollision(bitmap bmp, float x, float y, const rectangle *part, const point2d *pt)
{
	return var_sg_Physics_BitmapPartPointXYCollision(bmp,x,y,part,pt);
}
bool (*var_sg_Physics_BitmapPartRectCollision)(bitmap bmp, float x, float y, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPartRectCollision(bitmap bmp, float x, float y, const rectangle *part, const rectangle *rect)
{
	return var_sg_Physics_BitmapPartRectCollision(bmp,x,y,part,rect);
}
bool (*var_sg_Physics_BitmapPointCollision)(bitmap bmp, float x, float y, float ptX, float ptY);
bool sg_Physics_BitmapPointCollision(bitmap bmp, float x, float y, float ptX, float ptY)
{
	return var_sg_Physics_BitmapPointCollision(bmp,x,y,ptX,ptY);
}
bool (*var_sg_Physics_BitmapPointPtCollision)(bitmap bmp, float x, float y, const point2d *pt);
bool sg_Physics_BitmapPointPtCollision(bitmap bmp, float x, float y, const point2d *pt)
{
	return var_sg_Physics_BitmapPointPtCollision(bmp,x,y,pt);
}
bool (*var_sg_Physics_BitmapRectCollision)(bitmap bmp, float x, float y, float rectX, float rectY, float rectWidth, float rectHeight);
bool sg_Physics_BitmapRectCollision(bitmap bmp, float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)
{
	return var_sg_Physics_BitmapRectCollision(bmp,x,y,rectX,rectY,rectWidth,rectHeight);
}
bool (*var_sg_Physics_BitmapRectangleCollision)(bitmap bmp, float x, float y, const rectangle *rect);
bool sg_Physics_BitmapRectangleCollision(bitmap bmp, float x, float y, const rectangle *rect)
{
	return var_sg_Physics_BitmapRectangleCollision(bmp,x,y,rect);
}
bool (*var_sg_Physics_BitmapsPartsCollision)(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2);
bool sg_Physics_BitmapsPartsCollision(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2)
{
	return var_sg_Physics_BitmapsPartsCollision(bmp1,pt1,part1,bmp2,pt2,part2);
}
bool (*var_sg_Physics_CellBitmapCollision)(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2);
bool sg_Physics_CellBitmapCollision(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2)
{
	return var_sg_Physics_CellBitmapCollision(bmp1,cell,x1,y1,bmp2,x2,y2);
}
bool (*var_sg_Physics_CellBitmapCollisionAtPt)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_CellBitmapCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2)
{
	return var_sg_Physics_CellBitmapCollisionAtPt(bmp1,cell,pt1,bmp2,pt2);
}
bool (*var_sg_Physics_CellBitmapPartCollision)(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle *part);
bool sg_Physics_CellBitmapPartCollision(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle *part)
{
	return var_sg_Physics_CellBitmapPartCollision(bmp1,cell,x1,y1,bmp2,x2,y2,part);
}
bool (*var_sg_Physics_CellBitmapPartCollisionAtPt)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part);
bool sg_Physics_CellBitmapPartCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part)
{
	return var_sg_Physics_CellBitmapPartCollisionAtPt(bmp1,cell,pt1,bmp2,pt2,part);
}
bool (*var_sg_Physics_CellCollision)(bitmap bmp1, int32_t cell1, float x1, float y1, bitmap bmp2, int32_t cell2, float x2, float y2);
bool sg_Physics_CellCollision(bitmap bmp1, int32_t cell1, float x1, float y1, bitmap bmp2, int32_t cell2, float x2, float y2)
{
	return var_sg_Physics_CellCollision(bmp1,cell1,x1,y1,bmp2,cell2,x2,y2);
}
bool (*var_sg_Physics_CellCollisionAtPt)(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2);
bool sg_Physics_CellCollisionAtPt(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2)
{
	return var_sg_Physics_CellCollisionAtPt(bmp1,cell1,pt1,bmp2,cell2,pt2);
}
bool (*var_sg_Physics_CellRectCollision)(bitmap bmp, int32_t cell, float x, float y, const rectangle *rect);
bool sg_Physics_CellRectCollision(bitmap bmp, int32_t cell, float x, float y, const rectangle *rect)
{
	return var_sg_Physics_CellRectCollision(bmp,cell,x,y,rect);
}
bool (*var_sg_Physics_CellRectCollisionAtPt)(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect);
bool sg_Physics_CellRectCollisionAtPt(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect)
{
	return var_sg_Physics_CellRectCollisionAtPt(bmp,cell,pt,rect);
}
bool (*var_sg_Physics_CircleCircleCollision)(const circle *c1, const circle *c2);
bool sg_Physics_CircleCircleCollision(const circle *c1, const circle *c2)
{
	return var_sg_Physics_CircleCircleCollision(c1,c2);
}
bool (*var_sg_Physics_CircleRectCollision)(const circle *c, const rectangle *rect);
bool sg_Physics_CircleRectCollision(const circle *c, const rectangle *rect)
{
	return var_sg_Physics_CircleRectCollision(c,rect);
}
bool (*var_sg_Physics_CircleTriangleCollision)(const circle *c, const triangle  *tri);
bool sg_Physics_CircleTriangleCollision(const circle *c, const triangle  *tri)
{
	return var_sg_Physics_CircleTriangleCollision(c,tri);
}
void (*var_sg_Physics_CollideCircleCircle)(sprite s, const circle *c);
void sg_Physics_CollideCircleCircle(sprite s, const circle *c)
{
	var_sg_Physics_CollideCircleCircle(s,c);
}
void (*var_sg_Physics_CollideCircleLine)(sprite s, const line_segment *line);
void sg_Physics_CollideCircleLine(sprite s, const line_segment *line)
{
	var_sg_Physics_CollideCircleLine(s,line);
}
void (*var_sg_Physics_CollideCircleRectangle)(sprite s, const rectangle *rect);
void sg_Physics_CollideCircleRectangle(sprite s, const rectangle *rect)
{
	var_sg_Physics_CollideCircleRectangle(s,rect);
}
void (*var_sg_Physics_CollideCircleTriangle)(sprite s, const triangle  *tri);
void sg_Physics_CollideCircleTriangle(sprite s, const triangle  *tri)
{
	var_sg_Physics_CollideCircleTriangle(s,tri);
}
void (*var_sg_Physics_CollideCircles)(sprite s1, sprite s2);
void sg_Physics_CollideCircles(sprite s1, sprite s2)
{
	var_sg_Physics_CollideCircles(s1,s2);
}
bool (*var_sg_Physics_RectLineCollision)(const rectangle *rect, const line_segment *line);
bool sg_Physics_RectLineCollision(const rectangle *rect, const line_segment *line)
{
	return var_sg_Physics_RectLineCollision(rect,line);
}
collision_side (*var_sg_Physics_SideForCollisionTest)(const vector *velocity);
collision_side sg_Physics_SideForCollisionTest(const vector *velocity)
{
	return var_sg_Physics_SideForCollisionTest(velocity);
}
bool (*var_sg_Physics_SpriteAtPoint)(sprite s, const point2d *pt);
bool sg_Physics_SpriteAtPoint(sprite s, const point2d *pt)
{
	return var_sg_Physics_SpriteAtPoint(s,pt);
}
bool (*var_sg_Physics_SpriteBitmapAtPointCollision)(sprite s, bitmap bmp, const point2d *pt);
bool sg_Physics_SpriteBitmapAtPointCollision(sprite s, bitmap bmp, const point2d *pt)
{
	return var_sg_Physics_SpriteBitmapAtPointCollision(s,bmp,pt);
}
bool (*var_sg_Physics_SpriteBitmapCollision)(sprite s, bitmap bmp, float x, float y);
bool sg_Physics_SpriteBitmapCollision(sprite s, bitmap bmp, float x, float y)
{
	return var_sg_Physics_SpriteBitmapCollision(s,bmp,x,y);
}
bool (*var_sg_Physics_SpriteCircleLineCollision)(sprite s, const line_segment *line);
bool sg_Physics_SpriteCircleLineCollision(sprite s, const line_segment *line)
{
	return var_sg_Physics_SpriteCircleLineCollision(s,line);
}
bool (*var_sg_Physics_SpriteCollision)(sprite s1, sprite s2);
bool sg_Physics_SpriteCollision(sprite s1, sprite s2)
{
	return var_sg_Physics_SpriteCollision(s1,s2);
}
bool (*var_sg_Physics_SpriteRectCollision)(sprite s, float x, float y, float width, float height);
bool sg_Physics_SpriteRectCollision(sprite s, float x, float y, float width, float height)
{
	return var_sg_Physics_SpriteRectCollision(s,x,y,width,height);
}
bool (*var_sg_Physics_SpriteRectLineCollision)(sprite s, const line_segment *line);
bool sg_Physics_SpriteRectLineCollision(sprite s, const line_segment *line)
{
	return var_sg_Physics_SpriteRectLineCollision(s,line);
}
bool (*var_sg_Physics_SpriteRectangleCollision)(sprite s, const rectangle *r);
bool sg_Physics_SpriteRectangleCollision(sprite s, const rectangle *r)
{
	return var_sg_Physics_SpriteRectangleCollision(s,r);
}
bool (*var_sg_Physics_TriangleLineCollision)(const triangle  *tri, const line_segment *ln);
bool sg_Physics_TriangleLineCollision(const triangle  *tri, const line_segment *ln)
{
	return var_sg_Physics_TriangleLineCollision(tri,ln);
}
void (*var_sg_Resources_AppPath)(char *result);
void sg_Resources_AppPath(char *result)
{
	var_sg_Resources_AppPath(result);
}
void (*var_sg_Resources_FilenameToResource)(const char *name, resource_kind kind, char *result);
void sg_Resources_FilenameToResource(const char *name, resource_kind kind, char *result)
{
	var_sg_Resources_FilenameToResource(name,kind,result);
}
bool (*var_sg_Resources_HasResourceBundle)(const char *name);
bool sg_Resources_HasResourceBundle(const char *name)
{
	return var_sg_Resources_HasResourceBundle(name);
}
void (*var_sg_Resources_LoadResourceBundle)(const char *name, bool showProgress);
void sg_Resources_LoadResourceBundle(const char *name, bool showProgress)
{
	var_sg_Resources_LoadResourceBundle(name,showProgress != 0);
}
void (*var_sg_Resources_LoadResourceBundleNamed)(const char *name, const char *filename, bool showProgress);
void sg_Resources_LoadResourceBundleNamed(const char *name, const char *filename, bool showProgress)
{
	var_sg_Resources_LoadResourceBundleNamed(name,filename,showProgress != 0);
}
void (*var_sg_Resources_PathToOtherResource)(const char *filename, char *result);
void sg_Resources_PathToOtherResource(const char *filename, char *result)
{
	var_sg_Resources_PathToOtherResource(filename,result);
}
void (*var_sg_Resources_PathToOtherResourceWithBase)(const char *path, const char *filename, char *result);
void sg_Resources_PathToOtherResourceWithBase(const char *path, const char *filename, char *result)
{
	var_sg_Resources_PathToOtherResourceWithBase(path,filename,result);
}
void (*var_sg_Resources_PathToResource)(const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResource(const char *filename, resource_kind kind, char *result)
{
	var_sg_Resources_PathToResource(filename,kind,result);
}
void (*var_sg_Resources_PathToResourceWithBase)(const char *path, const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithBase(const char *path, const char *filename, resource_kind kind, char *result)
{
	var_sg_Resources_PathToResourceWithBase(path,filename,kind,result);
}
void (*var_sg_Resources_PathToResourseInSubdir)(const char *filename, const char *subdir, char *result);
void sg_Resources_PathToResourseInSubdir(const char *filename, const char *subdir, char *result)
{
	var_sg_Resources_PathToResourseInSubdir(filename,subdir,result);
}
void (*var_sg_Resources_PathToResourseKindInSubdir)(const char *filename, resource_kind kind, const char *subdir, char *result);
void sg_Resources_PathToResourseKindInSubdir(const char *filename, resource_kind kind, const char *subdir, char *result)
{
	var_sg_Resources_PathToResourseKindInSubdir(filename,kind,subdir,result);
}
void (*var_sg_Resources_RegisterFreeNotifier)(free_notifier fn);
void sg_Resources_RegisterFreeNotifier(free_notifier fn)
{
	var_sg_Resources_RegisterFreeNotifier(fn);
}
void (*var_sg_Resources_ReleaseAllResources)();
void sg_Resources_ReleaseAllResources()
{
	var_sg_Resources_ReleaseAllResources();
}
void (*var_sg_Resources_ReleaseResourceBundle)(const char *name);
void sg_Resources_ReleaseResourceBundle(const char *name)
{
	var_sg_Resources_ReleaseResourceBundle(name);
}
void (*var_sg_Resources_SetAppPath)(const char *path);
void sg_Resources_SetAppPath(const char *path)
{
	var_sg_Resources_SetAppPath(path);
}
void (*var_sg_Resources_SetAppPathWithExe)(const char *path, bool withExe);
void sg_Resources_SetAppPathWithExe(const char *path, bool withExe)
{
	var_sg_Resources_SetAppPathWithExe(path,withExe != 0);
}
void (*var_sg_Sprites_CallForAllSprites)(sprite_function fn);
void sg_Sprites_CallForAllSprites(sprite_function fn)
{
	var_sg_Sprites_CallForAllSprites(fn);
}
void (*var_sg_Sprites_CallOnSpriteEvent)(sprite_event_handler handler);
void sg_Sprites_CallOnSpriteEvent(sprite_event_handler handler)
{
	var_sg_Sprites_CallOnSpriteEvent(handler);
}
point2d (*var_sg_Sprites_CenterPoint)(sprite s);
point2d sg_Sprites_CenterPoint(sprite s)
{
	return var_sg_Sprites_CenterPoint(s);
}
sprite (*var_sg_Sprites_CreateBasicSprite)(bitmap layer);
sprite sg_Sprites_CreateBasicSprite(bitmap layer)
{
	return var_sg_Sprites_CreateBasicSprite(layer);
}
sprite (*var_sg_Sprites_CreateBasicSpriteNamed)(const char *name, bitmap layer);
sprite sg_Sprites_CreateBasicSpriteNamed(const char *name, bitmap layer)
{
	return var_sg_Sprites_CreateBasicSpriteNamed(name,layer);
}
void (*var_sg_Sprites_CreateSpritePack)(const char *name);
void sg_Sprites_CreateSpritePack(const char *name)
{
	var_sg_Sprites_CreateSpritePack(name);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimation)(bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimation(bitmap layer, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithAnimation(layer,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimationNamed)(const char *name, bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimationNamed(const char *name, bitmap layer, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithAnimationNamed(name,layer,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithBitmapAndAnimationName)(const char *bitmapName, const char *animationName);
sprite sg_Sprites_CreateSpriteWithBitmapAndAnimationName(const char *bitmapName, const char *animationName)
{
	return var_sg_Sprites_CreateSpriteWithBitmapAndAnimationName(bitmapName,animationName);
}
void (*var_sg_Sprites_CurrentSpritePack)(char *result);
void sg_Sprites_CurrentSpritePack(char *result)
{
	var_sg_Sprites_CurrentSpritePack(result);
}
void (*var_sg_Sprites_DrawAllSprites)();
void sg_Sprites_DrawAllSprites()
{
	var_sg_Sprites_DrawAllSprites();
}
void (*var_sg_Sprites_DrawSpriteOffsetPoint)(sprite s, const point2d *position);
void sg_Sprites_DrawSpriteOffsetPoint(sprite s, const point2d *position)
{
	var_sg_Sprites_DrawSpriteOffsetPoint(s,position);
}
void (*var_sg_Sprites_DrawSpriteOffsetXY)(sprite s, int32_t xOffset, int32_t yOffset);
void sg_Sprites_DrawSpriteOffsetXY(sprite s, int32_t xOffset, int32_t yOffset)
{
	var_sg_Sprites_DrawSpriteOffsetXY(s,xOffset,yOffset);
}
void (*var_sg_Sprites_FreeSprite)(sprite *s);
void sg_Sprites_FreeSprite(sprite *s)
{
	var_sg_Sprites_FreeSprite(s);
}
bool (*var_sg_Sprites_HasSprite)(const char *name);
bool sg_Sprites_HasSprite(const char *name)
{
	return var_sg_Sprites_HasSprite(name);
}
bool (*var_sg_Sprites_HasSpritePack)(const char *name);
bool sg_Sprites_HasSpritePack(const char *name)
{
	return var_sg_Sprites_HasSpritePack(name);
}
void (*var_sg_Sprites_MoveSpritePct)(sprite s, float pct);
void sg_Sprites_MoveSpritePct(sprite s, float pct)
{
	var_sg_Sprites_MoveSpritePct(s,pct);
}
void (*var_sg_Sprites_MoveSpriteTo)(sprite s, int32_t x, int32_t y);
void sg_Sprites_MoveSpriteTo(sprite s, int32_t x, int32_t y)
{
	var_sg_Sprites_MoveSpriteTo(s,x,y);
}
void (*var_sg_Sprites_MoveSpriteVecPct)(sprite s, const vector *distance, float pct);
void sg_Sprites_MoveSpriteVecPct(sprite s, const vector *distance, float pct)
{
	var_sg_Sprites_MoveSpriteVecPct(s,distance,pct);
}
void (*var_sg_Sprites_ReleaseAllSprites)();
void sg_Sprites_ReleaseAllSprites()
{
	var_sg_Sprites_ReleaseAllSprites();
}
void (*var_sg_Sprites_ReleaseSprite)(const char *name);
void sg_Sprites_ReleaseSprite(const char *name)
{
	var_sg_Sprites_ReleaseSprite(name);
}
void (*var_sg_Sprites_ReplayAnimationWithSound)(sprite s, bool withSound);
void sg_Sprites_ReplayAnimationWithSound(sprite s, bool withSound)
{
	var_sg_Sprites_ReplayAnimationWithSound(s,withSound != 0);
}
void (*var_sg_Sprites_SelectSpritePack)(const char *name);
void sg_Sprites_SelectSpritePack(const char *name)
{
	var_sg_Sprites_SelectSpritePack(name);
}
int32_t (*var_sg_Sprites_SpriteAddLayer)(sprite s, bitmap newLayer, const char *layerName);
int32_t sg_Sprites_SpriteAddLayer(sprite s, bitmap newLayer, const char *layerName)
{
	return var_sg_Sprites_SpriteAddLayer(s,newLayer,layerName);
}
void (*var_sg_Sprites_SpriteAddToVelocity)(sprite s, const vector *value);
void sg_Sprites_SpriteAddToVelocity(sprite s, const vector *value)
{
	var_sg_Sprites_SpriteAddToVelocity(s,value);
}
void (*var_sg_Sprites_SpriteAddValue)(sprite s, const char *name);
void sg_Sprites_SpriteAddValue(sprite s, const char *name)
{
	var_sg_Sprites_SpriteAddValue(s,name);
}
void (*var_sg_Sprites_SpriteAddValueWithInitialValue)(sprite s, const char *name, float initVal);
void sg_Sprites_SpriteAddValueWithInitialValue(sprite s, const char *name, float initVal)
{
	var_sg_Sprites_SpriteAddValueWithInitialValue(s,name,initVal);
}
point2d (*var_sg_Sprites_SpriteAnchorPoint)(sprite s);
point2d sg_Sprites_SpriteAnchorPoint(sprite s)
{
	return var_sg_Sprites_SpriteAnchorPoint(s);
}
bool (*var_sg_Sprites_SpriteAnimationHasEnded)(sprite s);
bool sg_Sprites_SpriteAnimationHasEnded(sprite s)
{
	return var_sg_Sprites_SpriteAnimationHasEnded(s);
}
void (*var_sg_Sprites_SpriteAnimationName)(sprite s, char *result);
void sg_Sprites_SpriteAnimationName(sprite s, char *result)
{
	var_sg_Sprites_SpriteAnimationName(s,result);
}
void (*var_sg_Sprites_SpriteBringLayerForward)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteBringLayerForward(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteBringLayerForward(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteBringLayerToFront)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteBringLayerToFront(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteBringLayerToFront(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteCallOnEvent)(sprite s, sprite_event_handler handler);
void sg_Sprites_SpriteCallOnEvent(sprite s, sprite_event_handler handler)
{
	var_sg_Sprites_SpriteCallOnEvent(s,handler);
}
circle (*var_sg_Sprites_SpriteCircle)(sprite s);
circle sg_Sprites_SpriteCircle(sprite s)
{
	return var_sg_Sprites_SpriteCircle(s);
}
bitmap (*var_sg_Sprites_SpriteCollisionBitmap)(sprite s);
bitmap sg_Sprites_SpriteCollisionBitmap(sprite s)
{
	return var_sg_Sprites_SpriteCollisionBitmap(s);
}
circle (*var_sg_Sprites_SpriteCollisionCircle)(sprite s);
circle sg_Sprites_SpriteCollisionCircle(sprite s)
{
	return var_sg_Sprites_SpriteCollisionCircle(s);
}
collision_test_kind (*var_sg_Sprites_SpriteCollisionKind)(sprite s);
collision_test_kind sg_Sprites_SpriteCollisionKind(sprite s)
{
	return var_sg_Sprites_SpriteCollisionKind(s);
}
rectangle (*var_sg_Sprites_SpriteCollisionRectangle)(sprite s);
rectangle sg_Sprites_SpriteCollisionRectangle(sprite s)
{
	return var_sg_Sprites_SpriteCollisionRectangle(s);
}
int32_t (*var_sg_Sprites_SpriteCurrentCell)(sprite s);
int32_t sg_Sprites_SpriteCurrentCell(sprite s)
{
	return var_sg_Sprites_SpriteCurrentCell(s);
}
rectangle (*var_sg_Sprites_SpriteCurrentCellRectangle)(sprite s);
rectangle sg_Sprites_SpriteCurrentCellRectangle(sprite s)
{
	return var_sg_Sprites_SpriteCurrentCellRectangle(s);
}
float (*var_sg_Sprites_SpriteDX)(sprite s);
float sg_Sprites_SpriteDX(sprite s)
{
	return var_sg_Sprites_SpriteDX(s);
}
float (*var_sg_Sprites_SpriteDY)(sprite s);
float sg_Sprites_SpriteDY(sprite s)
{
	return var_sg_Sprites_SpriteDY(s);
}
float (*var_sg_Sprites_SpriteHeading)(sprite s);
float sg_Sprites_SpriteHeading(sprite s)
{
	return var_sg_Sprites_SpriteHeading(s);
}
int32_t (*var_sg_Sprites_SpriteHeight)(sprite s);
int32_t sg_Sprites_SpriteHeight(sprite s)
{
	return var_sg_Sprites_SpriteHeight(s);
}
void (*var_sg_Sprites_SpriteHideLayer)(sprite s, int32_t id);
void sg_Sprites_SpriteHideLayer(sprite s, int32_t id)
{
	var_sg_Sprites_SpriteHideLayer(s,id);
}
void (*var_sg_Sprites_SpriteHideLayerNamed)(sprite s, const char *name);
void sg_Sprites_SpriteHideLayerNamed(sprite s, const char *name)
{
	var_sg_Sprites_SpriteHideLayerNamed(s,name);
}
bitmap (*var_sg_Sprites_SpriteLayerAtIdx)(sprite s, int32_t idx);
bitmap sg_Sprites_SpriteLayerAtIdx(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerAtIdx(s,idx);
}
circle (*var_sg_Sprites_SpriteLayerCircle)(sprite s, int32_t idx);
circle sg_Sprites_SpriteLayerCircle(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerCircle(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerCount)(sprite s);
int32_t sg_Sprites_SpriteLayerCount(sprite s)
{
	return var_sg_Sprites_SpriteLayerCount(s);
}
int32_t (*var_sg_Sprites_SpriteLayerHeight)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerHeight(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerHeight(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerIndex)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerIndex(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerIndex(s,name);
}
void (*var_sg_Sprites_SpriteLayerName)(sprite s, int32_t idx, char *result);
void sg_Sprites_SpriteLayerName(sprite s, int32_t idx, char *result)
{
	var_sg_Sprites_SpriteLayerName(s,idx,result);
}
bitmap (*var_sg_Sprites_SpriteLayerNamed)(sprite s, const char *name);
bitmap sg_Sprites_SpriteLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamed(s,name);
}
circle (*var_sg_Sprites_SpriteLayerNamedCircle)(sprite s, const char *name);
circle sg_Sprites_SpriteLayerNamedCircle(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedCircle(s,name);
}
int32_t (*var_sg_Sprites_SpriteLayerNamedHeight)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedHeight(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedHeight(s,name);
}
rectangle (*var_sg_Sprites_SpriteLayerNamedRectangle)(sprite s, const char *name);
rectangle sg_Sprites_SpriteLayerNamedRectangle(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedRectangle(s,name);
}
int32_t (*var_sg_Sprites_SpriteLayerNamedWidth)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedWidth(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedWidth(s,name);
}
point2d (*var_sg_Sprites_SpriteLayerOffset)(sprite s, int32_t idx);
point2d sg_Sprites_SpriteLayerOffset(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerOffset(s,idx);
}
point2d (*var_sg_Sprites_SpriteLayerOffsetNamed)(sprite s, const char *name);
point2d sg_Sprites_SpriteLayerOffsetNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerOffsetNamed(s,name);
}
rectangle (*var_sg_Sprites_SpriteLayerRectangle)(sprite s, int32_t idx);
rectangle sg_Sprites_SpriteLayerRectangle(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerRectangle(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerWidth)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerWidth(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerWidth(s,idx);
}
matrix2d  (*var_sg_Sprites_SpriteLocationMatrix)(sprite s);
matrix2d  sg_Sprites_SpriteLocationMatrix(sprite s)
{
	return var_sg_Sprites_SpriteLocationMatrix(s);
}
float (*var_sg_Sprites_SpriteMass)(sprite s);
float sg_Sprites_SpriteMass(sprite s)
{
	return var_sg_Sprites_SpriteMass(s);
}
bool (*var_sg_Sprites_SpriteMoveFromAnchorPoint)(sprite s);
bool sg_Sprites_SpriteMoveFromAnchorPoint(sprite s)
{
	return var_sg_Sprites_SpriteMoveFromAnchorPoint(s);
}
void (*var_sg_Sprites_SpriteMoveTo)(sprite s, const point2d *pt, int32_t takingSeconds);
void sg_Sprites_SpriteMoveTo(sprite s, const point2d *pt, int32_t takingSeconds)
{
	var_sg_Sprites_SpriteMoveTo(s,pt,takingSeconds);
}
void (*var_sg_Sprites_SpriteName)(sprite sprt, char *result);
void sg_Sprites_SpriteName(sprite sprt, char *result)
{
	var_sg_Sprites_SpriteName(sprt,result);
}
sprite (*var_sg_Sprites_SpriteNamed)(const char *name);
sprite sg_Sprites_SpriteNamed(const char *name)
{
	return var_sg_Sprites_SpriteNamed(name);
}
bool (*var_sg_Sprites_SpriteOffscreen)(sprite s);
bool sg_Sprites_SpriteOffscreen(sprite s)
{
	return var_sg_Sprites_SpriteOffscreen(s);
}
bool (*var_sg_Sprites_SpriteOnScreenAt)(sprite s, int32_t x, int32_t y);
bool sg_Sprites_SpriteOnScreenAt(sprite s, int32_t x, int32_t y)
{
	return var_sg_Sprites_SpriteOnScreenAt(s,x,y);
}
bool (*var_sg_Sprites_SpriteOnScreenAtPoint)(sprite s, const point2d *pt);
bool sg_Sprites_SpriteOnScreenAtPoint(sprite s, const point2d *pt)
{
	return var_sg_Sprites_SpriteOnScreenAtPoint(s,pt);
}
point2d (*var_sg_Sprites_SpritePosition)(sprite s);
point2d sg_Sprites_SpritePosition(sprite s)
{
	return var_sg_Sprites_SpritePosition(s);
}
void (*var_sg_Sprites_SpriteReplayAnimation)(sprite s);
void sg_Sprites_SpriteReplayAnimation(sprite s)
{
	var_sg_Sprites_SpriteReplayAnimation(s);
}
float (*var_sg_Sprites_SpriteRotation)(sprite s);
float sg_Sprites_SpriteRotation(sprite s)
{
	return var_sg_Sprites_SpriteRotation(s);
}
float (*var_sg_Sprites_SpriteScale)(sprite s);
float sg_Sprites_SpriteScale(sprite s)
{
	return var_sg_Sprites_SpriteScale(s);
}
rectangle (*var_sg_Sprites_SpriteScreenRectangle)(sprite s);
rectangle sg_Sprites_SpriteScreenRectangle(sprite s)
{
	return var_sg_Sprites_SpriteScreenRectangle(s);
}
void (*var_sg_Sprites_SpriteSendLayerBackward)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSendLayerBackward(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteSendLayerBackward(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteSendLayerToBack)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSendLayerToBack(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteSendLayerToBack(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteSetAnchorPoint)(sprite s, point2d pt);
void sg_Sprites_SpriteSetAnchorPoint(sprite s, point2d pt)
{
	var_sg_Sprites_SpriteSetAnchorPoint(s,pt);
}
void (*var_sg_Sprites_SpriteSetCollisionBitmap)(sprite s, bitmap bmp);
void sg_Sprites_SpriteSetCollisionBitmap(sprite s, bitmap bmp)
{
	var_sg_Sprites_SpriteSetCollisionBitmap(s,bmp);
}
void (*var_sg_Sprites_SpriteSetCollisionKind)(sprite s, collision_test_kind value);
void sg_Sprites_SpriteSetCollisionKind(sprite s, collision_test_kind value)
{
	var_sg_Sprites_SpriteSetCollisionKind(s,value);
}
void (*var_sg_Sprites_SpriteSetDX)(sprite s, float value);
void sg_Sprites_SpriteSetDX(sprite s, float value)
{
	var_sg_Sprites_SpriteSetDX(s,value);
}
void (*var_sg_Sprites_SpriteSetDY)(sprite s, float value);
void sg_Sprites_SpriteSetDY(sprite s, float value)
{
	var_sg_Sprites_SpriteSetDY(s,value);
}
void (*var_sg_Sprites_SpriteSetHeading)(sprite s, float value);
void sg_Sprites_SpriteSetHeading(sprite s, float value)
{
	var_sg_Sprites_SpriteSetHeading(s,value);
}
void (*var_sg_Sprites_SpriteSetLayerOffset)(sprite s, int32_t idx, const point2d *value);
void sg_Sprites_SpriteSetLayerOffset(sprite s, int32_t idx, const point2d *value)
{
	var_sg_Sprites_SpriteSetLayerOffset(s,idx,value);
}
void (*var_sg_Sprites_SpriteSetLayerOffsetNamed)(sprite s, const char *name, const point2d *value);
void sg_Sprites_SpriteSetLayerOffsetNamed(sprite s, const char *name, const point2d *value)
{
	var_sg_Sprites_SpriteSetLayerOffsetNamed(s,name,value);
}
void (*var_sg_Sprites_SpriteSetMass)(sprite s, float value);
void sg_Sprites_SpriteSetMass(sprite s, float value)
{
	var_sg_Sprites_SpriteSetMass(s,value);
}
void (*var_sg_Sprites_SpriteSetMoveFromAnchorPoint)(sprite s, bool value);
void sg_Sprites_SpriteSetMoveFromAnchorPoint(sprite s, bool value)
{
	var_sg_Sprites_SpriteSetMoveFromAnchorPoint(s,value != 0);
}
void (*var_sg_Sprites_SpriteSetPosition)(sprite s, const point2d *value);
void sg_Sprites_SpriteSetPosition(sprite s, const point2d *value)
{
	var_sg_Sprites_SpriteSetPosition(s,value);
}
void (*var_sg_Sprites_SpriteSetRotation)(sprite s, float value);
void sg_Sprites_SpriteSetRotation(sprite s, float value)
{
	var_sg_Sprites_SpriteSetRotation(s,value);
}
void (*var_sg_Sprites_SpriteSetScale)(sprite s, float value);
void sg_Sprites_SpriteSetScale(sprite s, float value)
{
	var_sg_Sprites_SpriteSetScale(s,value);
}
void (*var_sg_Sprites_SpriteSetSpeed)(sprite s, float value);
void sg_Sprites_SpriteSetSpeed(sprite s, float value)
{
	var_sg_Sprites_SpriteSetSpeed(s,value);
}
void (*var_sg_Sprites_SpriteSetValue)(sprite s, int32_t idx, float val);
void sg_Sprites_SpriteSetValue(sprite s, int32_t idx, float val)
{
	var_sg_Sprites_SpriteSetValue(s,idx,val);
}
void (*var_sg_Sprites_SpriteSetValueNamed)(sprite s, const char *name, float val);
void sg_Sprites_SpriteSetValueNamed(sprite s, const char *name, float val)
{
	var_sg_Sprites_SpriteSetValueNamed(s,name,val);
}
void (*var_sg_Sprites_SpriteSetVelocity)(sprite s, const vector *value);
void sg_Sprites_SpriteSetVelocity(sprite s, const vector *value)
{
	var_sg_Sprites_SpriteSetVelocity(s,value);
}
void (*var_sg_Sprites_SpriteSetX)(sprite s, float value);
void sg_Sprites_SpriteSetX(sprite s, float value)
{
	var_sg_Sprites_SpriteSetX(s,value);
}
void (*var_sg_Sprites_SpriteSetY)(sprite s, float value);
void sg_Sprites_SpriteSetY(sprite s, float value)
{
	var_sg_Sprites_SpriteSetY(s,value);
}
int32_t (*var_sg_Sprites_SpriteShowLayer)(sprite s, int32_t id);
int32_t sg_Sprites_SpriteShowLayer(sprite s, int32_t id)
{
	return var_sg_Sprites_SpriteShowLayer(s,id);
}
int32_t (*var_sg_Sprites_SpriteShowLayerNamed)(sprite s, const char *name);
int32_t sg_Sprites_SpriteShowLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteShowLayerNamed(s,name);
}
float (*var_sg_Sprites_SpriteSpeed)(sprite s);
float sg_Sprites_SpriteSpeed(sprite s)
{
	return var_sg_Sprites_SpriteSpeed(s);
}
void (*var_sg_Sprites_SpriteStartAnimation)(sprite s, int32_t idx);
void sg_Sprites_SpriteStartAnimation(sprite s, int32_t idx)
{
	var_sg_Sprites_SpriteStartAnimation(s,idx);
}
void (*var_sg_Sprites_SpriteStartAnimationNamed)(sprite s, const char *named);
void sg_Sprites_SpriteStartAnimationNamed(sprite s, const char *named)
{
	var_sg_Sprites_SpriteStartAnimationNamed(s,named);
}
void (*var_sg_Sprites_SpriteStartAnimationNamedWithSound)(sprite s, const char *named, bool withSound);
void sg_Sprites_SpriteStartAnimationNamedWithSound(sprite s, const char *named, bool withSound)
{
	var_sg_Sprites_SpriteStartAnimationNamedWithSound(s,named,withSound != 0);
}
void (*var_sg_Sprites_SpriteStartAnimationWithSound)(sprite s, int32_t idx, bool withSound);
void sg_Sprites_SpriteStartAnimationWithSound(sprite s, int32_t idx, bool withSound)
{
	var_sg_Sprites_SpriteStartAnimationWithSound(s,idx,withSound != 0);
}
void (*var_sg_Sprites_SpriteStopCallingOnEvent)(sprite s, sprite_event_handler handler);
void sg_Sprites_SpriteStopCallingOnEvent(sprite s, sprite_event_handler handler)
{
	var_sg_Sprites_SpriteStopCallingOnEvent(s,handler);
}
void (*var_sg_Sprites_SpriteToggleLayerNamedVisible)(sprite s, const char *name);
void sg_Sprites_SpriteToggleLayerNamedVisible(sprite s, const char *name)
{
	var_sg_Sprites_SpriteToggleLayerNamedVisible(s,name);
}
void (*var_sg_Sprites_SpriteToggleLayerVisible)(sprite s, int32_t id);
void sg_Sprites_SpriteToggleLayerVisible(sprite s, int32_t id)
{
	var_sg_Sprites_SpriteToggleLayerVisible(s,id);
}
float (*var_sg_Sprites_SpriteValue)(sprite s, int32_t index);
float sg_Sprites_SpriteValue(sprite s, int32_t index)
{
	return var_sg_Sprites_SpriteValue(s,index);
}
int32_t (*var_sg_Sprites_SpriteValueCount)(sprite s);
int32_t sg_Sprites_SpriteValueCount(sprite s)
{
	return var_sg_Sprites_SpriteValueCount(s);
}
void (*var_sg_Sprites_SpriteValueName)(sprite s, int32_t idx, char *result);
void sg_Sprites_SpriteValueName(sprite s, int32_t idx, char *result)
{
	var_sg_Sprites_SpriteValueName(s,idx,result);
}
float (*var_sg_Sprites_SpriteValueNamed)(sprite s, const char *name);
float sg_Sprites_SpriteValueNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteValueNamed(s,name);
}
vector (*var_sg_Sprites_SpriteVelocity)(sprite s);
vector sg_Sprites_SpriteVelocity(sprite s)
{
	return var_sg_Sprites_SpriteVelocity(s);
}
int32_t (*var_sg_Sprites_SpriteVisibleIndexOfLayer)(sprite s, int32_t id);
int32_t sg_Sprites_SpriteVisibleIndexOfLayer(sprite s, int32_t id)
{
	return var_sg_Sprites_SpriteVisibleIndexOfLayer(s,id);
}
int32_t (*var_sg_Sprites_SpriteVisibleIndexOfLayerNamed)(sprite s, const char *name);
int32_t sg_Sprites_SpriteVisibleIndexOfLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteVisibleIndexOfLayerNamed(s,name);
}
int32_t (*var_sg_Sprites_SpriteVisibleLayer)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteVisibleLayer(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteVisibleLayer(s,idx);
}
int32_t (*var_sg_Sprites_SpriteVisibleLayerCount)(sprite s);
int32_t sg_Sprites_SpriteVisibleLayerCount(sprite s)
{
	return var_sg_Sprites_SpriteVisibleLayerCount(s);
}
int32_t (*var_sg_Sprites_SpriteVisibleLayerId)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteVisibleLayerId(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteVisibleLayerId(s,idx);
}
int32_t (*var_sg_Sprites_SpriteWidth)(sprite s);
int32_t sg_Sprites_SpriteWidth(sprite s)
{
	return var_sg_Sprites_SpriteWidth(s);
}
float (*var_sg_Sprites_SpriteX)(sprite s);
float sg_Sprites_SpriteX(sprite s)
{
	return var_sg_Sprites_SpriteX(s);
}
float (*var_sg_Sprites_SpriteY)(sprite s);
float sg_Sprites_SpriteY(sprite s)
{
	return var_sg_Sprites_SpriteY(s);
}
void (*var_sg_Sprites_StopCallingOnSpriteEvent)(sprite_event_handler handler);
void sg_Sprites_StopCallingOnSpriteEvent(sprite_event_handler handler)
{
	var_sg_Sprites_StopCallingOnSpriteEvent(handler);
}
void (*var_sg_Sprites_UpdateAllSprites)();
void sg_Sprites_UpdateAllSprites()
{
	var_sg_Sprites_UpdateAllSprites();
}
void (*var_sg_Sprites_UpdateAllSpritesPct)(float pct);
void sg_Sprites_UpdateAllSpritesPct(float pct)
{
	var_sg_Sprites_UpdateAllSpritesPct(pct);
}
void (*var_sg_Sprites_UpdateSpriteAnimationPctWithSound)(sprite s, float pct, bool withSound);
void sg_Sprites_UpdateSpriteAnimationPctWithSound(sprite s, float pct, bool withSound)
{
	var_sg_Sprites_UpdateSpriteAnimationPctWithSound(s,pct,withSound != 0);
}
void (*var_sg_Sprites_UpdateSpritePctWithSound)(sprite s, float pct, bool withSound);
void sg_Sprites_UpdateSpritePctWithSound(sprite s, float pct, bool withSound)
{
	var_sg_Sprites_UpdateSpritePctWithSound(s,pct,withSound != 0);
}
vector (*var_sg_Sprites_VectorFromCenterSpriteToPoint)(sprite s, const point2d *pt);
vector sg_Sprites_VectorFromCenterSpriteToPoint(sprite s, const point2d *pt)
{
	return var_sg_Sprites_VectorFromCenterSpriteToPoint(s,pt);
}
vector (*var_sg_Sprites_VectorFromTo)(sprite s1, sprite s2);
vector sg_Sprites_VectorFromTo(sprite s1, sprite s2)
{
	return var_sg_Sprites_VectorFromTo(s1,s2);
}
void (*var_sg_Text_DrawFramerateWithSimpleFont)(float x, float y);
void sg_Text_DrawFramerateWithSimpleFont(float x, float y)
{
	var_sg_Text_DrawFramerateWithSimpleFont(x,y);
}
void (*var_sg_Text_DrawSimpleText)(const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleText(const char *theText, color textColor, float x, float y)
{
	var_sg_Text_DrawSimpleText(theText,textColor,x,y);
}
void (*var_sg_Text_DrawSimpleTextOpts)(const char *theText, color textColor, float x, float y, const drawing_options *opts);
void sg_Text_DrawSimpleTextOpts(const char *theText, color textColor, float x, float y, const drawing_options *opts)
{
	var_sg_Text_DrawSimpleTextOpts(theText,textColor,x,y,opts);
}
void (*var_sg_Text_DrawText)(const char *theText, color textColor, font theFont, float x, float y);
void sg_Text_DrawText(const char *theText, color textColor, font theFont, float x, float y)
{
	var_sg_Text_DrawText(theText,textColor,theFont,x,y);
}
void (*var_sg_Text_DrawTextInRect)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area);
void sg_Text_DrawTextInRect(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area)
{
	var_sg_Text_DrawTextInRect(theText,textColor,backColor,theFont,align,area);
}
void (*var_sg_Text_DrawTextInRectOpts)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area, const drawing_options *opts);
void sg_Text_DrawTextInRectOpts(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area, const drawing_options *opts)
{
	var_sg_Text_DrawTextInRectOpts(theText,textColor,backColor,theFont,align,area,opts);
}
void (*var_sg_Text_DrawTextInRectWithFontNamed)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area);
void sg_Text_DrawTextInRectWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area)
{
	var_sg_Text_DrawTextInRectWithFontNamed(theText,textColor,backColor,name,align,area);
}
void (*var_sg_Text_DrawTextInRectWithFontNamedAndSize)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area);
void sg_Text_DrawTextInRectWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area)
{
	var_sg_Text_DrawTextInRectWithFontNamedAndSize(theText,textColor,backColor,name,size,align,area);
}
void (*var_sg_Text_DrawTextInRectWithFontNamedAndSizeOpts)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area, const drawing_options *opts);
void sg_Text_DrawTextInRectWithFontNamedAndSizeOpts(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area, const drawing_options *opts)
{
	var_sg_Text_DrawTextInRectWithFontNamedAndSizeOpts(theText,textColor,backColor,name,size,align,area,opts);
}
void (*var_sg_Text_DrawTextInRectWithFontNamedOpts)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area, const drawing_options *opts);
void sg_Text_DrawTextInRectWithFontNamedOpts(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area, const drawing_options *opts)
{
	var_sg_Text_DrawTextInRectWithFontNamedOpts(theText,textColor,backColor,name,align,area,opts);
}
void (*var_sg_Text_DrawTextOpts)(const char *theText, color textColor, font theFont, float x, float y, const drawing_options *opts);
void sg_Text_DrawTextOpts(const char *theText, color textColor, font theFont, float x, float y, const drawing_options *opts)
{
	var_sg_Text_DrawTextOpts(theText,textColor,theFont,x,y,opts);
}
bitmap (*var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize)(font font, const char *str, color clrFg, color backgroundColor);
bitmap sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font font, const char *str, color clrFg, color backgroundColor)
{
	return var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font,str,clrFg,backgroundColor);
}
void (*var_sg_Text_DrawTextWithFontNamed)(const char *theText, color textColor, const char *name, float x, float y);
void sg_Text_DrawTextWithFontNamed(const char *theText, color textColor, const char *name, float x, float y)
{
	var_sg_Text_DrawTextWithFontNamed(theText,textColor,name,x,y);
}
void (*var_sg_Text_DrawTextWithFontNamedAndSizeOpts)(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options *opts);
void sg_Text_DrawTextWithFontNamedAndSizeOpts(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options *opts)
{
	var_sg_Text_DrawTextWithFontNamedAndSizeOpts(theText,textColor,name,size,x,y,opts);
}
void (*var_sg_Text_DrawTextWithFontNamedOpts)(const char *theText, color textColor, const char *name, float x, float y, const drawing_options *opts);
void sg_Text_DrawTextWithFontNamedOpts(const char *theText, color textColor, const char *name, float x, float y, const drawing_options *opts)
{
	var_sg_Text_DrawTextWithFontNamedOpts(theText,textColor,name,x,y,opts);
}
void (*var_sg_Text_DrawTextWithFontNamedSize)(const char *theText, color textColor, const char *name, int32_t size, float x, float y);
void sg_Text_DrawTextWithFontNamedSize(const char *theText, color textColor, const char *name, int32_t size, float x, float y)
{
	var_sg_Text_DrawTextWithFontNamedSize(theText,textColor,name,size,x,y);
}
font_style (*var_sg_Text_FontFontStyle)(font font);
font_style sg_Text_FontFontStyle(font font)
{
	return var_sg_Text_FontFontStyle(font);
}
void (*var_sg_Text_FontNameFor)(const char *fontName, int32_t size, char *result);
void sg_Text_FontNameFor(const char *fontName, int32_t size, char *result)
{
	var_sg_Text_FontNameFor(fontName,size,result);
}
font (*var_sg_Text_FontNamed)(const char *name);
font sg_Text_FontNamed(const char *name)
{
	return var_sg_Text_FontNamed(name);
}
font (*var_sg_Text_FontNamedWithSize)(const char *name, int32_t size);
font sg_Text_FontNamedWithSize(const char *name, int32_t size)
{
	return var_sg_Text_FontNamedWithSize(name,size);
}
void (*var_sg_Text_FontSetStyle)(font font, font_style value);
void sg_Text_FontSetStyle(font font, font_style value)
{
	var_sg_Text_FontSetStyle(font,value);
}
void (*var_sg_Text_FreeFont)(font *fontToFree);
void sg_Text_FreeFont(font *fontToFree)
{
	var_sg_Text_FreeFont(fontToFree);
}
bool (*var_sg_Text_HasFont)(const char *name);
bool sg_Text_HasFont(const char *name)
{
	return var_sg_Text_HasFont(name);
}
font (*var_sg_Text_LoadFont)(const char *fontName, int32_t size);
font sg_Text_LoadFont(const char *fontName, int32_t size)
{
	return var_sg_Text_LoadFont(fontName,size);
}
font (*var_sg_Text_LoadFontNamed)(const char *name, const char *filename, int32_t size);
font sg_Text_LoadFontNamed(const char *name, const char *filename, int32_t size)
{
	return var_sg_Text_LoadFontNamed(name,filename,size);
}
void (*var_sg_Text_ReleaseAllFonts)();
void sg_Text_ReleaseAllFonts()
{
	var_sg_Text_ReleaseAllFonts();
}
void (*var_sg_Text_ReleaseFont)(const char *name);
void sg_Text_ReleaseFont(const char *name)
{
	var_sg_Text_ReleaseFont(name);
}
font_alignment (*var_sg_Text_TextAlignmentFrom)(const char *str);
font_alignment sg_Text_TextAlignmentFrom(const char *str)
{
	return var_sg_Text_TextAlignmentFrom(str);
}
int32_t (*var_sg_Text_TextHeight)(font theFont, const char *theText);
int32_t sg_Text_TextHeight(font theFont, const char *theText)
{
	return var_sg_Text_TextHeight(theFont,theText);
}
int32_t (*var_sg_Text_TextWidth)(font theFont, const char *theText);
int32_t sg_Text_TextWidth(font theFont, const char *theText)
{
	return var_sg_Text_TextWidth(theFont,theText);
}
timer (*var_sg_Timers_CreateTimer)();
timer sg_Timers_CreateTimer()
{
	return var_sg_Timers_CreateTimer();
}
timer (*var_sg_Timers_CreateTimerNamed)(const char *name);
timer sg_Timers_CreateTimerNamed(const char *name)
{
	return var_sg_Timers_CreateTimerNamed(name);
}
void (*var_sg_Timers_FreeTimer)(timer *toFree);
void sg_Timers_FreeTimer(timer *toFree)
{
	var_sg_Timers_FreeTimer(toFree);
}
void (*var_sg_Timers_PauseTimer)(timer toPause);
void sg_Timers_PauseTimer(timer toPause)
{
	var_sg_Timers_PauseTimer(toPause);
}
void (*var_sg_Timers_PauseTimerNamed)(const char *name);
void sg_Timers_PauseTimerNamed(const char *name)
{
	var_sg_Timers_PauseTimerNamed(name);
}
void (*var_sg_Timers_ReleaseAllTimers)();
void sg_Timers_ReleaseAllTimers()
{
	var_sg_Timers_ReleaseAllTimers();
}
void (*var_sg_Timers_ReleaseTimer)(const char *name);
void sg_Timers_ReleaseTimer(const char *name)
{
	var_sg_Timers_ReleaseTimer(name);
}
void (*var_sg_Timers_ResetTimer)(timer tmr);
void sg_Timers_ResetTimer(timer tmr)
{
	var_sg_Timers_ResetTimer(tmr);
}
void (*var_sg_Timers_ResetTimerNamed)(const char *name);
void sg_Timers_ResetTimerNamed(const char *name)
{
	var_sg_Timers_ResetTimerNamed(name);
}
void (*var_sg_Timers_ResumeTimer)(timer toUnpause);
void sg_Timers_ResumeTimer(timer toUnpause)
{
	var_sg_Timers_ResumeTimer(toUnpause);
}
void (*var_sg_Timers_ResumeTimerNamed)(const char *name);
void sg_Timers_ResumeTimerNamed(const char *name)
{
	var_sg_Timers_ResumeTimerNamed(name);
}
void (*var_sg_Timers_StartTimer)(timer toStart);
void sg_Timers_StartTimer(timer toStart)
{
	var_sg_Timers_StartTimer(toStart);
}
void (*var_sg_Timers_StartTimerNamed)(const char *name);
void sg_Timers_StartTimerNamed(const char *name)
{
	var_sg_Timers_StartTimerNamed(name);
}
void (*var_sg_Timers_StopTimer)(timer toStop);
void sg_Timers_StopTimer(timer toStop)
{
	var_sg_Timers_StopTimer(toStop);
}
void (*var_sg_Timers_StopTimerNamed)(const char *name);
void sg_Timers_StopTimerNamed(const char *name)
{
	var_sg_Timers_StopTimerNamed(name);
}
timer (*var_sg_Timers_TimerNamed)(const char *name);
timer sg_Timers_TimerNamed(const char *name)
{
	return var_sg_Timers_TimerNamed(name);
}
uint32_t (*var_sg_Timers_TimerTicks)(timer toGet);
uint32_t sg_Timers_TimerTicks(timer toGet)
{
	return var_sg_Timers_TimerTicks(toGet);
}
uint32_t (*var_sg_Timers_TimerTicksNamed)(const char *name);
uint32_t sg_Timers_TimerTicksNamed(const char *name)
{
	return var_sg_Timers_TimerTicksNamed(name);
}
void (*var_sg_UserInterface_ActivatePanel)(panel p);
void sg_UserInterface_ActivatePanel(panel p)
{
	var_sg_UserInterface_ActivatePanel(p);
}
int32_t (*var_sg_UserInterface_ActiveRadioButtonIndexFromID)(const char *id);
int32_t sg_UserInterface_ActiveRadioButtonIndexFromID(const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonIndexFromID(id);
}
int32_t (*var_sg_UserInterface_ActiveRadioButtonIndexOnPanel)(panel pnl, const char *id);
int32_t sg_UserInterface_ActiveRadioButtonIndexOnPanel(panel pnl, const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonIndexOnPanel(pnl,id);
}
region (*var_sg_UserInterface_ActiveRadioButtonOnPanelWithId)(panel pnl, const char *id);
region sg_UserInterface_ActiveRadioButtonOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonOnPanelWithId(pnl,id);
}
region (*var_sg_UserInterface_ActiveRadioButtonWithID)(const char *id);
region sg_UserInterface_ActiveRadioButtonWithID(const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonWithID(id);
}
panel (*var_sg_UserInterface_ActiveTextBoxParent)();
panel sg_UserInterface_ActiveTextBoxParent()
{
	return var_sg_UserInterface_ActiveTextBoxParent();
}
int32_t (*var_sg_UserInterface_ActiveTextIndex)();
int32_t sg_UserInterface_ActiveTextIndex()
{
	return var_sg_UserInterface_ActiveTextIndex();
}
void (*var_sg_UserInterface_AddItemOnPanelWithIdByText)(panel pnl, const char *id, const char *text);
void sg_UserInterface_AddItemOnPanelWithIdByText(panel pnl, const char *id, const char *text)
{
	var_sg_UserInterface_AddItemOnPanelWithIdByText(pnl,id,text);
}
void (*var_sg_UserInterface_AddItemWithIdByBitmap)(const char *id, bitmap img);
void sg_UserInterface_AddItemWithIdByBitmap(const char *id, bitmap img)
{
	var_sg_UserInterface_AddItemWithIdByBitmap(id,img);
}
void (*var_sg_UserInterface_AddItemWithIdByText)(const char *id, const char *text);
void sg_UserInterface_AddItemWithIdByText(const char *id, const char *text)
{
	var_sg_UserInterface_AddItemWithIdByText(id,text);
}
bool (*var_sg_UserInterface_ButtonClicked)(region r);
bool sg_UserInterface_ButtonClicked(region r)
{
	return var_sg_UserInterface_ButtonClicked(r);
}
bool (*var_sg_UserInterface_ButtonNamedClicked)(const char *name);
bool sg_UserInterface_ButtonNamedClicked(const char *name)
{
	return var_sg_UserInterface_ButtonNamedClicked(name);
}
void (*var_sg_UserInterface_CheckBoxSetStateWithId)(const char *id, bool val);
void sg_UserInterface_CheckBoxSetStateWithId(const char *id, bool val)
{
	var_sg_UserInterface_CheckBoxSetStateWithId(id,val != 0);
}
void (*var_sg_UserInterface_CheckboxSetStateFromRegion)(region r, bool val);
void sg_UserInterface_CheckboxSetStateFromRegion(region r, bool val)
{
	var_sg_UserInterface_CheckboxSetStateFromRegion(r,val != 0);
}
void (*var_sg_UserInterface_CheckboxSetStateOnPanel)(panel pnl, const char *id, bool val);
void sg_UserInterface_CheckboxSetStateOnPanel(panel pnl, const char *id, bool val)
{
	var_sg_UserInterface_CheckboxSetStateOnPanel(pnl,id,val != 0);
}
bool (*var_sg_UserInterface_CheckboxState)(const char *s);
bool sg_UserInterface_CheckboxState(const char *s)
{
	return var_sg_UserInterface_CheckboxState(s);
}
bool (*var_sg_UserInterface_CheckboxStateFromRegion)(region r);
bool sg_UserInterface_CheckboxStateFromRegion(region r)
{
	return var_sg_UserInterface_CheckboxStateFromRegion(r);
}
bool (*var_sg_UserInterface_CheckboxStateOnPanel)(panel p, const char *s);
bool sg_UserInterface_CheckboxStateOnPanel(panel p, const char *s)
{
	return var_sg_UserInterface_CheckboxStateOnPanel(p,s);
}
void (*var_sg_UserInterface_DeactivatePanel)(panel p);
void sg_UserInterface_DeactivatePanel(panel p)
{
	var_sg_UserInterface_DeactivatePanel(p);
}
void (*var_sg_UserInterface_DeactivateTextBox)();
void sg_UserInterface_DeactivateTextBox()
{
	var_sg_UserInterface_DeactivateTextBox();
}
bool (*var_sg_UserInterface_DialogCancelled)();
bool sg_UserInterface_DialogCancelled()
{
	return var_sg_UserInterface_DialogCancelled();
}
bool (*var_sg_UserInterface_DialogComplete)();
bool sg_UserInterface_DialogComplete()
{
	return var_sg_UserInterface_DialogComplete();
}
void (*var_sg_UserInterface_DialogPath)(char *result);
void sg_UserInterface_DialogPath(char *result)
{
	var_sg_UserInterface_DialogPath(result);
}
void (*var_sg_UserInterface_DialogSetPath)(const char *fullname);
void sg_UserInterface_DialogSetPath(const char *fullname)
{
	var_sg_UserInterface_DialogSetPath(fullname);
}
void (*var_sg_UserInterface_DrawGUIAsVectors)(bool b);
void sg_UserInterface_DrawGUIAsVectors(bool b)
{
	var_sg_UserInterface_DrawGUIAsVectors(b != 0);
}
void (*var_sg_UserInterface_DrawInterface)();
void sg_UserInterface_DrawInterface()
{
	var_sg_UserInterface_DrawInterface();
}
void (*var_sg_UserInterface_FinishReadingText)();
void sg_UserInterface_FinishReadingText()
{
	var_sg_UserInterface_FinishReadingText();
}
void (*var_sg_UserInterface_FreePanel)(panel *pnl);
void sg_UserInterface_FreePanel(panel *pnl)
{
	var_sg_UserInterface_FreePanel(pnl);
}
bool (*var_sg_UserInterface_GUIClicked)();
bool sg_UserInterface_GUIClicked()
{
	return var_sg_UserInterface_GUIClicked();
}
void (*var_sg_UserInterface_GUISetActiveTextboxFromRegion)(region r);
void sg_UserInterface_GUISetActiveTextboxFromRegion(region r)
{
	var_sg_UserInterface_GUISetActiveTextboxFromRegion(r);
}
void (*var_sg_UserInterface_GUISetActiveTextboxNamed)(const char *name);
void sg_UserInterface_GUISetActiveTextboxNamed(const char *name)
{
	var_sg_UserInterface_GUISetActiveTextboxNamed(name);
}
void (*var_sg_UserInterface_GUISetBackgroundColor)(color c);
void sg_UserInterface_GUISetBackgroundColor(color c)
{
	var_sg_UserInterface_GUISetBackgroundColor(c);
}
void (*var_sg_UserInterface_GUISetBackgroundColorInactive)(color c);
void sg_UserInterface_GUISetBackgroundColorInactive(color c)
{
	var_sg_UserInterface_GUISetBackgroundColorInactive(c);
}
void (*var_sg_UserInterface_GUISetForegroundColor)(color c);
void sg_UserInterface_GUISetForegroundColor(color c)
{
	var_sg_UserInterface_GUISetForegroundColor(c);
}
void (*var_sg_UserInterface_GUISetForegroundColorInactive)(color c);
void sg_UserInterface_GUISetForegroundColorInactive(color c)
{
	var_sg_UserInterface_GUISetForegroundColorInactive(c);
}
bool (*var_sg_UserInterface_GUITextEntryComplete)();
bool sg_UserInterface_GUITextEntryComplete()
{
	return var_sg_UserInterface_GUITextEntryComplete();
}
region (*var_sg_UserInterface_GlobalRegionWithID)(const char *ID);
region sg_UserInterface_GlobalRegionWithID(const char *ID)
{
	return var_sg_UserInterface_GlobalRegionWithID(ID);
}
bool (*var_sg_UserInterface_HasPanel)(const char *name);
bool sg_UserInterface_HasPanel(const char *name)
{
	return var_sg_UserInterface_HasPanel(name);
}
void (*var_sg_UserInterface_HidePanel)(panel p);
void sg_UserInterface_HidePanel(panel p)
{
	var_sg_UserInterface_HidePanel(p);
}
void (*var_sg_UserInterface_HidePanelNamed)(const char *name);
void sg_UserInterface_HidePanelNamed(const char *name)
{
	var_sg_UserInterface_HidePanelNamed(name);
}
int32_t (*var_sg_UserInterface_IndexOfLastUpdatedTextBox)();
int32_t sg_UserInterface_IndexOfLastUpdatedTextBox()
{
	return var_sg_UserInterface_IndexOfLastUpdatedTextBox();
}
bool (*var_sg_UserInterface_IsDragging)();
bool sg_UserInterface_IsDragging()
{
	return var_sg_UserInterface_IsDragging();
}
void (*var_sg_UserInterface_LabelFromRegionSetText)(region r, const char *newString);
void sg_UserInterface_LabelFromRegionSetText(region r, const char *newString)
{
	var_sg_UserInterface_LabelFromRegionSetText(r,newString);
}
void (*var_sg_UserInterface_LabelOnPanelWithIdSetText)(panel pnl, const char *id, const char *newString);
void sg_UserInterface_LabelOnPanelWithIdSetText(panel pnl, const char *id, const char *newString)
{
	var_sg_UserInterface_LabelOnPanelWithIdSetText(pnl,id,newString);
}
void (*var_sg_UserInterface_LabelTextFromRegion)(region r, char *result);
void sg_UserInterface_LabelTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_LabelTextFromRegion(r,result);
}
void (*var_sg_UserInterface_LabelTextOnPanelWithId)(panel pnl, const char *id, char *result);
void sg_UserInterface_LabelTextOnPanelWithId(panel pnl, const char *id, char *result)
{
	var_sg_UserInterface_LabelTextOnPanelWithId(pnl,id,result);
}
void (*var_sg_UserInterface_LabelTextWithId)(const char *id, char *result);
void sg_UserInterface_LabelTextWithId(const char *id, char *result)
{
	var_sg_UserInterface_LabelTextWithId(id,result);
}
void (*var_sg_UserInterface_LabelWithIdSetText)(const char *id, const char *newString);
void sg_UserInterface_LabelWithIdSetText(const char *id, const char *newString)
{
	var_sg_UserInterface_LabelWithIdSetText(id,newString);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexFromRegion)(region r);
int32_t sg_UserInterface_ListActiveItemIndexFromRegion(region r)
{
	return var_sg_UserInterface_ListActiveItemIndexFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexOnPanelWithId)(panel pnl, const char *id);
int32_t sg_UserInterface_ListActiveItemIndexOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ListActiveItemIndexOnPanelWithId(pnl,id);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexWithId)(const char *id);
int32_t sg_UserInterface_ListActiveItemIndexWithId(const char *id)
{
	return var_sg_UserInterface_ListActiveItemIndexWithId(id);
}
void (*var_sg_UserInterface_ListActiveItemTextFromRegion)(region r, char *result);
void sg_UserInterface_ListActiveItemTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_ListActiveItemTextFromRegion(r,result);
}
void (*var_sg_UserInterface_ListActiveItemTextOnPanelWithId)(panel pnl, const char *ID, char *result);
void sg_UserInterface_ListActiveItemTextOnPanelWithId(panel pnl, const char *ID, char *result)
{
	var_sg_UserInterface_ListActiveItemTextOnPanelWithId(pnl,ID,result);
}
void (*var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion)(region r, bitmap img, const char *text);
void sg_UserInterface_ListAddBitmapAndTextItemFromRegion(region r, bitmap img, const char *text)
{
	var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion(r,img,text);
}
void (*var_sg_UserInterface_ListAddItemBitmap)(panel pnl, const char *id, bitmap img);
void sg_UserInterface_ListAddItemBitmap(panel pnl, const char *id, bitmap img)
{
	var_sg_UserInterface_ListAddItemBitmap(pnl,id,img);
}
void (*var_sg_UserInterface_ListAddItemByBitmapFromRegion)(region r, bitmap img);
void sg_UserInterface_ListAddItemByBitmapFromRegion(region r, bitmap img)
{
	var_sg_UserInterface_ListAddItemByBitmapFromRegion(r,img);
}
void (*var_sg_UserInterface_ListAddItemByTextFromRegion)(region r, const char *text);
void sg_UserInterface_ListAddItemByTextFromRegion(region r, const char *text)
{
	var_sg_UserInterface_ListAddItemByTextFromRegion(r,text);
}
void (*var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion)(region r, bitmap img, int32_t cell, const char *text);
void sg_UserInterface_ListAddItemWithCellAndTextFromRegion(region r, bitmap img, int32_t cell, const char *text)
{
	var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion(r,img,cell,text);
}
void (*var_sg_UserInterface_ListAddItemWithCellFromRegion)(region r, bitmap img, int32_t cell);
void sg_UserInterface_ListAddItemWithCellFromRegion(region r, bitmap img, int32_t cell)
{
	var_sg_UserInterface_ListAddItemWithCellFromRegion(r,img,cell);
}
void (*var_sg_UserInterface_ListClearItemsFromRegion)(region r);
void sg_UserInterface_ListClearItemsFromRegion(region r)
{
	var_sg_UserInterface_ListClearItemsFromRegion(r);
}
void (*var_sg_UserInterface_ListClearItemsGivenPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_ListClearItemsGivenPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_ListClearItemsGivenPanelWithId(pnl,id);
}
int32_t (*var_sg_UserInterface_ListItemCountFromRegion)(region r);
int32_t sg_UserInterface_ListItemCountFromRegion(region r)
{
	return var_sg_UserInterface_ListItemCountFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListItemCountOnPanelWithId)(panel pnl, const char *id);
int32_t sg_UserInterface_ListItemCountOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ListItemCountOnPanelWithId(pnl,id);
}
int32_t (*var_sg_UserInterface_ListItemCountWithId)(const char *id);
int32_t sg_UserInterface_ListItemCountWithId(const char *id)
{
	return var_sg_UserInterface_ListItemCountWithId(id);
}
void (*var_sg_UserInterface_ListItemTextFromId)(const char *id, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromId(const char *id, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextFromId(id,idx,result);
}
void (*var_sg_UserInterface_ListItemTextFromRegion)(region r, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromRegion(region r, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextFromRegion(r,idx,result);
}
void (*var_sg_UserInterface_ListItemTextOnPanelWithId)(panel pnl, const char *id, int32_t idx, char *result);
void sg_UserInterface_ListItemTextOnPanelWithId(panel pnl, const char *id, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextOnPanelWithId(pnl,id,idx,result);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem)(panel pnl, const char *id, bitmap img, const char *text);
void sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(panel pnl, const char *id, bitmap img, const char *text)
{
	var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(pnl,id,img,text);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell)(panel pnl, const char *id, bitmap img, int32_t cell);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCell(panel pnl, const char *id, bitmap img, int32_t cell)
{
	var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell(pnl,id,img,cell);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText)(panel pnl, const char *id, bitmap img, int32_t cell, const char *text);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(panel pnl, const char *id, bitmap img, int32_t cell, const char *text)
{
	var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(pnl,id,img,cell,text);
}
void (*var_sg_UserInterface_ListRemoveActiveItemFromId)(const char *id);
void sg_UserInterface_ListRemoveActiveItemFromId(const char *id)
{
	var_sg_UserInterface_ListRemoveActiveItemFromId(id);
}
void (*var_sg_UserInterface_ListRemoveActiveItemFromRegion)(region r);
void sg_UserInterface_ListRemoveActiveItemFromRegion(region r)
{
	var_sg_UserInterface_ListRemoveActiveItemFromRegion(r);
}
void (*var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_ListRemoveActiveItemOnPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId(pnl,id);
}
void (*var_sg_UserInterface_ListRemoveItemFromWithId)(const char *id, int32_t idx);
void sg_UserInterface_ListRemoveItemFromWithId(const char *id, int32_t idx)
{
	var_sg_UserInterface_ListRemoveItemFromWithId(id,idx);
}
void (*var_sg_UserInterface_ListRemoveItemOnPanelWithId)(panel pnl, const char *id, int32_t idx);
void sg_UserInterface_ListRemoveItemOnPanelWithId(panel pnl, const char *id, int32_t idx)
{
	var_sg_UserInterface_ListRemoveItemOnPanelWithId(pnl,id,idx);
}
void (*var_sg_UserInterface_ListSet)(panel pnl, const char *id, int32_t idx);
void sg_UserInterface_ListSet(panel pnl, const char *id, int32_t idx)
{
	var_sg_UserInterface_ListSet(pnl,id,idx);
}
void (*var_sg_UserInterface_ListSetActiveItemIndexWithId)(const char *id, int32_t idx);
void sg_UserInterface_ListSetActiveItemIndexWithId(const char *id, int32_t idx)
{
	var_sg_UserInterface_ListSetActiveItemIndexWithId(id,idx);
}
void (*var_sg_UserInterface_ListSetStartingAtFromRegion)(region r, int32_t idx);
void sg_UserInterface_ListSetStartingAtFromRegion(region r, int32_t idx)
{
	var_sg_UserInterface_ListSetStartingAtFromRegion(r,idx);
}
int32_t (*var_sg_UserInterface_ListStartingAtFromRegion)(region r);
int32_t sg_UserInterface_ListStartingAtFromRegion(region r)
{
	return var_sg_UserInterface_ListStartingAtFromRegion(r);
}
void (*var_sg_UserInterface_ListWithIDAddBitmapWithTextItem)(const char *id, bitmap img, const char *text);
void sg_UserInterface_ListWithIDAddBitmapWithTextItem(const char *id, bitmap img, const char *text)
{
	var_sg_UserInterface_ListWithIDAddBitmapWithTextItem(id,img,text);
}
void (*var_sg_UserInterface_ListWithIdActiveItemText)(const char *ID, char *result);
void sg_UserInterface_ListWithIdActiveItemText(const char *ID, char *result)
{
	var_sg_UserInterface_ListWithIdActiveItemText(ID,result);
}
void (*var_sg_UserInterface_ListWithIdAddItemWithCell)(const char *id, bitmap img, int32_t cell);
void sg_UserInterface_ListWithIdAddItemWithCell(const char *id, bitmap img, int32_t cell)
{
	var_sg_UserInterface_ListWithIdAddItemWithCell(id,img,cell);
}
void (*var_sg_UserInterface_ListWithIdAddItemWithCellAndText)(const char *id, bitmap img, int32_t cell, const char *text);
void sg_UserInterface_ListWithIdAddItemWithCellAndText(const char *id, bitmap img, int32_t cell, const char *text)
{
	var_sg_UserInterface_ListWithIdAddItemWithCellAndText(id,img,cell,text);
}
void (*var_sg_UserInterface_ListclearItemsWithId)(const char *id);
void sg_UserInterface_ListclearItemsWithId(const char *id)
{
	var_sg_UserInterface_ListclearItemsWithId(id);
}
panel (*var_sg_UserInterface_LoadPanel)(const char *filename);
panel sg_UserInterface_LoadPanel(const char *filename)
{
	return var_sg_UserInterface_LoadPanel(filename);
}
panel (*var_sg_UserInterface_LoadPanelNamed)(const char *name, const char *filename);
panel sg_UserInterface_LoadPanelNamed(const char *name, const char *filename)
{
	return var_sg_UserInterface_LoadPanelNamed(name,filename);
}
void (*var_sg_UserInterface_MovePanel)(panel p, const vector *mvmt);
void sg_UserInterface_MovePanel(panel p, const vector *mvmt)
{
	var_sg_UserInterface_MovePanel(p,mvmt);
}
panel (*var_sg_UserInterface_NewPanel)(const char *pnlName);
panel sg_UserInterface_NewPanel(const char *pnlName)
{
	return var_sg_UserInterface_NewPanel(pnlName);
}
bool (*var_sg_UserInterface_PanelActive)(panel pnl);
bool sg_UserInterface_PanelActive(panel pnl)
{
	return var_sg_UserInterface_PanelActive(pnl);
}
panel (*var_sg_UserInterface_PanelAtPoint)(const point2d *pt);
panel sg_UserInterface_PanelAtPoint(const point2d *pt)
{
	return var_sg_UserInterface_PanelAtPoint(pt);
}
panel (*var_sg_UserInterface_PanelClicked)();
panel sg_UserInterface_PanelClicked()
{
	return var_sg_UserInterface_PanelClicked();
}
bool (*var_sg_UserInterface_PanelDraggable)(panel p);
bool sg_UserInterface_PanelDraggable(panel p)
{
	return var_sg_UserInterface_PanelDraggable(p);
}
void (*var_sg_UserInterface_PanelFilename)(panel pnl, char *result);
void sg_UserInterface_PanelFilename(panel pnl, char *result)
{
	var_sg_UserInterface_PanelFilename(pnl,result);
}
int32_t (*var_sg_UserInterface_PanelHeight)(panel p);
int32_t sg_UserInterface_PanelHeight(panel p)
{
	return var_sg_UserInterface_PanelHeight(p);
}
bool (*var_sg_UserInterface_PanelIsDragging)(panel pnl);
bool sg_UserInterface_PanelIsDragging(panel pnl)
{
	return var_sg_UserInterface_PanelIsDragging(pnl);
}
void (*var_sg_UserInterface_PanelName)(panel pnl, char *result);
void sg_UserInterface_PanelName(panel pnl, char *result)
{
	var_sg_UserInterface_PanelName(pnl,result);
}
panel (*var_sg_UserInterface_PanelNamed)(const char *name);
panel sg_UserInterface_PanelNamed(const char *name)
{
	return var_sg_UserInterface_PanelNamed(name);
}
int32_t (*var_sg_UserInterface_PanelNamedHeight)(const char *name);
int32_t sg_UserInterface_PanelNamedHeight(const char *name)
{
	return var_sg_UserInterface_PanelNamedHeight(name);
}
int32_t (*var_sg_UserInterface_PanelNamedWidth)(const char *name);
int32_t sg_UserInterface_PanelNamedWidth(const char *name)
{
	return var_sg_UserInterface_PanelNamedWidth(name);
}
void (*var_sg_UserInterface_PanelSetDraggable)(panel p, bool b);
void sg_UserInterface_PanelSetDraggable(panel p, bool b)
{
	var_sg_UserInterface_PanelSetDraggable(p,b != 0);
}
bool (*var_sg_UserInterface_PanelVisible)(panel p);
bool sg_UserInterface_PanelVisible(panel p)
{
	return var_sg_UserInterface_PanelVisible(p);
}
bool (*var_sg_UserInterface_PanelWasClicked)(panel pnl);
bool sg_UserInterface_PanelWasClicked(panel pnl)
{
	return var_sg_UserInterface_PanelWasClicked(pnl);
}
int32_t (*var_sg_UserInterface_PanelWidth)(panel p);
int32_t sg_UserInterface_PanelWidth(panel p)
{
	return var_sg_UserInterface_PanelWidth(p);
}
float (*var_sg_UserInterface_PanelX)(panel p);
float sg_UserInterface_PanelX(panel p)
{
	return var_sg_UserInterface_PanelX(p);
}
float (*var_sg_UserInterface_PanelY)(panel p);
float sg_UserInterface_PanelY(panel p)
{
	return var_sg_UserInterface_PanelY(p);
}
bool (*var_sg_UserInterface_PointInRegion)(const point2d *pt, panel p);
bool sg_UserInterface_PointInRegion(const point2d *pt, panel p)
{
	return var_sg_UserInterface_PointInRegion(pt,p);
}
bool (*var_sg_UserInterface_PointInRegionWithKind)(const point2d *pt, panel p, guielement_kind kind);
bool sg_UserInterface_PointInRegionWithKind(const point2d *pt, panel p, guielement_kind kind)
{
	return var_sg_UserInterface_PointInRegionWithKind(pt,p,kind);
}
bool (*var_sg_UserInterface_RegionActive)(region forRegion);
bool sg_UserInterface_RegionActive(region forRegion)
{
	return var_sg_UserInterface_RegionActive(forRegion);
}
region (*var_sg_UserInterface_RegionAtPoint)(panel p, const point2d *pt);
region sg_UserInterface_RegionAtPoint(panel p, const point2d *pt)
{
	return var_sg_UserInterface_RegionAtPoint(p,pt);
}
region (*var_sg_UserInterface_RegionClicked)();
region sg_UserInterface_RegionClicked()
{
	return var_sg_UserInterface_RegionClicked();
}
void (*var_sg_UserInterface_RegionClickedID)(char *result);
void sg_UserInterface_RegionClickedID(char *result)
{
	var_sg_UserInterface_RegionClickedID(result);
}
font (*var_sg_UserInterface_RegionFont)(region r);
font sg_UserInterface_RegionFont(region r)
{
	return var_sg_UserInterface_RegionFont(r);
}
font_alignment (*var_sg_UserInterface_RegionFontAlignment)(region r);
font_alignment sg_UserInterface_RegionFontAlignment(region r)
{
	return var_sg_UserInterface_RegionFontAlignment(r);
}
int32_t (*var_sg_UserInterface_RegionHeight)(region r);
int32_t sg_UserInterface_RegionHeight(region r)
{
	return var_sg_UserInterface_RegionHeight(r);
}
void (*var_sg_UserInterface_RegionID)(region r, char *result);
void sg_UserInterface_RegionID(region r, char *result)
{
	var_sg_UserInterface_RegionID(r,result);
}
region (*var_sg_UserInterface_RegionOfLastUpdatedTextBox)();
region sg_UserInterface_RegionOfLastUpdatedTextBox()
{
	return var_sg_UserInterface_RegionOfLastUpdatedTextBox();
}
panel (*var_sg_UserInterface_RegionPanel)(region r);
panel sg_UserInterface_RegionPanel(region r)
{
	return var_sg_UserInterface_RegionPanel(r);
}
void (*var_sg_UserInterface_RegionSetFont)(region r, font f);
void sg_UserInterface_RegionSetFont(region r, font f)
{
	var_sg_UserInterface_RegionSetFont(r,f);
}
void (*var_sg_UserInterface_RegionSetFontAlignment)(region r, font_alignment align);
void sg_UserInterface_RegionSetFontAlignment(region r, font_alignment align)
{
	var_sg_UserInterface_RegionSetFontAlignment(r,align);
}
int32_t (*var_sg_UserInterface_RegionWidth)(region r);
int32_t sg_UserInterface_RegionWidth(region r)
{
	return var_sg_UserInterface_RegionWidth(r);
}
region (*var_sg_UserInterface_RegionWithID)(panel pnl, const char *ID);
region sg_UserInterface_RegionWithID(panel pnl, const char *ID)
{
	return var_sg_UserInterface_RegionWithID(pnl,ID);
}
float (*var_sg_UserInterface_RegionX)(region r);
float sg_UserInterface_RegionX(region r)
{
	return var_sg_UserInterface_RegionX(r);
}
float (*var_sg_UserInterface_RegionY)(region r);
float sg_UserInterface_RegionY(region r)
{
	return var_sg_UserInterface_RegionY(r);
}
void (*var_sg_UserInterface_RegisterEventCallback)(region r, guievent_callback callback);
void sg_UserInterface_RegisterEventCallback(region r, guievent_callback callback)
{
	var_sg_UserInterface_RegisterEventCallback(r,callback);
}
void (*var_sg_UserInterface_ReleaseAllPanels)();
void sg_UserInterface_ReleaseAllPanels()
{
	var_sg_UserInterface_ReleaseAllPanels();
}
void (*var_sg_UserInterface_ReleasePanel)(const char *name);
void sg_UserInterface_ReleasePanel(const char *name)
{
	var_sg_UserInterface_ReleasePanel(name);
}
void (*var_sg_UserInterface_SelectRadioButton)(region r);
void sg_UserInterface_SelectRadioButton(region r)
{
	var_sg_UserInterface_SelectRadioButton(r);
}
void (*var_sg_UserInterface_SelectRadioButtonOnPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_SelectRadioButtonOnPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_SelectRadioButtonOnPanelWithId(pnl,id);
}
void (*var_sg_UserInterface_SelectRadioButtonWithID)(const char *id);
void sg_UserInterface_SelectRadioButtonWithID(const char *id)
{
	var_sg_UserInterface_SelectRadioButtonWithID(id);
}
void (*var_sg_UserInterface_SetRegionActive)(region forRegion, bool b);
void sg_UserInterface_SetRegionActive(region forRegion, bool b)
{
	var_sg_UserInterface_SetRegionActive(forRegion,b != 0);
}
void (*var_sg_UserInterface_ShowOpenDialog)();
void sg_UserInterface_ShowOpenDialog()
{
	var_sg_UserInterface_ShowOpenDialog();
}
void (*var_sg_UserInterface_ShowOpenDialogWithType)(file_dialog_select_type select);
void sg_UserInterface_ShowOpenDialogWithType(file_dialog_select_type select)
{
	var_sg_UserInterface_ShowOpenDialogWithType(select);
}
void (*var_sg_UserInterface_ShowPanel)(panel p);
void sg_UserInterface_ShowPanel(panel p)
{
	var_sg_UserInterface_ShowPanel(p);
}
void (*var_sg_UserInterface_ShowPanelDialog)(panel p);
void sg_UserInterface_ShowPanelDialog(panel p)
{
	var_sg_UserInterface_ShowPanelDialog(p);
}
void (*var_sg_UserInterface_ShowPanelNamed)(const char *name);
void sg_UserInterface_ShowPanelNamed(const char *name)
{
	var_sg_UserInterface_ShowPanelNamed(name);
}
void (*var_sg_UserInterface_ShowSaveDialog)();
void sg_UserInterface_ShowSaveDialog()
{
	var_sg_UserInterface_ShowSaveDialog();
}
void (*var_sg_UserInterface_ShowSaveDialogWithType)(file_dialog_select_type select);
void sg_UserInterface_ShowSaveDialogWithType(file_dialog_select_type select)
{
	var_sg_UserInterface_ShowSaveDialogWithType(select);
}
void (*var_sg_UserInterface_TextboxSetTextFromId)(const char *id, const char *s);
void sg_UserInterface_TextboxSetTextFromId(const char *id, const char *s)
{
	var_sg_UserInterface_TextboxSetTextFromId(id,s);
}
void (*var_sg_UserInterface_TextboxSetTextFromRegion)(region r, const char *s);
void sg_UserInterface_TextboxSetTextFromRegion(region r, const char *s)
{
	var_sg_UserInterface_TextboxSetTextFromRegion(r,s);
}
void (*var_sg_UserInterface_TextboxSetTextOnPanelAndId)(panel pnl, const char *id, const char *s);
void sg_UserInterface_TextboxSetTextOnPanelAndId(panel pnl, const char *id, const char *s)
{
	var_sg_UserInterface_TextboxSetTextOnPanelAndId(pnl,id,s);
}
void (*var_sg_UserInterface_TextboxSetTextToIntFromRegion)(region r, int32_t i);
void sg_UserInterface_TextboxSetTextToIntFromRegion(region r, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntFromRegion(r,i);
}
void (*var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId)(panel pnl, const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToIntOnPanelWithId(panel pnl, const char *id, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId(pnl,id,i);
}
void (*var_sg_UserInterface_TextboxSetTextToIntWithId)(const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToIntWithId(const char *id, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntWithId(id,i);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleFromId)(const char *id, float single);
void sg_UserInterface_TextboxSetTextToSingleFromId(const char *id, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleFromId(id,single);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleFromRegion)(region r, float single);
void sg_UserInterface_TextboxSetTextToSingleFromRegion(region r, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleFromRegion(r,single);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleOnPanel)(panel pnl, const char *id, float single);
void sg_UserInterface_TextboxSetTextToSingleOnPanel(panel pnl, const char *id, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleOnPanel(pnl,id,single);
}
void (*var_sg_UserInterface_TextboxTextFromRegion)(region r, char *result);
void sg_UserInterface_TextboxTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_TextboxTextFromRegion(r,result);
}
void (*var_sg_UserInterface_TextboxTextOnPanelWithId)(panel pnl, const char *id, char *result);
void sg_UserInterface_TextboxTextOnPanelWithId(panel pnl, const char *id, char *result)
{
	var_sg_UserInterface_TextboxTextOnPanelWithId(pnl,id,result);
}
void (*var_sg_UserInterface_TextboxTextWithId)(const char *id, char *result);
void sg_UserInterface_TextboxTextWithId(const char *id, char *result)
{
	var_sg_UserInterface_TextboxTextWithId(id,result);
}
void (*var_sg_UserInterface_ToggleActivatePanel)(panel p);
void sg_UserInterface_ToggleActivatePanel(panel p)
{
	var_sg_UserInterface_ToggleActivatePanel(p);
}
void (*var_sg_UserInterface_ToggleCheckboxStateFromID)(const char *id);
void sg_UserInterface_ToggleCheckboxStateFromID(const char *id)
{
	var_sg_UserInterface_ToggleCheckboxStateFromID(id);
}
void (*var_sg_UserInterface_ToggleCheckboxStateOnPanel)(panel pnl, const char *id);
void sg_UserInterface_ToggleCheckboxStateOnPanel(panel pnl, const char *id)
{
	var_sg_UserInterface_ToggleCheckboxStateOnPanel(pnl,id);
}
void (*var_sg_UserInterface_ToggleRegionActive)(region forRegion);
void sg_UserInterface_ToggleRegionActive(region forRegion)
{
	var_sg_UserInterface_ToggleRegionActive(forRegion);
}
void (*var_sg_UserInterface_ToggleShowPanel)(panel p);
void sg_UserInterface_ToggleShowPanel(panel p)
{
	var_sg_UserInterface_ToggleShowPanel(p);
}
void (*var_sg_UserInterface_UpdateInterface)();
void sg_UserInterface_UpdateInterface()
{
	var_sg_UserInterface_UpdateInterface();
}
void (*var_sg_Utils_CalculateFramerate)(char *average, char *highest, char *lowest, color *textColor);
void sg_Utils_CalculateFramerate(char *average, char *highest, char *lowest, color *textColor)
{
	var_sg_Utils_CalculateFramerate(average,highest,lowest,textColor);
}
void (*var_sg_Utils_Delay)(uint32_t time);
void sg_Utils_Delay(uint32_t time)
{
	var_sg_Utils_Delay(time);
}
void (*var_sg_Utils_ExceptionMessage)(char *result);
void sg_Utils_ExceptionMessage(char *result)
{
	var_sg_Utils_ExceptionMessage(result);
}
bool (*var_sg_Utils_ExceptionOccured)();
bool sg_Utils_ExceptionOccured()
{
	return var_sg_Utils_ExceptionOccured();
}
int32_t (*var_sg_Utils_GetFramerate)();
int32_t sg_Utils_GetFramerate()
{
	return var_sg_Utils_GetFramerate();
}
uint32_t (*var_sg_Utils_GetTicks)();
uint32_t sg_Utils_GetTicks()
{
	return var_sg_Utils_GetTicks();
}
float (*var_sg_Utils_Rnd)();
float sg_Utils_Rnd()
{
	return var_sg_Utils_Rnd();
}
int32_t (*var_sg_Utils_RndUpto)(int32_t ubound);
int32_t sg_Utils_RndUpto(int32_t ubound)
{
	return var_sg_Utils_RndUpto(ubound);
}
void (*var_sg_Utils_SwinGameVersion)(char *result);
void sg_Utils_SwinGameVersion(char *result)
{
	var_sg_Utils_SwinGameVersion(result);
}
void (*var_sg_Web_FreeHttpResponse)(http_response *response);
void sg_Web_FreeHttpResponse(http_response *response)
{
	var_sg_Web_FreeHttpResponse(response);
}
http_response (*var_sg_Web_HttpGet)(const char *url, unsigned short int port);
http_response sg_Web_HttpGet(const char *url, unsigned short int port)
{
	return var_sg_Web_HttpGet(url,port);
}
http_response (*var_sg_Web_HttpPost)(const char *url, unsigned short int port, const char *body);
http_response sg_Web_HttpPost(const char *url, unsigned short int port, const char *body)
{
	return var_sg_Web_HttpPost(url,port,body);
}
void (*var_sg_Web_HttpResponseBodyAsString)(http_response httpData, char *result);
void sg_Web_HttpResponseBodyAsString(http_response httpData, char *result)
{
	var_sg_Web_HttpResponseBodyAsString(httpData,result);
}
void (*var_sg_WindowManager_ChangeScreenSize)(int32_t width, int32_t height);
void sg_WindowManager_ChangeScreenSize(int32_t width, int32_t height)
{
	var_sg_WindowManager_ChangeScreenSize(width,height);
}
void (*var_sg_WindowManager_ChangeWindowSize)(window wind, int32_t width, int32_t height);
void sg_WindowManager_ChangeWindowSize(window wind, int32_t width, int32_t height)
{
	var_sg_WindowManager_ChangeWindowSize(wind,width,height);
}
void (*var_sg_WindowManager_CloseWindow)(window wind);
void sg_WindowManager_CloseWindow(window wind)
{
	var_sg_WindowManager_CloseWindow(wind);
}
void (*var_sg_WindowManager_CloseWindowNamed)(const char *name);
void sg_WindowManager_CloseWindowNamed(const char *name)
{
	var_sg_WindowManager_CloseWindowNamed(name);
}
bool (*var_sg_WindowManager_HasWindow)(const char *name);
bool sg_WindowManager_HasWindow(const char *name)
{
	return var_sg_WindowManager_HasWindow(name);
}
void (*var_sg_WindowManager_MoveWindow)(window wind, int32_t x, int32_t y);
void sg_WindowManager_MoveWindow(window wind, int32_t x, int32_t y)
{
	var_sg_WindowManager_MoveWindow(wind,x,y);
}
void (*var_sg_WindowManager_MoveWindowNamed)(const char *name, int32_t x, int32_t y);
void sg_WindowManager_MoveWindowNamed(const char *name, int32_t x, int32_t y)
{
	var_sg_WindowManager_MoveWindowNamed(name,x,y);
}
window (*var_sg_WindowManager_OpenWindow)(const char *caption, int32_t width, int32_t height);
window sg_WindowManager_OpenWindow(const char *caption, int32_t width, int32_t height)
{
	return var_sg_WindowManager_OpenWindow(caption,width,height);
}
bool (*var_sg_WindowManager_PrimaryWindowCloseRequested)();
bool sg_WindowManager_PrimaryWindowCloseRequested()
{
	return var_sg_WindowManager_PrimaryWindowCloseRequested();
}
void (*var_sg_WindowManager_SaveScreenshot)(window src, const char *filepath);
void sg_WindowManager_SaveScreenshot(window src, const char *filepath)
{
	var_sg_WindowManager_SaveScreenshot(src,filepath);
}
int32_t (*var_sg_WindowManager_ScreenHeight)();
int32_t sg_WindowManager_ScreenHeight()
{
	return var_sg_WindowManager_ScreenHeight();
}
int32_t (*var_sg_WindowManager_ScreenWidth)();
int32_t sg_WindowManager_ScreenWidth()
{
	return var_sg_WindowManager_ScreenWidth();
}
void (*var_sg_WindowManager_SetCurrentWindow)(window wnd);
void sg_WindowManager_SetCurrentWindow(window wnd)
{
	var_sg_WindowManager_SetCurrentWindow(wnd);
}
void (*var_sg_WindowManager_SetCurrentWindowNamed)(const char *name);
void sg_WindowManager_SetCurrentWindowNamed(const char *name)
{
	var_sg_WindowManager_SetCurrentWindowNamed(name);
}
void (*var_sg_WindowManager_ToggleFullScreen)();
void sg_WindowManager_ToggleFullScreen()
{
	var_sg_WindowManager_ToggleFullScreen();
}
void (*var_sg_WindowManager_ToggleWindowBorder)();
void sg_WindowManager_ToggleWindowBorder()
{
	var_sg_WindowManager_ToggleWindowBorder();
}
window (*var_sg_WindowManager_WindowAtIndex)(int32_t idx);
window sg_WindowManager_WindowAtIndex(int32_t idx)
{
	return var_sg_WindowManager_WindowAtIndex(idx);
}
bool (*var_sg_WindowManager_WindowCloseRequested)(window wind);
bool sg_WindowManager_WindowCloseRequested(window wind)
{
	return var_sg_WindowManager_WindowCloseRequested(wind);
}
int32_t (*var_sg_WindowManager_WindowCount)();
int32_t sg_WindowManager_WindowCount()
{
	return var_sg_WindowManager_WindowCount();
}
int32_t (*var_sg_WindowManager_WindowHeight)(window wind);
int32_t sg_WindowManager_WindowHeight(window wind)
{
	return var_sg_WindowManager_WindowHeight(wind);
}
int32_t (*var_sg_WindowManager_WindowHeightNamed)(const char *name);
int32_t sg_WindowManager_WindowHeightNamed(const char *name)
{
	return var_sg_WindowManager_WindowHeightNamed(name);
}
window (*var_sg_WindowManager_WindowNamed)(const char *name);
window sg_WindowManager_WindowNamed(const char *name)
{
	return var_sg_WindowManager_WindowNamed(name);
}
point2d (*var_sg_WindowManager_WindowPosition)(window wind);
point2d sg_WindowManager_WindowPosition(window wind)
{
	return var_sg_WindowManager_WindowPosition(wind);
}
point2d (*var_sg_WindowManager_WindowPositionNamed)(const char *name);
point2d sg_WindowManager_WindowPositionNamed(const char *name)
{
	return var_sg_WindowManager_WindowPositionNamed(name);
}
int32_t (*var_sg_WindowManager_WindowWidth)(window wind);
int32_t sg_WindowManager_WindowWidth(window wind)
{
	return var_sg_WindowManager_WindowWidth(wind);
}
int32_t (*var_sg_WindowManager_WindowWidthNamed)(const char *name);
int32_t sg_WindowManager_WindowWidthNamed(const char *name)
{
	return var_sg_WindowManager_WindowWidthNamed(name);
}
window (*var_sg_WindowManager_WindowWithFocus)();
window sg_WindowManager_WindowWithFocus()
{
	return var_sg_WindowManager_WindowWithFocus();
}
int32_t (*var_sg_WindowManager_WindowX)(window wind);
int32_t sg_WindowManager_WindowX(window wind)
{
	return var_sg_WindowManager_WindowX(wind);
}
int32_t (*var_sg_WindowManager_WindowXNamed)(const char *name);
int32_t sg_WindowManager_WindowXNamed(const char *name)
{
	return var_sg_WindowManager_WindowXNamed(name);
}
int32_t (*var_sg_WindowManager_WindowY)(window wind);
int32_t sg_WindowManager_WindowY(window wind)
{
	return var_sg_WindowManager_WindowY(wind);
}
int32_t (*var_sg_WindowManager_WindowYNamed)(const char *name);
int32_t sg_WindowManager_WindowYNamed(const char *name)
{
	return var_sg_WindowManager_WindowYNamed(name);
}
void (*var_sg_WindowManager_changeWindowSizeNamed)(const char *name, int32_t width, int32_t height);
void sg_WindowManager_changeWindowSizeNamed(const char *name, int32_t width, int32_t height)
{
	var_sg_WindowManager_changeWindowSizeNamed(name,width,height);
}

struct DLLLoader
{
	DLLLoader()
	{
		LibraryHandle = LoadLibrary( "SGSDK.dll" );

		var_sg_Animations_AnimationCount = (int32_t (__cdecl *)(animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationCount" );
		var_sg_Animations_AnimationCurrentCell = (int32_t (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationCurrentCell" );
		var_sg_Animations_AnimationCurrentVector = (vector (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationCurrentVector" );
		var_sg_Animations_AnimationEnded = (bool (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationEnded" );
		var_sg_Animations_AnimationEnteredFrame = (bool (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationEnteredFrame" );
		var_sg_Animations_AnimationFrameTime = (float (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationFrameTime" );
		var_sg_Animations_AnimationIndex = (int32_t (__cdecl *)(animation_script temp, const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationIndex" );
		var_sg_Animations_AnimationName = (void (__cdecl *)(animation temp, char *result)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationName" );
		var_sg_Animations_AnimationScriptAnimationName = (void (__cdecl *)(animation_script temp, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationScriptAnimationName" );
		var_sg_Animations_AnimationScriptName = (void (__cdecl *)(animation_script script, char *result)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationScriptName" );
		var_sg_Animations_AnimationScriptNamed = (animation_script (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationScriptNamed" );
		var_sg_Animations_AssignAnimation = (void (__cdecl *)(animation anim, int32_t idx, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimation" );
		var_sg_Animations_AssignAnimationNamed = (void (__cdecl *)(animation anim, const char *name, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationNamed" );
		var_sg_Animations_AssignAnimationNamedWithSound = (void (__cdecl *)(animation anim, const char *name, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationNamedWithSound" );
		var_sg_Animations_AssignAnimationWithSound = (void (__cdecl *)(animation anim, int32_t idx, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationWithSound" );
		var_sg_Animations_CreateAnimation = (animation (__cdecl *)(int32_t identifier, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimation" );
		var_sg_Animations_CreateAnimationNamed = (animation (__cdecl *)(const char *identifier, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationNamed" );
		var_sg_Animations_CreateAnimationNamedWithSound = (animation (__cdecl *)(const char *identifier, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationNamedWithSound" );
		var_sg_Animations_CreateAnimationWithSound = (animation (__cdecl *)(int32_t identifier, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationWithSound" );
		var_sg_Animations_DrawAnimation = (void (__cdecl *)(animation ani, bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimation" );
		var_sg_Animations_DrawAnimationAtPoint = (void (__cdecl *)(animation ani, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationAtPoint" );
		var_sg_Animations_DrawAnimationAtPointWithOptions = (void (__cdecl *)(animation ani, bitmap bmp, const point2d *pt, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationAtPointWithOptions" );
		var_sg_Animations_DrawAnimationWithOptions = (void (__cdecl *)(animation ani, bitmap bmp, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationWithOptions" );
		var_sg_Animations_FreeAnimation = (void (__cdecl *)(animation *ani)) GetProcAddress( LibraryHandle, "sg_Animations_FreeAnimation" );
		var_sg_Animations_FreeAnimationScript = (void (__cdecl *)(animation_script *scriptToFree)) GetProcAddress( LibraryHandle, "sg_Animations_FreeAnimationScript" );
		var_sg_Animations_HasAnimationScript = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_HasAnimationScript" );
		var_sg_Animations_LoadAnimationScript = (animation_script (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Animations_LoadAnimationScript" );
		var_sg_Animations_LoadAnimationScriptNamed = (animation_script (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Animations_LoadAnimationScriptNamed" );
		var_sg_Animations_ReleaseAllAnimationScripts = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Animations_ReleaseAllAnimationScripts" );
		var_sg_Animations_ReleaseAnimationScript = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_ReleaseAnimationScript" );
		var_sg_Animations_ResetAnimationWithSound = (void (__cdecl *)(animation anim, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_ResetAnimationWithSound" );
		var_sg_Animations_RestartAnimation = (void (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_RestartAnimation" );
		var_sg_Animations_UpdateAnimation = (void (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimation" );
		var_sg_Animations_UpdateAnimationPct = (void (__cdecl *)(animation anim, float pct)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimationPct" );
		var_sg_Animations_UpdateAnimationPctAndSound = (void (__cdecl *)(animation anim, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimationPctAndSound" );
		var_sg_Arduino_ArduinoDeviceNamed = (arduino_device (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoDeviceNamed" );
		var_sg_Arduino_ArduinoHasData = (bool (__cdecl *)(arduino_device dev)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoHasData" );
		var_sg_Arduino_ArduinoReadByte = (unsigned char (__cdecl *)(arduino_device dev)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadByte" );
		var_sg_Arduino_ArduinoReadByteTimeout = (unsigned char (__cdecl *)(arduino_device dev, int32_t timeout)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadByteTimeout" );
		var_sg_Arduino_ArduinoReadLine = (void (__cdecl *)(arduino_device dev, char *result)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadLine" );
		var_sg_Arduino_ArduinoReadLineTimeout = (void (__cdecl *)(arduino_device dev, int32_t timeout, char *result)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadLineTimeout" );
		var_sg_Arduino_ArduinoSendByte = (void (__cdecl *)(arduino_device dev, unsigned char value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendByte" );
		var_sg_Arduino_ArduinoSendString = (void (__cdecl *)(arduino_device dev, const char *value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendString" );
		var_sg_Arduino_ArduinoSendStringLine = (void (__cdecl *)(arduino_device dev, const char *value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendStringLine" );
		var_sg_Arduino_CreateArduinoDevice = (arduino_device (__cdecl *)(const char *port, int32_t baud)) GetProcAddress( LibraryHandle, "sg_Arduino_CreateArduinoDevice" );
		var_sg_Arduino_CreateArduinoNamed = (arduino_device (__cdecl *)(const char *name, const char *port, int32_t baud)) GetProcAddress( LibraryHandle, "sg_Arduino_CreateArduinoNamed" );
		var_sg_Arduino_FreeArduinoDevice = (void (__cdecl *)(arduino_device *dev)) GetProcAddress( LibraryHandle, "sg_Arduino_FreeArduinoDevice" );
		var_sg_Arduino_HasArduinoDevice = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_HasArduinoDevice" );
		var_sg_Arduino_ReleaseAllArduinoDevices = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Arduino_ReleaseAllArduinoDevices" );
		var_sg_Arduino_ReleaseArduinoDevice = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_ReleaseArduinoDevice" );
		var_sg_Audio_AudioReady = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_AudioReady" );
		var_sg_Audio_CloseAudio = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_CloseAudio" );
		var_sg_Audio_FadeMusicIn = (void (__cdecl *)(music mus, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicIn" );
		var_sg_Audio_FadeMusicInWithLoops = (void (__cdecl *)(music mus, int32_t loops, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicInWithLoops" );
		var_sg_Audio_FadeMusicNamedIn = (void (__cdecl *)(const char *name, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicNamedIn" );
		var_sg_Audio_FadeMusicNamedInWithLoops = (void (__cdecl *)(const char *name, int32_t loops, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicNamedInWithLoops" );
		var_sg_Audio_FadeMusicOut = (void (__cdecl *)(int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicOut" );
		var_sg_Audio_FreeMusic = (void (__cdecl *)(music *mus)) GetProcAddress( LibraryHandle, "sg_Audio_FreeMusic" );
		var_sg_Audio_FreeSoundEffect = (void (__cdecl *)(sound_effect *effect)) GetProcAddress( LibraryHandle, "sg_Audio_FreeSoundEffect" );
		var_sg_Audio_HasMusic = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_HasMusic" );
		var_sg_Audio_HasSoundEffect = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_HasSoundEffect" );
		var_sg_Audio_LoadMusic = (music (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadMusic" );
		var_sg_Audio_LoadMusicNamed = (music (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadMusicNamed" );
		var_sg_Audio_LoadSoundEffect = (sound_effect (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadSoundEffect" );
		var_sg_Audio_LoadSoundEffectNamed = (sound_effect (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadSoundEffectNamed" );
		var_sg_Audio_MusicFilename = (void (__cdecl *)(music mus, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_MusicFilename" );
		var_sg_Audio_MusicName = (void (__cdecl *)(music mus, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_MusicName" );
		var_sg_Audio_MusicNamed = (music (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_MusicNamed" );
		var_sg_Audio_MusicPlaying = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_MusicPlaying" );
		var_sg_Audio_MusicVolume = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_MusicVolume" );
		var_sg_Audio_OpenAudio = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_OpenAudio" );
		var_sg_Audio_PauseMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_PauseMusic" );
		var_sg_Audio_PlayMusicNamedWithLoops = (void (__cdecl *)(const char *name, int32_t loops)) GetProcAddress( LibraryHandle, "sg_Audio_PlayMusicNamedWithLoops" );
		var_sg_Audio_PlayMusicWithLoops = (void (__cdecl *)(music mus, int32_t loops)) GetProcAddress( LibraryHandle, "sg_Audio_PlayMusicWithLoops" );
		var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume = (void (__cdecl *)(const char *name, int32_t loops, float vol)) GetProcAddress( LibraryHandle, "sg_Audio_PlaySoundEffectNamedWithLoopAndVolume" );
		var_sg_Audio_PlaySoundEffectWithLoopAndVolume = (void (__cdecl *)(sound_effect effect, int32_t loops, float vol)) GetProcAddress( LibraryHandle, "sg_Audio_PlaySoundEffectWithLoopAndVolume" );
		var_sg_Audio_ReleaseAllMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseAllMusic" );
		var_sg_Audio_ReleaseAllSoundEffects = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseAllSoundEffects" );
		var_sg_Audio_ReleaseMusic = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseMusic" );
		var_sg_Audio_ReleaseSoundEffect = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseSoundEffect" );
		var_sg_Audio_ResumeMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ResumeMusic" );
		var_sg_Audio_SetMusicVolume = (void (__cdecl *)(float value)) GetProcAddress( LibraryHandle, "sg_Audio_SetMusicVolume" );
		var_sg_Audio_SoundEffectFilename = (void (__cdecl *)(sound_effect effect, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectFilename" );
		var_sg_Audio_SoundEffectName = (void (__cdecl *)(sound_effect effect, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectName" );
		var_sg_Audio_SoundEffectNamed = (sound_effect (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectNamed" );
		var_sg_Audio_SoundEffectNamedPlaying = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectNamedPlaying" );
		var_sg_Audio_SoundEffectPlaying = (bool (__cdecl *)(sound_effect effect)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectPlaying" );
		var_sg_Audio_StopMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_StopMusic" );
		var_sg_Audio_StopSoundEffect = (void (__cdecl *)(sound_effect effect)) GetProcAddress( LibraryHandle, "sg_Audio_StopSoundEffect" );
		var_sg_Audio_StopSoundEffectNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_StopSoundEffectNamed" );
		var_sg_Audio_TryOpenAudio = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_TryOpenAudio" );
		var_sg_Camera_CameraPos = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraPos" );
		var_sg_Camera_CameraX = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraX" );
		var_sg_Camera_CameraY = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraY" );
		var_sg_Camera_CenterCameraOn = (void (__cdecl *)(sprite s, const vector *offset)) GetProcAddress( LibraryHandle, "sg_Camera_CenterCameraOn" );
		var_sg_Camera_CenterCameraOnWithXYOffset = (void (__cdecl *)(sprite s, float offsetX, float offsetY)) GetProcAddress( LibraryHandle, "sg_Camera_CenterCameraOnWithXYOffset" );
		var_sg_Camera_MoveCameraBy = (void (__cdecl *)(const vector *offset)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraBy" );
		var_sg_Camera_MoveCameraByXY = (void (__cdecl *)(float dx, float dy)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraByXY" );
		var_sg_Camera_MoveCameraTo = (void (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraTo" );
		var_sg_Camera_MoveCameraToXY = (void (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraToXY" );
		var_sg_Camera_PointOnScreen = (bool (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_PointOnScreen" );
		var_sg_Camera_RectOnScreen = (bool (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Camera_RectOnScreen" );
		var_sg_Camera_SetCameraPos = (void (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraPos" );
		var_sg_Camera_SetCameraX = (void (__cdecl *)(float x)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraX" );
		var_sg_Camera_SetCameraY = (void (__cdecl *)(float y)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraY" );
		var_sg_Camera_ToScreen = (point2d (__cdecl *)(const point2d *worldPoint)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreen" );
		var_sg_Camera_ToScreenRect = (rectangle (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenRect" );
		var_sg_Camera_ToScreenX = (float (__cdecl *)(float worldX)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenX" );
		var_sg_Camera_ToScreenY = (float (__cdecl *)(float worldY)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenY" );
		var_sg_Camera_ToWorld = (point2d (__cdecl *)(const point2d *screenPoint)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorld" );
		var_sg_Camera_ToWorldX = (float (__cdecl *)(float screenX)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorldX" );
		var_sg_Camera_ToWorldY = (float (__cdecl *)(float screenY)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorldY" );
		var_sg_DrawingOptions_OptionDefaults = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionDefaults" );
		var_sg_DrawingOptions_OptionDrawToBitmap = (drawing_options (__cdecl *)(bitmap dest)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionDrawToBitmap" );
		var_sg_DrawingOptions_OptionDrawToBitmapOpts = (drawing_options (__cdecl *)(bitmap dest, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionDrawToBitmapOpts" );
		var_sg_DrawingOptions_OptionDrawToWindow = (drawing_options (__cdecl *)(window dest)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionDrawToWindow" );
		var_sg_DrawingOptions_OptionDrawToWindowOpts = (drawing_options (__cdecl *)(window dest, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionDrawToWindowOpts" );
		var_sg_DrawingOptions_OptionFlipX = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipX" );
		var_sg_DrawingOptions_OptionFlipXOpts = (drawing_options (__cdecl *)(const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipXOpts" );
		var_sg_DrawingOptions_OptionFlipXY = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipXY" );
		var_sg_DrawingOptions_OptionFlipXYOpts = (drawing_options (__cdecl *)(const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipXYOpts" );
		var_sg_DrawingOptions_OptionFlipY = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipY" );
		var_sg_DrawingOptions_OptionFlipYOpts = (drawing_options (__cdecl *)(const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionFlipYOpts" );
		var_sg_DrawingOptions_OptionLineWidth = (drawing_options (__cdecl *)(int32_t width)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionLineWidth" );
		var_sg_DrawingOptions_OptionLineWidthOpts = (drawing_options (__cdecl *)(int32_t width, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionLineWidthOpts" );
		var_sg_DrawingOptions_OptionPartBmp = (drawing_options (__cdecl *)(float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionPartBmp" );
		var_sg_DrawingOptions_OptionPartBmpOpts = (drawing_options (__cdecl *)(float x, float y, float w, float h, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionPartBmpOpts" );
		var_sg_DrawingOptions_OptionPartBmpRect = (drawing_options (__cdecl *)(const rectangle *part)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionPartBmpRect" );
		var_sg_DrawingOptions_OptionPartBmpRectOpts = (drawing_options (__cdecl *)(const rectangle *part, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionPartBmpRectOpts" );
		var_sg_DrawingOptions_OptionRotateBmp = (drawing_options (__cdecl *)(float angle, float anchorX, float anchorY)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionRotateBmp" );
		var_sg_DrawingOptions_OptionRotateBmpAngle = (drawing_options (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionRotateBmpAngle" );
		var_sg_DrawingOptions_OptionRotateBmpAngleOpts = (drawing_options (__cdecl *)(float angle, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionRotateBmpAngleOpts" );
		var_sg_DrawingOptions_OptionRotateBmpOpts = (drawing_options (__cdecl *)(float angle, float anchorX, float anchorY, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionRotateBmpOpts" );
		var_sg_DrawingOptions_OptionScaleBmp = (drawing_options (__cdecl *)(float scaleX, float scaleY)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionScaleBmp" );
		var_sg_DrawingOptions_OptionScaleBmpOpts = (drawing_options (__cdecl *)(float scaleX, float scaleY, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionScaleBmpOpts" );
		var_sg_DrawingOptions_OptionToScreen = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionToScreen" );
		var_sg_DrawingOptions_OptionToScreenOpts = (drawing_options (__cdecl *)(const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionToScreenOpts" );
		var_sg_DrawingOptions_OptionToWorld = (drawing_options (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionToWorld" );
		var_sg_DrawingOptions_OptionToWorldOpts = (drawing_options (__cdecl *)(const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_DrawingOptions_OptionToWorldOpts" );
		var_sg_Geometry_AddVectors = (vector (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_AddVectors" );
		var_sg_Geometry_ApplyMatrix = (void (__cdecl *)(const matrix2d  *m, triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_ApplyMatrix" );
		var_sg_Geometry_ApplyMatrixToQuad = (void (__cdecl *)(const matrix2d  *m, quad *quad)) GetProcAddress( LibraryHandle, "sg_Geometry_ApplyMatrixToQuad" );
		var_sg_Geometry_CalculateAngle = (float (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngle" );
		var_sg_Geometry_CalculateAngleBetween = (float (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetween" );
		var_sg_Geometry_CalculateAngleBetweenSprites = (float (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetweenSprites" );
		var_sg_Geometry_CalculateAngleBetweenVectors = (float (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetweenVectors" );
		var_sg_Geometry_CircleAt = (circle (__cdecl *)(const point2d *pt, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleAt" );
		var_sg_Geometry_CircleCenterPoint = (point2d (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleCenterPoint" );
		var_sg_Geometry_CircleFromXY = (circle (__cdecl *)(float x, float y, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleFromXY" );
		var_sg_Geometry_CircleRadius = (float (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleRadius" );
		var_sg_Geometry_CircleX = (float (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleX" );
		var_sg_Geometry_CircleY = (float (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleY" );
		var_sg_Geometry_ClosestPointOnCircle = (point2d (__cdecl *)(const point2d *fromPt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnCircle" );
		var_sg_Geometry_ClosestPointOnLine = (point2d (__cdecl *)(const point2d *fromPt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLine" );
		var_sg_Geometry_ClosestPointOnLineFromCircle = (point2d (__cdecl *)(const circle *c, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLineFromCircle" );
		var_sg_Geometry_ClosestPointOnLineXY = (point2d (__cdecl *)(float x, float y, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLineXY" );
		var_sg_Geometry_ClosestPointOnRectFromCircle = (point2d (__cdecl *)(const circle *c, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnRectFromCircle" );
		var_sg_Geometry_Cosine = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Cosine" );
		var_sg_Geometry_CreateCircle = (circle (__cdecl *)(const point2d *pt, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateCircle" );
		var_sg_Geometry_CreateCircleFromXY = (circle (__cdecl *)(float x, float y, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateCircleFromXY" );
		var_sg_Geometry_CreateLine = (line_segment (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLine" );
		var_sg_Geometry_CreateLineAsVector = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineAsVector" );
		var_sg_Geometry_CreateLineFromVector = (line_segment (__cdecl *)(const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineFromVector" );
		var_sg_Geometry_CreateLinePointToPoint = (line_segment (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLinePointToPoint" );
		var_sg_Geometry_CreateLineVectorWithStartPoint = (line_segment (__cdecl *)(const point2d *pt, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineVectorWithStartPoint" );
		var_sg_Geometry_CreateLineVectorWithStartXY = (line_segment (__cdecl *)(float x, float y, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineVectorWithStartXY" );
		var_sg_Geometry_CreateRectangle = (rectangle (__cdecl *)(float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangle" );
		var_sg_Geometry_CreateRectangleAtPoint = (rectangle (__cdecl *)(const point2d *pt, float width, float height)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleAtPoint" );
		var_sg_Geometry_CreateRectangleCircle = (rectangle (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleCircle" );
		var_sg_Geometry_CreateRectangleForPoints = (rectangle (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleForPoints" );
		var_sg_Geometry_CreateRectangleLine = (rectangle (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleLine" );
		var_sg_Geometry_CreateRectangleTriangle = (rectangle (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleTriangle" );
		var_sg_Geometry_CreateTriangle = (triangle  (__cdecl *)(float ax, float ay, float bx, float by, float cx, float cy)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateTriangle" );
		var_sg_Geometry_CreateTrianglePoints = (triangle  (__cdecl *)(const point2d *a, const point2d *b, const point2d *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateTrianglePoints" );
		var_sg_Geometry_CreateVectorFromAngle = (vector (__cdecl *)(float angle, float magnitude)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromAngle" );
		var_sg_Geometry_CreateVectorFromPointPtToRectangle = (vector (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointPtToRectangle" );
		var_sg_Geometry_CreateVectorFromPointToRect = (vector (__cdecl *)(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointToRect" );
		var_sg_Geometry_CreateVectorFromPointToRectangle = (vector (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointToRectangle" );
		var_sg_Geometry_CreateVectorFromPoints = (vector (__cdecl *)(const point2d *p1, const point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPoints" );
		var_sg_Geometry_CreateVectorToPoint = (vector (__cdecl *)(const point2d *p1)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorToPoint" );
		var_sg_Geometry_DistantPointOnCircle = (point2d (__cdecl *)(const point2d *pt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_DistantPointOnCircle" );
		var_sg_Geometry_DistantPointOnCircleHeading = (bool (__cdecl *)(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt)) GetProcAddress( LibraryHandle, "sg_Geometry_DistantPointOnCircleHeading" );
		var_sg_Geometry_DotProduct = (float (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_DotProduct" );
		var_sg_Geometry_FixRect = (void (__cdecl *)(float *x, float *y, float *width, float *height)) GetProcAddress( LibraryHandle, "sg_Geometry_FixRect" );
		var_sg_Geometry_FixRectangle = (void (__cdecl *)(rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_FixRectangle" );
		var_sg_Geometry_IdentityMatrix = (matrix2d  (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Geometry_IdentityMatrix" );
		var_sg_Geometry_InsetRectangle = (rectangle (__cdecl *)(const rectangle *rect, float insetAmount)) GetProcAddress( LibraryHandle, "sg_Geometry_InsetRectangle" );
		var_sg_Geometry_Intersection = (rectangle (__cdecl *)(const rectangle *rect1, const rectangle *rect2)) GetProcAddress( LibraryHandle, "sg_Geometry_Intersection" );
		var_sg_Geometry_InvertVector = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_InvertVector" );
		var_sg_Geometry_LimitVector = (vector (__cdecl *)(const vector *v, float limit)) GetProcAddress( LibraryHandle, "sg_Geometry_LimitVector" );
		var_sg_Geometry_LineAsVector = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineAsVector" );
		var_sg_Geometry_LineFrom = (line_segment (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFrom" );
		var_sg_Geometry_LineFromPointToPoint = (line_segment (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromPointToPoint" );
		var_sg_Geometry_LineFromVector = (line_segment (__cdecl *)(const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVector" );
		var_sg_Geometry_LineFromVectorWithStartPoint = (line_segment (__cdecl *)(const point2d *pt, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVectorWithStartPoint" );
		var_sg_Geometry_LineFromVectorWithStartXY = (line_segment (__cdecl *)(float x, float y, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVectorWithStartXY" );
		var_sg_Geometry_LineIntersectionPoint = (bool (__cdecl *)(const line_segment *line1, const line_segment *line2, point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectionPoint" );
		var_sg_Geometry_LineIntersectsCircle = (bool (__cdecl *)(const line_segment *l, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectsCircle" );
		var_sg_Geometry_LineIntersectsRect = (bool (__cdecl *)(const line_segment *line, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectsRect" );
		var_sg_Geometry_LineMagnitudeSq = (float (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMagnitudeSq" );
		var_sg_Geometry_LineMagnitudeSqFromLine = (float (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMagnitudeSqFromLine" );
		var_sg_Geometry_LineMidPoint = (point2d (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMidPoint" );
		var_sg_Geometry_LineNormal = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineNormal" );
		var_sg_Geometry_LineSegmentsIntersect = (bool (__cdecl *)(const line_segment *line1, const line_segment *line2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineSegmentsIntersect" );
		var_sg_Geometry_LineToString = (void (__cdecl *)(const line_segment *ln, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_LineToString" );
		var_sg_Geometry_MatrixInverse = (matrix2d  (__cdecl *)(const matrix2d  *m)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixInverse" );
		var_sg_Geometry_MatrixMultiply = (matrix2d  (__cdecl *)(const matrix2d  *m1, const matrix2d  *m2)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixMultiply" );
		var_sg_Geometry_MatrixMultiplyVector = (vector (__cdecl *)(const matrix2d  *m, const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixMultiplyVector" );
		var_sg_Geometry_MatrixToString = (void (__cdecl *)(const matrix2d  *m, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixToString" );
		var_sg_Geometry_PointAdd = (point2d (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAdd" );
		var_sg_Geometry_PointAt = (point2d (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAt" );
		var_sg_Geometry_PointAtStartWithOffset = (point2d (__cdecl *)(const point2d *startPoint, const vector *offset)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAtStartWithOffset" );
		var_sg_Geometry_PointInCircle = (bool (__cdecl *)(const point2d *pt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInCircle" );
		var_sg_Geometry_PointInCirclePt = (bool (__cdecl *)(const point2d *pt, float x, float y, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInCirclePt" );
		var_sg_Geometry_PointInRect = (bool (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInRect" );
		var_sg_Geometry_PointInRectXY = (bool (__cdecl *)(const point2d *pt, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInRectXY" );
		var_sg_Geometry_PointInTriangle = (bool (__cdecl *)(const point2d *pt, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInTriangle" );
		var_sg_Geometry_PointLineDistance = (float (__cdecl *)(const point2d *pt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointLineDistance" );
		var_sg_Geometry_PointOnLine = (bool (__cdecl *)(const point2d *pt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointOnLine" );
		var_sg_Geometry_PointOnLineXYXY = (bool (__cdecl *)(const point2d *pt, float x, float y, float endX, float endY)) GetProcAddress( LibraryHandle, "sg_Geometry_PointOnLineXYXY" );
		var_sg_Geometry_PointOnPoint = (bool (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointOnPoint" );
		var_sg_Geometry_PointPointDistance = (float (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointPointDistance" );
		var_sg_Geometry_PointToString = (void (__cdecl *)(const point2d *pt, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_PointToString" );
		var_sg_Geometry_PointXYInCircle = (bool (__cdecl *)(float ptX, float ptY, float cX, float cY, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInCircle" );
		var_sg_Geometry_PointXYInRect = (bool (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInRect" );
		var_sg_Geometry_PointXYInRectXY = (bool (__cdecl *)(float ptX, float ptY, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInRectXY" );
		var_sg_Geometry_PointXYLineDistance = (float (__cdecl *)(float x, float y, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYLineDistance" );
		var_sg_Geometry_QuadFrom = (quad (__cdecl *)(float xTopLeft, float yTopLeft, float xTopRight, float yTopRight, float xBottomLeft, float yBottomLeft, float xBottomRight, float yBottomRight)) GetProcAddress( LibraryHandle, "sg_Geometry_QuadFrom" );
		var_sg_Geometry_QuadFromRect = (quad (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_QuadFromRect" );
		var_sg_Geometry_RandomScreenPoint = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Geometry_RandomScreenPoint" );
		var_sg_Geometry_RayCircleIntersectDistance = (float (__cdecl *)(const point2d *ray_origin, const vector *ray_heading, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_RayCircleIntersectDistance" );
		var_sg_Geometry_RayIntersectionPoint = (bool (__cdecl *)(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_RayIntersectionPoint" );
		var_sg_Geometry_RectangleAfterMove = (rectangle (__cdecl *)(const rectangle *rect, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleAfterMove" );
		var_sg_Geometry_RectangleAtPoint = (rectangle (__cdecl *)(const point2d *pt, float width, float height)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleAtPoint" );
		var_sg_Geometry_RectangleBottom = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottom" );
		var_sg_Geometry_RectangleBottomLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottomLeft" );
		var_sg_Geometry_RectangleBottomRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottomRight" );
		var_sg_Geometry_RectangleCenter = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenter" );
		var_sg_Geometry_RectangleCenterBottom = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterBottom" );
		var_sg_Geometry_RectangleCenterLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterLeft" );
		var_sg_Geometry_RectangleCenterRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterRight" );
		var_sg_Geometry_RectangleCenterTop = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterTop" );
		var_sg_Geometry_RectangleForPoints = (rectangle (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleForPoints" );
		var_sg_Geometry_RectangleFrom = (rectangle (__cdecl *)(float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFrom" );
		var_sg_Geometry_RectangleFromCircle = (rectangle (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromCircle" );
		var_sg_Geometry_RectangleFromLine = (rectangle (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromLine" );
		var_sg_Geometry_RectangleFromTriangle = (rectangle (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromTriangle" );
		var_sg_Geometry_RectangleLeft = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleLeft" );
		var_sg_Geometry_RectangleOffset = (rectangle (__cdecl *)(const rectangle *rect, const vector *vec)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleOffset" );
		var_sg_Geometry_RectangleRight = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleRight" );
		var_sg_Geometry_RectangleToString = (void (__cdecl *)(const rectangle *rect, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleToString" );
		var_sg_Geometry_RectangleTop = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTop" );
		var_sg_Geometry_RectangleTopLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTopLeft" );
		var_sg_Geometry_RectangleTopRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTopRight" );
		var_sg_Geometry_RectanglesIntersect = (bool (__cdecl *)(const rectangle *rect1, const rectangle *rect2)) GetProcAddress( LibraryHandle, "sg_Geometry_RectanglesIntersect" );
		var_sg_Geometry_RotationMatrix = (matrix2d  (__cdecl *)(float deg)) GetProcAddress( LibraryHandle, "sg_Geometry_RotationMatrix" );
		var_sg_Geometry_ScaleMatrix = (matrix2d  (__cdecl *)(float scale)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleMatrix" );
		var_sg_Geometry_ScaleMatrixByPoint = (matrix2d  (__cdecl *)(const point2d *scale)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleMatrixByPoint" );
		var_sg_Geometry_ScaleRotateTranslateMatrix = (matrix2d  (__cdecl *)(const point2d *scale, float deg, const point2d *translate)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleRotateTranslateMatrix" );
		var_sg_Geometry_SetQuadPoint = (void (__cdecl *)(quad *q, int32_t idx, point2d value)) GetProcAddress( LibraryHandle, "sg_Geometry_SetQuadPoint" );
		var_sg_Geometry_Sine = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Sine" );
		var_sg_Geometry_SubtractVectors = (vector (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_SubtractVectors" );
		var_sg_Geometry_Tangent = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Tangent" );
		var_sg_Geometry_TangentPoints = (bool (__cdecl *)(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_TangentPoints" );
		var_sg_Geometry_TranslationMatrix = (matrix2d  (__cdecl *)(float dx, float dy)) GetProcAddress( LibraryHandle, "sg_Geometry_TranslationMatrix" );
		var_sg_Geometry_TranslationMatrixPt = (matrix2d  (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_TranslationMatrixPt" );
		var_sg_Geometry_TriangleBarycenter = (point2d (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleBarycenter" );
		var_sg_Geometry_TriangleFrom = (triangle  (__cdecl *)(float ax, float ay, float bx, float by, float cx, float cy)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleFrom" );
		var_sg_Geometry_TriangleFromPoints = (triangle  (__cdecl *)(const point2d *a, const point2d *b, const point2d *c)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleFromPoints" );
		var_sg_Geometry_TriangleRectangleIntersect = (bool (__cdecl *)(const triangle  *tri, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleRectangleIntersect" );
		var_sg_Geometry_TriangleToString = (void (__cdecl *)(const triangle  *tri, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleToString" );
		var_sg_Geometry_UnitVector = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_UnitVector" );
		var_sg_Geometry_VectorAngle = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorAngle" );
		var_sg_Geometry_VectorFromAngle = (vector (__cdecl *)(float angle, float magnitude)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromAngle" );
		var_sg_Geometry_VectorFromPointPtToRectangle = (vector (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointPtToRectangle" );
		var_sg_Geometry_VectorFromPointToRect = (vector (__cdecl *)(float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointToRect" );
		var_sg_Geometry_VectorFromPointToRectangle = (vector (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointToRectangle" );
		var_sg_Geometry_VectorFromPoints = (vector (__cdecl *)(const point2d *p1, const point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPoints" );
		var_sg_Geometry_VectorInRect = (bool (__cdecl *)(const vector *v, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorInRect" );
		var_sg_Geometry_VectorInRectXY = (bool (__cdecl *)(const vector *v, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorInRectXY" );
		var_sg_Geometry_VectorIsZero = (bool (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorIsZero" );
		var_sg_Geometry_VectorMagnitude = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMagnitude" );
		var_sg_Geometry_VectorMagnitudeSq = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMagnitudeSq" );
		var_sg_Geometry_VectorMultiply = (vector (__cdecl *)(const vector *v, float s)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMultiply" );
		var_sg_Geometry_VectorNormal = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorNormal" );
		var_sg_Geometry_VectorOutOfCircleFromCircle = (vector (__cdecl *)(const circle *src, const circle *bounds, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfCircleFromCircle" );
		var_sg_Geometry_VectorOutOfCircleFromPoint = (vector (__cdecl *)(const point2d *pt, const circle *c, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfCircleFromPoint" );
		var_sg_Geometry_VectorOutOfRectFromCircle = (vector (__cdecl *)(const circle *c, const rectangle *rect, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromCircle" );
		var_sg_Geometry_VectorOutOfRectFromPoint = (vector (__cdecl *)(const point2d *pt, const rectangle *rect, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromPoint" );
		var_sg_Geometry_VectorOutOfRectFromRect = (vector (__cdecl *)(const rectangle *src, const rectangle *bounds, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromRect" );
		var_sg_Geometry_VectorTo = (vector (__cdecl *)(float x, float y, bool invertY)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorTo" );
		var_sg_Geometry_VectorToPoint = (vector (__cdecl *)(const point2d *p1)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorToPoint" );
		var_sg_Geometry_VectorsEqual = (bool (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorsEqual" );
		var_sg_Geometry_VectorsNotEqual = (bool (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorsNotEqual" );
		var_sg_Geometry_WidestPoints = (void (__cdecl *)(const circle *c, const vector *along, point2d *pt1, point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_WidestPoints" );
		var_sg_Graphics_AvailableResolution = (resolution (__cdecl *)(int32_t idx)) GetProcAddress( LibraryHandle, "sg_Graphics_AvailableResolution" );
		var_sg_Graphics_BlueOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_BlueOf" );
		var_sg_Graphics_BrightnessOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_BrightnessOf" );
		var_sg_Graphics_ClearScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ClearScreen" );
		var_sg_Graphics_ClearScreenTo = (void (__cdecl *)(color toColor)) GetProcAddress( LibraryHandle, "sg_Graphics_ClearScreenTo" );
		var_sg_Graphics_ColorAliceBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorAliceBlue" );
		var_sg_Graphics_ColorAntiqueWhite = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorAntiqueWhite" );
		var_sg_Graphics_ColorAqua = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorAqua" );
		var_sg_Graphics_ColorAquamarine = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorAquamarine" );
		var_sg_Graphics_ColorAzure = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorAzure" );
		var_sg_Graphics_ColorBeige = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBeige" );
		var_sg_Graphics_ColorBisque = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBisque" );
		var_sg_Graphics_ColorBlack = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBlack" );
		var_sg_Graphics_ColorBlanchedAlmond = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBlanchedAlmond" );
		var_sg_Graphics_ColorBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBlue" );
		var_sg_Graphics_ColorBlueViolet = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBlueViolet" );
		var_sg_Graphics_ColorBrightGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBrightGreen" );
		var_sg_Graphics_ColorBrown = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBrown" );
		var_sg_Graphics_ColorBurlyWood = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorBurlyWood" );
		var_sg_Graphics_ColorCadetBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCadetBlue" );
		var_sg_Graphics_ColorChartreuse = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorChartreuse" );
		var_sg_Graphics_ColorChocolate = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorChocolate" );
		var_sg_Graphics_ColorComponents = (void (__cdecl *)(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)) GetProcAddress( LibraryHandle, "sg_Graphics_ColorComponents" );
		var_sg_Graphics_ColorCoral = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCoral" );
		var_sg_Graphics_ColorCornflowerBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCornflowerBlue" );
		var_sg_Graphics_ColorCornsilk = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCornsilk" );
		var_sg_Graphics_ColorCrimson = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCrimson" );
		var_sg_Graphics_ColorCyan = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorCyan" );
		var_sg_Graphics_ColorDarkBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkBlue" );
		var_sg_Graphics_ColorDarkCyan = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkCyan" );
		var_sg_Graphics_ColorDarkGoldenrod = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkGoldenrod" );
		var_sg_Graphics_ColorDarkGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkGray" );
		var_sg_Graphics_ColorDarkGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkGreen" );
		var_sg_Graphics_ColorDarkKhaki = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkKhaki" );
		var_sg_Graphics_ColorDarkMagenta = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkMagenta" );
		var_sg_Graphics_ColorDarkOliveGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkOliveGreen" );
		var_sg_Graphics_ColorDarkOrange = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkOrange" );
		var_sg_Graphics_ColorDarkOrchid = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkOrchid" );
		var_sg_Graphics_ColorDarkRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkRed" );
		var_sg_Graphics_ColorDarkSalmon = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkSalmon" );
		var_sg_Graphics_ColorDarkSeaGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkSeaGreen" );
		var_sg_Graphics_ColorDarkSlateBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkSlateBlue" );
		var_sg_Graphics_ColorDarkSlateGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkSlateGray" );
		var_sg_Graphics_ColorDarkTurquoise = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkTurquoise" );
		var_sg_Graphics_ColorDarkViolet = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDarkViolet" );
		var_sg_Graphics_ColorDeepPink = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDeepPink" );
		var_sg_Graphics_ColorDeepSkyBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDeepSkyBlue" );
		var_sg_Graphics_ColorDimGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDimGray" );
		var_sg_Graphics_ColorDodgerBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorDodgerBlue" );
		var_sg_Graphics_ColorFirebrick = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorFirebrick" );
		var_sg_Graphics_ColorFloralWhite = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorFloralWhite" );
		var_sg_Graphics_ColorForestGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorForestGreen" );
		var_sg_Graphics_ColorFuchsia = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorFuchsia" );
		var_sg_Graphics_ColorGainsboro = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGainsboro" );
		var_sg_Graphics_ColorGhostWhite = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGhostWhite" );
		var_sg_Graphics_ColorGold = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGold" );
		var_sg_Graphics_ColorGoldenrod = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGoldenrod" );
		var_sg_Graphics_ColorGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGray" );
		var_sg_Graphics_ColorGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGreen" );
		var_sg_Graphics_ColorGreenYellow = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGreenYellow" );
		var_sg_Graphics_ColorGrey = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorGrey" );
		var_sg_Graphics_ColorHoneydew = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorHoneydew" );
		var_sg_Graphics_ColorHotPink = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorHotPink" );
		var_sg_Graphics_ColorIndianRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorIndianRed" );
		var_sg_Graphics_ColorIndigo = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorIndigo" );
		var_sg_Graphics_ColorIvory = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorIvory" );
		var_sg_Graphics_ColorKhaki = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorKhaki" );
		var_sg_Graphics_ColorLavender = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLavender" );
		var_sg_Graphics_ColorLavenderBlush = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLavenderBlush" );
		var_sg_Graphics_ColorLawnGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLawnGreen" );
		var_sg_Graphics_ColorLemonChiffon = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLemonChiffon" );
		var_sg_Graphics_ColorLightBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightBlue" );
		var_sg_Graphics_ColorLightCoral = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightCoral" );
		var_sg_Graphics_ColorLightCyan = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightCyan" );
		var_sg_Graphics_ColorLightGoldenrodYellow = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightGoldenrodYellow" );
		var_sg_Graphics_ColorLightGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightGray" );
		var_sg_Graphics_ColorLightGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightGreen" );
		var_sg_Graphics_ColorLightGrey = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightGrey" );
		var_sg_Graphics_ColorLightPink = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightPink" );
		var_sg_Graphics_ColorLightSalmon = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightSalmon" );
		var_sg_Graphics_ColorLightSeaGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightSeaGreen" );
		var_sg_Graphics_ColorLightSkyBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightSkyBlue" );
		var_sg_Graphics_ColorLightSlateGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightSlateGray" );
		var_sg_Graphics_ColorLightSteelBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightSteelBlue" );
		var_sg_Graphics_ColorLightYellow = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLightYellow" );
		var_sg_Graphics_ColorLime = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLime" );
		var_sg_Graphics_ColorLimeGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLimeGreen" );
		var_sg_Graphics_ColorLinen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorLinen" );
		var_sg_Graphics_ColorMagenta = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMagenta" );
		var_sg_Graphics_ColorMaroon = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMaroon" );
		var_sg_Graphics_ColorMediumAquamarine = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumAquamarine" );
		var_sg_Graphics_ColorMediumBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumBlue" );
		var_sg_Graphics_ColorMediumOrchid = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumOrchid" );
		var_sg_Graphics_ColorMediumPurple = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumPurple" );
		var_sg_Graphics_ColorMediumSeaGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumSeaGreen" );
		var_sg_Graphics_ColorMediumSlateBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumSlateBlue" );
		var_sg_Graphics_ColorMediumSpringGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumSpringGreen" );
		var_sg_Graphics_ColorMediumTurquoise = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumTurquoise" );
		var_sg_Graphics_ColorMediumVioletRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMediumVioletRed" );
		var_sg_Graphics_ColorMidnightBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMidnightBlue" );
		var_sg_Graphics_ColorMintCream = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMintCream" );
		var_sg_Graphics_ColorMistyRose = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMistyRose" );
		var_sg_Graphics_ColorMoccasin = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorMoccasin" );
		var_sg_Graphics_ColorNavajoWhite = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorNavajoWhite" );
		var_sg_Graphics_ColorNavy = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorNavy" );
		var_sg_Graphics_ColorOldLace = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOldLace" );
		var_sg_Graphics_ColorOlive = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOlive" );
		var_sg_Graphics_ColorOliveDrab = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOliveDrab" );
		var_sg_Graphics_ColorOrange = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOrange" );
		var_sg_Graphics_ColorOrangeRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOrangeRed" );
		var_sg_Graphics_ColorOrchid = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorOrchid" );
		var_sg_Graphics_ColorPaleGoldenrod = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPaleGoldenrod" );
		var_sg_Graphics_ColorPaleGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPaleGreen" );
		var_sg_Graphics_ColorPaleTurquoise = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPaleTurquoise" );
		var_sg_Graphics_ColorPaleVioletRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPaleVioletRed" );
		var_sg_Graphics_ColorPapayaWhip = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPapayaWhip" );
		var_sg_Graphics_ColorPeachPuff = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPeachPuff" );
		var_sg_Graphics_ColorPeru = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPeru" );
		var_sg_Graphics_ColorPink = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPink" );
		var_sg_Graphics_ColorPlum = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPlum" );
		var_sg_Graphics_ColorPowderBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPowderBlue" );
		var_sg_Graphics_ColorPurple = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorPurple" );
		var_sg_Graphics_ColorRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorRed" );
		var_sg_Graphics_ColorRosyBrown = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorRosyBrown" );
		var_sg_Graphics_ColorRoyalBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorRoyalBlue" );
		var_sg_Graphics_ColorSaddleBrown = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSaddleBrown" );
		var_sg_Graphics_ColorSalmon = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSalmon" );
		var_sg_Graphics_ColorSandyBrown = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSandyBrown" );
		var_sg_Graphics_ColorSeaGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSeaGreen" );
		var_sg_Graphics_ColorSeaShell = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSeaShell" );
		var_sg_Graphics_ColorSienna = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSienna" );
		var_sg_Graphics_ColorSilver = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSilver" );
		var_sg_Graphics_ColorSkyBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSkyBlue" );
		var_sg_Graphics_ColorSlateBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSlateBlue" );
		var_sg_Graphics_ColorSlateGray = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSlateGray" );
		var_sg_Graphics_ColorSnow = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSnow" );
		var_sg_Graphics_ColorSpringGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSpringGreen" );
		var_sg_Graphics_ColorSteelBlue = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSteelBlue" );
		var_sg_Graphics_ColorSwinburneRed = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorSwinburneRed" );
		var_sg_Graphics_ColorTan = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorTan" );
		var_sg_Graphics_ColorTeal = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorTeal" );
		var_sg_Graphics_ColorThistle = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorThistle" );
		var_sg_Graphics_ColorToString = (void (__cdecl *)(color c, char *result)) GetProcAddress( LibraryHandle, "sg_Graphics_ColorToString" );
		var_sg_Graphics_ColorTomato = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorTomato" );
		var_sg_Graphics_ColorTransparent = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorTransparent" );
		var_sg_Graphics_ColorTurquoise = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorTurquoise" );
		var_sg_Graphics_ColorViolet = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorViolet" );
		var_sg_Graphics_ColorWheat = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorWheat" );
		var_sg_Graphics_ColorWhite = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorWhite" );
		var_sg_Graphics_ColorWhiteSmoke = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorWhiteSmoke" );
		var_sg_Graphics_ColorYellow = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorYellow" );
		var_sg_Graphics_ColorYellowGreen = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ColorYellowGreen" );
		var_sg_Graphics_CurrentClipForBitmap = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_CurrentClipForBitmap" );
		var_sg_Graphics_CurrentClipForWindow = (rectangle (__cdecl *)(window wnd)) GetProcAddress( LibraryHandle, "sg_Graphics_CurrentClipForWindow" );
		var_sg_Graphics_CurrentWindowClip = (rectangle (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_CurrentWindowClip" );
		var_sg_Graphics_DrawCircle = (void (__cdecl *)(color clr, float x, float y, float radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawCircle" );
		var_sg_Graphics_DrawCircleOpts = (void (__cdecl *)(color clr, float x, float y, float radius, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawCircleOpts" );
		var_sg_Graphics_DrawCircleStruct = (void (__cdecl *)(color clr, const circle *c)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawCircleStruct" );
		var_sg_Graphics_DrawCircleStructOpts = (void (__cdecl *)(color clr, const circle *c, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawCircleStructOpts" );
		var_sg_Graphics_DrawEllipse = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawEllipse" );
		var_sg_Graphics_DrawEllipseOpts = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawEllipseOpts" );
		var_sg_Graphics_DrawEllipseStruct = (void (__cdecl *)(color clr, const rectangle *rec)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawEllipseStruct" );
		var_sg_Graphics_DrawEllipseStructOpts = (void (__cdecl *)(color clr, const rectangle *rec, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawEllipseStructOpts" );
		var_sg_Graphics_DrawLine = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLine" );
		var_sg_Graphics_DrawLineOpts = (void (__cdecl *)(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineOpts" );
		var_sg_Graphics_DrawLinePt2Pt = (void (__cdecl *)(color clr, const point2d *fromPt, const point2d *toPt)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLinePt2Pt" );
		var_sg_Graphics_DrawLinePt2PtOpts = (void (__cdecl *)(color clr, const point2d *fromPt, const point2d *toPt, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLinePt2PtOpts" );
		var_sg_Graphics_DrawLineStruct = (void (__cdecl *)(color clr, const line_segment *l)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineStruct" );
		var_sg_Graphics_DrawLineStructOpts = (void (__cdecl *)(color clr, const line_segment *l, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineStructOpts" );
		var_sg_Graphics_DrawPixel = (void (__cdecl *)(color clr, float x, float y)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixel" );
		var_sg_Graphics_DrawPixelAtPoint = (void (__cdecl *)(color clr, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelAtPoint" );
		var_sg_Graphics_DrawPixelAtPointOpts = (void (__cdecl *)(color clr, const point2d *position, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelAtPointOpts" );
		var_sg_Graphics_DrawPixelOpts = (void (__cdecl *)(color clr, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelOpts" );
		var_sg_Graphics_DrawQuadStruct = (void (__cdecl *)(color clr, const quad *q)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawQuadStruct" );
		var_sg_Graphics_DrawQuadStructOpts = (void (__cdecl *)(color clr, const quad *q, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawQuadStructOpts" );
		var_sg_Graphics_DrawRectangle = (void (__cdecl *)(color clr, float x, float y, float width, float height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawRectangle" );
		var_sg_Graphics_DrawRectangleOpts = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawRectangleOpts" );
		var_sg_Graphics_DrawRectangleStruct = (void (__cdecl *)(color clr, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawRectangleStruct" );
		var_sg_Graphics_DrawRectangleStructOpts = (void (__cdecl *)(color clr, const rectangle *rect, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawRectangleStructOpts" );
		var_sg_Graphics_DrawTriangle = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangle" );
		var_sg_Graphics_DrawTriangleOpts = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangleOpts" );
		var_sg_Graphics_DrawTriangleStruct = (void (__cdecl *)(color clr, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangleStruct" );
		var_sg_Graphics_DrawTriangleStructOpts = (void (__cdecl *)(color clr, const triangle  *tri, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangleStructOpts" );
		var_sg_Graphics_FillCircle = (void (__cdecl *)(color clr, float x, float y, float radius)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircle" );
		var_sg_Graphics_FillCircleAtPoint = (void (__cdecl *)(color clr, const point2d *pt, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircleAtPoint" );
		var_sg_Graphics_FillCircleAtPointWithOpts = (void (__cdecl *)(color clr, const point2d *pt, int32_t radius, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircleAtPointWithOpts" );
		var_sg_Graphics_FillCircleOpts = (void (__cdecl *)(color clr, float x, float y, float radius, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircleOpts" );
		var_sg_Graphics_FillCircleStruct = (void (__cdecl *)(color clr, const circle *c)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircleStruct" );
		var_sg_Graphics_FillCircleStructOpts = (void (__cdecl *)(color clr, const circle *c, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillCircleStructOpts" );
		var_sg_Graphics_FillEllipse = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height)) GetProcAddress( LibraryHandle, "sg_Graphics_FillEllipse" );
		var_sg_Graphics_FillEllipseOpts = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillEllipseOpts" );
		var_sg_Graphics_FillEllipseStruct = (void (__cdecl *)(color clr, const rectangle *rec)) GetProcAddress( LibraryHandle, "sg_Graphics_FillEllipseStruct" );
		var_sg_Graphics_FillEllipseStructOpts = (void (__cdecl *)(color clr, const rectangle *rec, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillEllipseStructOpts" );
		var_sg_Graphics_FillQuadStruct = (void (__cdecl *)(color clr, const quad *q)) GetProcAddress( LibraryHandle, "sg_Graphics_FillQuadStruct" );
		var_sg_Graphics_FillQuadStructOpts = (void (__cdecl *)(color clr, const quad *q, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillQuadStructOpts" );
		var_sg_Graphics_FillRectangle = (void (__cdecl *)(color clr, float x, float y, float width, float height)) GetProcAddress( LibraryHandle, "sg_Graphics_FillRectangle" );
		var_sg_Graphics_FillRectangleOpts = (void (__cdecl *)(color clr, float xPos, float yPos, float width, float height, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillRectangleOpts" );
		var_sg_Graphics_FillRectangleStruct = (void (__cdecl *)(color clr, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Graphics_FillRectangleStruct" );
		var_sg_Graphics_FillRectangleStructOpts = (void (__cdecl *)(color clr, const rectangle *rect, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillRectangleStructOpts" );
		var_sg_Graphics_FillTriangle = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangle" );
		var_sg_Graphics_FillTriangleOpts = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangleOpts" );
		var_sg_Graphics_FillTriangleStruct = (void (__cdecl *)(color clr, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangleStruct" );
		var_sg_Graphics_FillTriangleStructOpts = (void (__cdecl *)(color clr, const triangle  *tri, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangleStructOpts" );
		var_sg_Graphics_GetPixelFromBitmap = (color (__cdecl *)(bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Graphics_GetPixelFromBitmap" );
		var_sg_Graphics_GetPixelFromScreen = (color (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Graphics_GetPixelFromScreen" );
		var_sg_Graphics_GetPixelFromWindow = (color (__cdecl *)(window wnd, float x, float y)) GetProcAddress( LibraryHandle, "sg_Graphics_GetPixelFromWindow" );
		var_sg_Graphics_GreenOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_GreenOf" );
		var_sg_Graphics_HSBColor = (color (__cdecl *)(float hue, float saturation, float brightness)) GetProcAddress( LibraryHandle, "sg_Graphics_HSBColor" );
		var_sg_Graphics_HSBValuesOf = (void (__cdecl *)(color c, float *h, float *s, float *b)) GetProcAddress( LibraryHandle, "sg_Graphics_HSBValuesOf" );
		var_sg_Graphics_HueOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_HueOf" );
		var_sg_Graphics_NumberOfResolutions = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_NumberOfResolutions" );
		var_sg_Graphics_OpenGraphicsWindow = (void (__cdecl *)(const char *caption, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_OpenGraphicsWindow" );
		var_sg_Graphics_PopClipForBitmap = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_PopClipForBitmap" );
		var_sg_Graphics_PopClipForWindow = (void (__cdecl *)(window wnd)) GetProcAddress( LibraryHandle, "sg_Graphics_PopClipForWindow" );
		var_sg_Graphics_PopClipScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_PopClipScreen" );
		var_sg_Graphics_PushClipRect = (void (__cdecl *)(const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipRect" );
		var_sg_Graphics_PushClipRectForBitmap = (void (__cdecl *)(bitmap bmp, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipRectForBitmap" );
		var_sg_Graphics_PushClipRectForWindow = (void (__cdecl *)(window wnd, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipRectForWindow" );
		var_sg_Graphics_RGBAColor = (color (__cdecl *)(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBAColor" );
		var_sg_Graphics_RGBAFloatColor = (color (__cdecl *)(float r, float g, float b, float a)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBAFloatColor" );
		var_sg_Graphics_RGBFloatColor = (color (__cdecl *)(float r, float g, float b)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBFloatColor" );
		var_sg_Graphics_RandomColor = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_RandomColor" );
		var_sg_Graphics_RandomRGBColor = (color (__cdecl *)(unsigned char alpha)) GetProcAddress( LibraryHandle, "sg_Graphics_RandomRGBColor" );
		var_sg_Graphics_RedOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_RedOf" );
		var_sg_Graphics_RefreshScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_RefreshScreen" );
		var_sg_Graphics_RefreshScreenRestrictFPS = (void (__cdecl *)(int32_t TargetFPS)) GetProcAddress( LibraryHandle, "sg_Graphics_RefreshScreenRestrictFPS" );
		var_sg_Graphics_RefreshScrenWindowFPS = (void (__cdecl *)(window wnd, int32_t targetFPS)) GetProcAddress( LibraryHandle, "sg_Graphics_RefreshScrenWindowFPS" );
		var_sg_Graphics_ResetClip = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ResetClip" );
		var_sg_Graphics_ResetClipForBitmap = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_ResetClipForBitmap" );
		var_sg_Graphics_ResetClipForWindow = (void (__cdecl *)(window wnd)) GetProcAddress( LibraryHandle, "sg_Graphics_ResetClipForWindow" );
		var_sg_Graphics_SaturationOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_SaturationOf" );
		var_sg_Graphics_SetClip = (void (__cdecl *)(const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_SetClip" );
		var_sg_Graphics_SetClipForBitmap = (void (__cdecl *)(bitmap bmp, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_SetClipForBitmap" );
		var_sg_Graphics_SetClipForWindow = (void (__cdecl *)(window wnd, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_SetClipForWindow" );
		var_sg_Graphics_SetIcon = (void (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Graphics_SetIcon" );
		var_sg_Graphics_ShowSwinGameSplashScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ShowSwinGameSplashScreen" );
		var_sg_Graphics_TakeScreenshot = (void (__cdecl *)(const char *basename)) GetProcAddress( LibraryHandle, "sg_Graphics_TakeScreenshot" );
		var_sg_Graphics_TransparencyOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_TransparencyOf" );
		var_sg_Images_BitmapCellCircle = (circle (__cdecl *)(bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCircle" );
		var_sg_Images_BitmapCellCircleScale = (circle (__cdecl *)(bitmap bmp, const point2d *pt, float scale)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCircleScale" );
		var_sg_Images_BitmapCellCircleXY = (circle (__cdecl *)(bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCircleXY" );
		var_sg_Images_BitmapCellColumns = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellColumns" );
		var_sg_Images_BitmapCellCount = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCount" );
		var_sg_Images_BitmapCellHeight = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellHeight" );
		var_sg_Images_BitmapCellRectangleAtOrigin = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRectangleAtOrigin" );
		var_sg_Images_BitmapCellRectangleXY = (rectangle (__cdecl *)(float x, float y, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRectangleXY" );
		var_sg_Images_BitmapCellRows = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRows" );
		var_sg_Images_BitmapCellWidth = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellWidth" );
		var_sg_Images_BitmapCircle = (circle (__cdecl *)(bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCircle" );
		var_sg_Images_BitmapCircleXY = (circle (__cdecl *)(bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCircleXY" );
		var_sg_Images_BitmapFilename = (void (__cdecl *)(bitmap bmp, char *result)) GetProcAddress( LibraryHandle, "sg_Images_BitmapFilename" );
		var_sg_Images_BitmapHeight = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapHeight" );
		var_sg_Images_BitmapName = (void (__cdecl *)(bitmap bmp, char *result)) GetProcAddress( LibraryHandle, "sg_Images_BitmapName" );
		var_sg_Images_BitmapNamed = (bitmap (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_BitmapNamed" );
		var_sg_Images_BitmapRectAtOrigin = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectAtOrigin" );
		var_sg_Images_BitmapRectXY = (rectangle (__cdecl *)(float x, float y, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectXY" );
		var_sg_Images_BitmapRectangleOfCell = (rectangle (__cdecl *)(bitmap src, int32_t cell)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectangleOfCell" );
		var_sg_Images_BitmapSetCellDetails = (void (__cdecl *)(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count)) GetProcAddress( LibraryHandle, "sg_Images_BitmapSetCellDetails" );
		var_sg_Images_BitmapWidth = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapWidth" );
		var_sg_Images_BitmapsInterchangable = (bool (__cdecl *)(bitmap bmp1, bitmap bmp2)) GetProcAddress( LibraryHandle, "sg_Images_BitmapsInterchangable" );
		var_sg_Images_ClearSurface = (void (__cdecl *)(bitmap dest, color toColor)) GetProcAddress( LibraryHandle, "sg_Images_ClearSurface" );
		var_sg_Images_ClearSurfaceToBlack = (void (__cdecl *)(bitmap dest)) GetProcAddress( LibraryHandle, "sg_Images_ClearSurfaceToBlack" );
		var_sg_Images_CreateBitmap = (bitmap (__cdecl *)(int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Images_CreateBitmap" );
		var_sg_Images_CreateBitmapNamed = (bitmap (__cdecl *)(const char *name, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Images_CreateBitmapNamed" );
		var_sg_Images_DrawBitmap = (void (__cdecl *)(bitmap src, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmap" );
		var_sg_Images_DrawBitmapNamed = (void (__cdecl *)(const char *name, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapNamed" );
		var_sg_Images_DrawBitmapNamedWithOpts = (void (__cdecl *)(const char *name, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapNamedWithOpts" );
		var_sg_Images_DrawBitmapWithOpts = (void (__cdecl *)(bitmap src, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapWithOpts" );
		var_sg_Images_DrawCell = (void (__cdecl *)(bitmap src, int32_t cell, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawCell" );
		var_sg_Images_DrawCellOpts = (void (__cdecl *)(bitmap src, int32_t cell, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellOpts" );
		var_sg_Images_FreeBitmap = (void (__cdecl *)(bitmap bitmapToFree)) GetProcAddress( LibraryHandle, "sg_Images_FreeBitmap" );
		var_sg_Images_HasBitmap = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_HasBitmap" );
		var_sg_Images_LoadBitmap = (bitmap (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Images_LoadBitmap" );
		var_sg_Images_LoadBitmapNamed = (bitmap (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Images_LoadBitmapNamed" );
		var_sg_Images_PixelDrawnAtPoint = (bool (__cdecl *)(bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_PixelDrawnAtPoint" );
		var_sg_Images_ReleaseAllBitmaps = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Images_ReleaseAllBitmaps" );
		var_sg_Images_ReleaseBitmap = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_ReleaseBitmap" );
		var_sg_Images_SaveBitmap = (void (__cdecl *)(bitmap src, const char *filepath)) GetProcAddress( LibraryHandle, "sg_Images_SaveBitmap" );
		var_sg_Images_SetupBitmapForCollisions = (void (__cdecl *)(bitmap src)) GetProcAddress( LibraryHandle, "sg_Images_SetupBitmapForCollisions" );
		var_sg_Input_AnyKeyPressed = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_AnyKeyPressed" );
		var_sg_Input_EndReadingText = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Input_EndReadingText" );
		var_sg_Input_HideMouse = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_HideMouse" );
		var_sg_Input_KeyDown = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyDown" );
		var_sg_Input_KeyName = (void (__cdecl *)(key_code key, char *result)) GetProcAddress( LibraryHandle, "sg_Input_KeyName" );
		var_sg_Input_KeyReleased = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyReleased" );
		var_sg_Input_KeyTyped = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyTyped" );
		var_sg_Input_KeyUp = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyUp" );
		var_sg_Input_MouseClicked = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseClicked" );
		var_sg_Input_MouseDown = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseDown" );
		var_sg_Input_MouseMovement = (vector (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseMovement" );
		var_sg_Input_MousePosition = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MousePosition" );
		var_sg_Input_MousePositionAsVector = (vector (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MousePositionAsVector" );
		var_sg_Input_MouseShown = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseShown" );
		var_sg_Input_MouseUp = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseUp" );
		var_sg_Input_MouseX = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseX" );
		var_sg_Input_MouseY = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseY" );
		var_sg_Input_MoveMouse = (void (__cdecl *)(int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Input_MoveMouse" );
		var_sg_Input_MoveMouseToPoint = (void (__cdecl *)(const point2d *point)) GetProcAddress( LibraryHandle, "sg_Input_MoveMouseToPoint" );
		var_sg_Input_ProcessEvents = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ProcessEvents" );
		var_sg_Input_QuitRequested = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_QuitRequested" );
		var_sg_Input_ReadingText = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ReadingText" );
		var_sg_Input_SetMouseVisible = (void (__cdecl *)(bool show)) GetProcAddress( LibraryHandle, "sg_Input_SetMouseVisible" );
		var_sg_Input_ShowMouse = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ShowMouse" );
		var_sg_Input_StartReadingText = (void (__cdecl *)(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingText" );
		var_sg_Input_StartReadingTextWithText = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithText" );
		var_sg_Input_StartReadingTextWithTextAndColorInArea = (void (__cdecl *)(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextAndColorInArea" );
		var_sg_Input_StartReadingTextWithTextAtPt = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextAtPt" );
		var_sg_Input_StartReadingTextWithTextInArea = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextInArea" );
		var_sg_Input_StartReadingTextWithinArea = (void (__cdecl *)(color textColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithinArea" );
		var_sg_Input_TextEntryCancelled = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_TextEntryCancelled" );
		var_sg_Input_TextReadAsASCII = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Input_TextReadAsASCII" );
		var_sg_Networking_BroadcastMessage = (void (__cdecl *)(const char *aMsg)) GetProcAddress( LibraryHandle, "sg_Networking_BroadcastMessage" );
		var_sg_Networking_BroadcastMessageToServer = (void (__cdecl *)(const char *aMsg, server_socket svr)) GetProcAddress( LibraryHandle, "sg_Networking_BroadcastMessageToServer" );
		var_sg_Networking_BroadcastMessageToServerNamed = (void (__cdecl *)(const char *aMsg, const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_BroadcastMessageToServerNamed" );
		var_sg_Networking_CheckNetworkActivity = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CheckNetworkActivity" );
		var_sg_Networking_ClearMessagesNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ClearMessagesNamed" );
		var_sg_Networking_CloseAllConnections = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllConnections" );
		var_sg_Networking_CloseAllServers = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllServers" );
		var_sg_Networking_CloseAllUDPSockets = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllUDPSockets" );
		var_sg_Networking_CloseConnection = (bool (__cdecl *)(connection *aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_CloseConnection" );
		var_sg_Networking_CloseConnectionNamed = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_CloseConnectionNamed" );
		var_sg_Networking_CloseMessage = (void (__cdecl *)(message msg)) GetProcAddress( LibraryHandle, "sg_Networking_CloseMessage" );
		var_sg_Networking_CloseServer = (bool (__cdecl *)(server_socket *svr)) GetProcAddress( LibraryHandle, "sg_Networking_CloseServer" );
		var_sg_Networking_CloseServerNamed = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_CloseServerNamed" );
		var_sg_Networking_CloseUDPSocket = (bool (__cdecl *)(unsigned short int aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CloseUDPSocket" );
		var_sg_Networking_ConnectionClearMessages = (void (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionClearMessages" );
		var_sg_Networking_ConnectionCount = (int32_t (__cdecl *)(server_socket server)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionCount" );
		var_sg_Networking_ConnectionCountForServerNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionCountForServerNamed" );
		var_sg_Networking_ConnectionIP = (uint32_t (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionIP" );
		var_sg_Networking_ConnectionIPNamed = (uint32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionIPNamed" );
		var_sg_Networking_ConnectionMessageCount = (int32_t (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionMessageCount" );
		var_sg_Networking_ConnectionNamed = (connection (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionNamed" );
		var_sg_Networking_ConnectionOpen = (bool (__cdecl *)(connection con)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionOpen" );
		var_sg_Networking_ConnectionOpenNamed = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionOpenNamed" );
		var_sg_Networking_ConnectionPort = (unsigned short int (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionPort" );
		var_sg_Networking_ConnectionPortNamed = (unsigned short int (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionPortNamed" );
		var_sg_Networking_CreateServer = (server_socket (__cdecl *)(const char *name, unsigned short int port)) GetProcAddress( LibraryHandle, "sg_Networking_CreateServer" );
		var_sg_Networking_CreateServerWithProtocol = (server_socket (__cdecl *)(const char *name, unsigned short int port, connection_type protocol)) GetProcAddress( LibraryHandle, "sg_Networking_CreateServerWithProtocol" );
		var_sg_Networking_DecToHex = (void (__cdecl *)(uint32_t aDec, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_DecToHex" );
		var_sg_Networking_FreeConnection = (void (__cdecl *)(connection *aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_FreeConnection" );
		var_sg_Networking_FreeServer = (void (__cdecl *)(server_socket *svr)) GetProcAddress( LibraryHandle, "sg_Networking_FreeServer" );
		var_sg_Networking_HasMessageOnConnection = (bool (__cdecl *)(connection con)) GetProcAddress( LibraryHandle, "sg_Networking_HasMessageOnConnection" );
		var_sg_Networking_HasMessageOnConnectionNamed = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_HasMessageOnConnectionNamed" );
		var_sg_Networking_HasMessageOnServer = (bool (__cdecl *)(server_socket svr)) GetProcAddress( LibraryHandle, "sg_Networking_HasMessageOnServer" );
		var_sg_Networking_HasMessages = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_HasMessages" );
		var_sg_Networking_HasNewConnections = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_HasNewConnections" );
		var_sg_Networking_HexStrToIPv4 = (void (__cdecl *)(const char *aHex, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_HexStrToIPv4" );
		var_sg_Networking_HexToDecString = (void (__cdecl *)(const char *aHex, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_HexToDecString" );
		var_sg_Networking_IPv4ToDec = (uint32_t (__cdecl *)(const char *aIP)) GetProcAddress( LibraryHandle, "sg_Networking_IPv4ToDec" );
		var_sg_Networking_IPv4ToStr = (void (__cdecl *)(uint32_t ip, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_IPv4ToStr" );
		var_sg_Networking_LastConnection = (connection (__cdecl *)(server_socket server)) GetProcAddress( LibraryHandle, "sg_Networking_LastConnection" );
		var_sg_Networking_LastConnectionForServerNamed = (connection (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_LastConnectionForServerNamed" );
		var_sg_Networking_MessageConnection = (connection (__cdecl *)(message msg)) GetProcAddress( LibraryHandle, "sg_Networking_MessageConnection" );
		var_sg_Networking_MessageCountOnConnectionNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_MessageCountOnConnectionNamed" );
		var_sg_Networking_MessageData = (void (__cdecl *)(message msg, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_MessageData" );
		var_sg_Networking_MessageHost = (void (__cdecl *)(message msg, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_MessageHost" );
		var_sg_Networking_MessagePort = (unsigned short int (__cdecl *)(message msg)) GetProcAddress( LibraryHandle, "sg_Networking_MessagePort" );
		var_sg_Networking_MessageProtocol = (connection_type (__cdecl *)(message msg)) GetProcAddress( LibraryHandle, "sg_Networking_MessageProtocol" );
		var_sg_Networking_MyIP = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Networking_MyIP" );
		var_sg_Networking_OpenConnection = (connection (__cdecl *)(const char *host, unsigned short int port)) GetProcAddress( LibraryHandle, "sg_Networking_OpenConnection" );
		var_sg_Networking_OpenConnectionNamed = (connection (__cdecl *)(const char *name, const char *host, unsigned short int port)) GetProcAddress( LibraryHandle, "sg_Networking_OpenConnectionNamed" );
		var_sg_Networking_OpenConnectionNamedWithProtocol = (connection (__cdecl *)(const char *name, const char *host, unsigned short int port, connection_type protocol)) GetProcAddress( LibraryHandle, "sg_Networking_OpenConnectionNamedWithProtocol" );
		var_sg_Networking_ReadMessage = (message (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessage" );
		var_sg_Networking_ReadMessageData = (void (__cdecl *)(connection aConnection, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessageData" );
		var_sg_Networking_ReadMessageDataFromServer = (void (__cdecl *)(server_socket svr, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessageDataFromServer" );
		var_sg_Networking_ReadMessageDataNamed = (void (__cdecl *)(const char *name, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessageDataNamed" );
		var_sg_Networking_ReadMessageFromServer = (message (__cdecl *)(server_socket svr)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessageFromServer" );
		var_sg_Networking_ReadMessageNamed = (message (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessageNamed" );
		var_sg_Networking_Reconnect = (void (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_Reconnect" );
		var_sg_Networking_ReconnectConnectionNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ReconnectConnectionNamed" );
		var_sg_Networking_ReleaseAllConnections = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_ReleaseAllConnections" );
		var_sg_Networking_RetreiveConnection = (connection (__cdecl *)(server_socket server, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Networking_RetreiveConnection" );
		var_sg_Networking_RetrieveConnectionFromServerNamed = (connection (__cdecl *)(const char *name, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Networking_RetrieveConnectionFromServerNamed" );
		var_sg_Networking_SendMessageTo = (bool (__cdecl *)(const char *aMsg, connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_SendMessageTo" );
		var_sg_Networking_SendMessageToConnectionNamed = (bool (__cdecl *)(const char *aMsg, const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_SendMessageToConnectionNamed" );
		var_sg_Networking_ServerClearMessages = (void (__cdecl *)(server_socket svr)) GetProcAddress( LibraryHandle, "sg_Networking_ServerClearMessages" );
		var_sg_Networking_ServerHasNewConnection = (bool (__cdecl *)(server_socket server)) GetProcAddress( LibraryHandle, "sg_Networking_ServerHasNewConnection" );
		var_sg_Networking_ServerMessageCount = (int32_t (__cdecl *)(server_socket svr)) GetProcAddress( LibraryHandle, "sg_Networking_ServerMessageCount" );
		var_sg_Networking_ServerNamed = (server_socket (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ServerNamed" );
		var_sg_Networking_ServerNamedHasNewConnection = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Networking_ServerNamedHasNewConnection" );
		var_sg_Networking_SetUDPPacketSize = (void (__cdecl *)(int32_t val)) GetProcAddress( LibraryHandle, "sg_Networking_SetUDPPacketSize" );
		var_sg_Networking_UDPPacketSize = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_UDPPacketSize" );
		var_sg_Physics_BitmapAtPointsCollision = (bool (__cdecl *)(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapAtPointsCollision" );
		var_sg_Physics_BitmapCollision = (bool (__cdecl *)(bitmap bmp1, float x1, float y1, bitmap bmp2, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapCollision" );
		var_sg_Physics_BitmapPartAtPtRectCollision = (bool (__cdecl *)(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartAtPtRectCollision" );
		var_sg_Physics_BitmapPartPointCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, const rectangle *part, float ptX, float ptY)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartPointCollision" );
		var_sg_Physics_BitmapPartPointXYCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, const rectangle *part, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartPointXYCollision" );
		var_sg_Physics_BitmapPartRectCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, const rectangle *part, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartRectCollision" );
		var_sg_Physics_BitmapPointCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, float ptX, float ptY)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPointCollision" );
		var_sg_Physics_BitmapPointPtCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPointPtCollision" );
		var_sg_Physics_BitmapRectCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, float rectX, float rectY, float rectWidth, float rectHeight)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapRectCollision" );
		var_sg_Physics_BitmapRectangleCollision = (bool (__cdecl *)(bitmap bmp, float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapRectangleCollision" );
		var_sg_Physics_BitmapsPartsCollision = (bool (__cdecl *)(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapsPartsCollision" );
		var_sg_Physics_CellBitmapCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapCollision" );
		var_sg_Physics_CellBitmapCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapCollisionAtPt" );
		var_sg_Physics_CellBitmapPartCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle *part)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapPartCollision" );
		var_sg_Physics_CellBitmapPartCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapPartCollisionAtPt" );
		var_sg_Physics_CellCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell1, float x1, float y1, bitmap bmp2, int32_t cell2, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Physics_CellCollision" );
		var_sg_Physics_CellCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_CellCollisionAtPt" );
		var_sg_Physics_CellRectCollision = (bool (__cdecl *)(bitmap bmp, int32_t cell, float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CellRectCollision" );
		var_sg_Physics_CellRectCollisionAtPt = (bool (__cdecl *)(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CellRectCollisionAtPt" );
		var_sg_Physics_CircleCircleCollision = (bool (__cdecl *)(const circle *c1, const circle *c2)) GetProcAddress( LibraryHandle, "sg_Physics_CircleCircleCollision" );
		var_sg_Physics_CircleRectCollision = (bool (__cdecl *)(const circle *c, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CircleRectCollision" );
		var_sg_Physics_CircleTriangleCollision = (bool (__cdecl *)(const circle *c, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Physics_CircleTriangleCollision" );
		var_sg_Physics_CollideCircleCircle = (void (__cdecl *)(sprite s, const circle *c)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleCircle" );
		var_sg_Physics_CollideCircleLine = (void (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleLine" );
		var_sg_Physics_CollideCircleRectangle = (void (__cdecl *)(sprite s, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleRectangle" );
		var_sg_Physics_CollideCircleTriangle = (void (__cdecl *)(sprite s, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleTriangle" );
		var_sg_Physics_CollideCircles = (void (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircles" );
		var_sg_Physics_RectLineCollision = (bool (__cdecl *)(const rectangle *rect, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_RectLineCollision" );
		var_sg_Physics_SideForCollisionTest = (collision_side (__cdecl *)(const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Physics_SideForCollisionTest" );
		var_sg_Physics_SpriteAtPoint = (bool (__cdecl *)(sprite s, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteAtPoint" );
		var_sg_Physics_SpriteBitmapAtPointCollision = (bool (__cdecl *)(sprite s, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteBitmapAtPointCollision" );
		var_sg_Physics_SpriteBitmapCollision = (bool (__cdecl *)(sprite s, bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteBitmapCollision" );
		var_sg_Physics_SpriteCircleLineCollision = (bool (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteCircleLineCollision" );
		var_sg_Physics_SpriteCollision = (bool (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteCollision" );
		var_sg_Physics_SpriteRectCollision = (bool (__cdecl *)(sprite s, float x, float y, float width, float height)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectCollision" );
		var_sg_Physics_SpriteRectLineCollision = (bool (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectLineCollision" );
		var_sg_Physics_SpriteRectangleCollision = (bool (__cdecl *)(sprite s, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectangleCollision" );
		var_sg_Physics_TriangleLineCollision = (bool (__cdecl *)(const triangle  *tri, const line_segment *ln)) GetProcAddress( LibraryHandle, "sg_Physics_TriangleLineCollision" );
		var_sg_Resources_AppPath = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Resources_AppPath" );
		var_sg_Resources_FilenameToResource = (void (__cdecl *)(const char *name, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_FilenameToResource" );
		var_sg_Resources_HasResourceBundle = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Resources_HasResourceBundle" );
		var_sg_Resources_LoadResourceBundle = (void (__cdecl *)(const char *name, bool showProgress)) GetProcAddress( LibraryHandle, "sg_Resources_LoadResourceBundle" );
		var_sg_Resources_LoadResourceBundleNamed = (void (__cdecl *)(const char *name, const char *filename, bool showProgress)) GetProcAddress( LibraryHandle, "sg_Resources_LoadResourceBundleNamed" );
		var_sg_Resources_PathToOtherResource = (void (__cdecl *)(const char *filename, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToOtherResource" );
		var_sg_Resources_PathToOtherResourceWithBase = (void (__cdecl *)(const char *path, const char *filename, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToOtherResourceWithBase" );
		var_sg_Resources_PathToResource = (void (__cdecl *)(const char *filename, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResource" );
		var_sg_Resources_PathToResourceWithBase = (void (__cdecl *)(const char *path, const char *filename, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourceWithBase" );
		var_sg_Resources_PathToResourseInSubdir = (void (__cdecl *)(const char *filename, const char *subdir, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourseInSubdir" );
		var_sg_Resources_PathToResourseKindInSubdir = (void (__cdecl *)(const char *filename, resource_kind kind, const char *subdir, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourseKindInSubdir" );
		var_sg_Resources_RegisterFreeNotifier = (void (__cdecl *)(free_notifier fn)) GetProcAddress( LibraryHandle, "sg_Resources_RegisterFreeNotifier" );
		var_sg_Resources_ReleaseAllResources = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Resources_ReleaseAllResources" );
		var_sg_Resources_ReleaseResourceBundle = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Resources_ReleaseResourceBundle" );
		var_sg_Resources_SetAppPath = (void (__cdecl *)(const char *path)) GetProcAddress( LibraryHandle, "sg_Resources_SetAppPath" );
		var_sg_Resources_SetAppPathWithExe = (void (__cdecl *)(const char *path, bool withExe)) GetProcAddress( LibraryHandle, "sg_Resources_SetAppPathWithExe" );
		var_sg_Sprites_CallForAllSprites = (void (__cdecl *)(sprite_function fn)) GetProcAddress( LibraryHandle, "sg_Sprites_CallForAllSprites" );
		var_sg_Sprites_CallOnSpriteEvent = (void (__cdecl *)(sprite_event_handler handler)) GetProcAddress( LibraryHandle, "sg_Sprites_CallOnSpriteEvent" );
		var_sg_Sprites_CenterPoint = (point2d (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_CenterPoint" );
		var_sg_Sprites_CreateBasicSprite = (sprite (__cdecl *)(bitmap layer)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSprite" );
		var_sg_Sprites_CreateBasicSpriteNamed = (sprite (__cdecl *)(const char *name, bitmap layer)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSpriteNamed" );
		var_sg_Sprites_CreateSpritePack = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpritePack" );
		var_sg_Sprites_CreateSpriteWithAnimation = (sprite (__cdecl *)(bitmap layer, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimation" );
		var_sg_Sprites_CreateSpriteWithAnimationNamed = (sprite (__cdecl *)(const char *name, bitmap layer, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimationNamed" );
		var_sg_Sprites_CreateSpriteWithBitmapAndAnimationName = (sprite (__cdecl *)(const char *bitmapName, const char *animationName)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithBitmapAndAnimationName" );
		var_sg_Sprites_CurrentSpritePack = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_CurrentSpritePack" );
		var_sg_Sprites_DrawAllSprites = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Sprites_DrawAllSprites" );
		var_sg_Sprites_DrawSpriteOffsetPoint = (void (__cdecl *)(sprite s, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Sprites_DrawSpriteOffsetPoint" );
		var_sg_Sprites_DrawSpriteOffsetXY = (void (__cdecl *)(sprite s, int32_t xOffset, int32_t yOffset)) GetProcAddress( LibraryHandle, "sg_Sprites_DrawSpriteOffsetXY" );
		var_sg_Sprites_FreeSprite = (void (__cdecl *)(sprite *s)) GetProcAddress( LibraryHandle, "sg_Sprites_FreeSprite" );
		var_sg_Sprites_HasSprite = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_HasSprite" );
		var_sg_Sprites_HasSpritePack = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_HasSpritePack" );
		var_sg_Sprites_MoveSpritePct = (void (__cdecl *)(sprite s, float pct)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpritePct" );
		var_sg_Sprites_MoveSpriteTo = (void (__cdecl *)(sprite s, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpriteTo" );
		var_sg_Sprites_MoveSpriteVecPct = (void (__cdecl *)(sprite s, const vector *distance, float pct)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpriteVecPct" );
		var_sg_Sprites_ReleaseAllSprites = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Sprites_ReleaseAllSprites" );
		var_sg_Sprites_ReleaseSprite = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_ReleaseSprite" );
		var_sg_Sprites_ReplayAnimationWithSound = (void (__cdecl *)(sprite s, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_ReplayAnimationWithSound" );
		var_sg_Sprites_SelectSpritePack = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SelectSpritePack" );
		var_sg_Sprites_SpriteAddLayer = (int32_t (__cdecl *)(sprite s, bitmap newLayer, const char *layerName)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddLayer" );
		var_sg_Sprites_SpriteAddToVelocity = (void (__cdecl *)(sprite s, const vector *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddToVelocity" );
		var_sg_Sprites_SpriteAddValue = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddValue" );
		var_sg_Sprites_SpriteAddValueWithInitialValue = (void (__cdecl *)(sprite s, const char *name, float initVal)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddValueWithInitialValue" );
		var_sg_Sprites_SpriteAnchorPoint = (point2d (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAnchorPoint" );
		var_sg_Sprites_SpriteAnimationHasEnded = (bool (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAnimationHasEnded" );
		var_sg_Sprites_SpriteAnimationName = (void (__cdecl *)(sprite s, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAnimationName" );
		var_sg_Sprites_SpriteBringLayerForward = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteBringLayerForward" );
		var_sg_Sprites_SpriteBringLayerToFront = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteBringLayerToFront" );
		var_sg_Sprites_SpriteCallOnEvent = (void (__cdecl *)(sprite s, sprite_event_handler handler)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCallOnEvent" );
		var_sg_Sprites_SpriteCircle = (circle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCircle" );
		var_sg_Sprites_SpriteCollisionBitmap = (bitmap (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionBitmap" );
		var_sg_Sprites_SpriteCollisionCircle = (circle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionCircle" );
		var_sg_Sprites_SpriteCollisionKind = (collision_test_kind (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionKind" );
		var_sg_Sprites_SpriteCollisionRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionRectangle" );
		var_sg_Sprites_SpriteCurrentCell = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCurrentCell" );
		var_sg_Sprites_SpriteCurrentCellRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCurrentCellRectangle" );
		var_sg_Sprites_SpriteDX = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteDX" );
		var_sg_Sprites_SpriteDY = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteDY" );
		var_sg_Sprites_SpriteHeading = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHeading" );
		var_sg_Sprites_SpriteHeight = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHeight" );
		var_sg_Sprites_SpriteHideLayer = (void (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHideLayer" );
		var_sg_Sprites_SpriteHideLayerNamed = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHideLayerNamed" );
		var_sg_Sprites_SpriteLayerAtIdx = (bitmap (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerAtIdx" );
		var_sg_Sprites_SpriteLayerCircle = (circle (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerCircle" );
		var_sg_Sprites_SpriteLayerCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerCount" );
		var_sg_Sprites_SpriteLayerHeight = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerHeight" );
		var_sg_Sprites_SpriteLayerIndex = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerIndex" );
		var_sg_Sprites_SpriteLayerName = (void (__cdecl *)(sprite s, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerName" );
		var_sg_Sprites_SpriteLayerNamed = (bitmap (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamed" );
		var_sg_Sprites_SpriteLayerNamedCircle = (circle (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedCircle" );
		var_sg_Sprites_SpriteLayerNamedHeight = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedHeight" );
		var_sg_Sprites_SpriteLayerNamedRectangle = (rectangle (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedRectangle" );
		var_sg_Sprites_SpriteLayerNamedWidth = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedWidth" );
		var_sg_Sprites_SpriteLayerOffset = (point2d (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerOffset" );
		var_sg_Sprites_SpriteLayerOffsetNamed = (point2d (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerOffsetNamed" );
		var_sg_Sprites_SpriteLayerRectangle = (rectangle (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerRectangle" );
		var_sg_Sprites_SpriteLayerWidth = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerWidth" );
		var_sg_Sprites_SpriteLocationMatrix = (matrix2d  (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLocationMatrix" );
		var_sg_Sprites_SpriteMass = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteMass" );
		var_sg_Sprites_SpriteMoveFromAnchorPoint = (bool (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteMoveFromAnchorPoint" );
		var_sg_Sprites_SpriteMoveTo = (void (__cdecl *)(sprite s, const point2d *pt, int32_t takingSeconds)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteMoveTo" );
		var_sg_Sprites_SpriteName = (void (__cdecl *)(sprite sprt, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteName" );
		var_sg_Sprites_SpriteNamed = (sprite (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteNamed" );
		var_sg_Sprites_SpriteOffscreen = (bool (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOffscreen" );
		var_sg_Sprites_SpriteOnScreenAt = (bool (__cdecl *)(sprite s, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOnScreenAt" );
		var_sg_Sprites_SpriteOnScreenAtPoint = (bool (__cdecl *)(sprite s, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOnScreenAtPoint" );
		var_sg_Sprites_SpritePosition = (point2d (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpritePosition" );
		var_sg_Sprites_SpriteReplayAnimation = (void (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteReplayAnimation" );
		var_sg_Sprites_SpriteRotation = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteRotation" );
		var_sg_Sprites_SpriteScale = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteScale" );
		var_sg_Sprites_SpriteScreenRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteScreenRectangle" );
		var_sg_Sprites_SpriteSendLayerBackward = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSendLayerBackward" );
		var_sg_Sprites_SpriteSendLayerToBack = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSendLayerToBack" );
		var_sg_Sprites_SpriteSetAnchorPoint = (void (__cdecl *)(sprite s, point2d pt)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetAnchorPoint" );
		var_sg_Sprites_SpriteSetCollisionBitmap = (void (__cdecl *)(sprite s, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetCollisionBitmap" );
		var_sg_Sprites_SpriteSetCollisionKind = (void (__cdecl *)(sprite s, collision_test_kind value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetCollisionKind" );
		var_sg_Sprites_SpriteSetDX = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetDX" );
		var_sg_Sprites_SpriteSetDY = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetDY" );
		var_sg_Sprites_SpriteSetHeading = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetHeading" );
		var_sg_Sprites_SpriteSetLayerOffset = (void (__cdecl *)(sprite s, int32_t idx, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetLayerOffset" );
		var_sg_Sprites_SpriteSetLayerOffsetNamed = (void (__cdecl *)(sprite s, const char *name, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetLayerOffsetNamed" );
		var_sg_Sprites_SpriteSetMass = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetMass" );
		var_sg_Sprites_SpriteSetMoveFromAnchorPoint = (void (__cdecl *)(sprite s, bool value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetMoveFromAnchorPoint" );
		var_sg_Sprites_SpriteSetPosition = (void (__cdecl *)(sprite s, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetPosition" );
		var_sg_Sprites_SpriteSetRotation = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetRotation" );
		var_sg_Sprites_SpriteSetScale = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetScale" );
		var_sg_Sprites_SpriteSetSpeed = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetSpeed" );
		var_sg_Sprites_SpriteSetValue = (void (__cdecl *)(sprite s, int32_t idx, float val)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetValue" );
		var_sg_Sprites_SpriteSetValueNamed = (void (__cdecl *)(sprite s, const char *name, float val)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetValueNamed" );
		var_sg_Sprites_SpriteSetVelocity = (void (__cdecl *)(sprite s, const vector *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetVelocity" );
		var_sg_Sprites_SpriteSetX = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetX" );
		var_sg_Sprites_SpriteSetY = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetY" );
		var_sg_Sprites_SpriteShowLayer = (int32_t (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteShowLayer" );
		var_sg_Sprites_SpriteShowLayerNamed = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteShowLayerNamed" );
		var_sg_Sprites_SpriteSpeed = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSpeed" );
		var_sg_Sprites_SpriteStartAnimation = (void (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimation" );
		var_sg_Sprites_SpriteStartAnimationNamed = (void (__cdecl *)(sprite s, const char *named)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationNamed" );
		var_sg_Sprites_SpriteStartAnimationNamedWithSound = (void (__cdecl *)(sprite s, const char *named, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationNamedWithSound" );
		var_sg_Sprites_SpriteStartAnimationWithSound = (void (__cdecl *)(sprite s, int32_t idx, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationWithSound" );
		var_sg_Sprites_SpriteStopCallingOnEvent = (void (__cdecl *)(sprite s, sprite_event_handler handler)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStopCallingOnEvent" );
		var_sg_Sprites_SpriteToggleLayerNamedVisible = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteToggleLayerNamedVisible" );
		var_sg_Sprites_SpriteToggleLayerVisible = (void (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteToggleLayerVisible" );
		var_sg_Sprites_SpriteValue = (float (__cdecl *)(sprite s, int32_t index)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValue" );
		var_sg_Sprites_SpriteValueCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueCount" );
		var_sg_Sprites_SpriteValueName = (void (__cdecl *)(sprite s, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueName" );
		var_sg_Sprites_SpriteValueNamed = (float (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueNamed" );
		var_sg_Sprites_SpriteVelocity = (vector (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVelocity" );
		var_sg_Sprites_SpriteVisibleIndexOfLayer = (int32_t (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleIndexOfLayer" );
		var_sg_Sprites_SpriteVisibleIndexOfLayerNamed = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleIndexOfLayerNamed" );
		var_sg_Sprites_SpriteVisibleLayer = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayer" );
		var_sg_Sprites_SpriteVisibleLayerCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayerCount" );
		var_sg_Sprites_SpriteVisibleLayerId = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayerId" );
		var_sg_Sprites_SpriteWidth = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteWidth" );
		var_sg_Sprites_SpriteX = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteX" );
		var_sg_Sprites_SpriteY = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteY" );
		var_sg_Sprites_StopCallingOnSpriteEvent = (void (__cdecl *)(sprite_event_handler handler)) GetProcAddress( LibraryHandle, "sg_Sprites_StopCallingOnSpriteEvent" );
		var_sg_Sprites_UpdateAllSprites = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateAllSprites" );
		var_sg_Sprites_UpdateAllSpritesPct = (void (__cdecl *)(float pct)) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateAllSpritesPct" );
		var_sg_Sprites_UpdateSpriteAnimationPctWithSound = (void (__cdecl *)(sprite s, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateSpriteAnimationPctWithSound" );
		var_sg_Sprites_UpdateSpritePctWithSound = (void (__cdecl *)(sprite s, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateSpritePctWithSound" );
		var_sg_Sprites_VectorFromCenterSpriteToPoint = (vector (__cdecl *)(sprite s, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Sprites_VectorFromCenterSpriteToPoint" );
		var_sg_Sprites_VectorFromTo = (vector (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Sprites_VectorFromTo" );
		var_sg_Text_DrawFramerateWithSimpleFont = (void (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawFramerateWithSimpleFont" );
		var_sg_Text_DrawSimpleText = (void (__cdecl *)(const char *theText, color textColor, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleText" );
		var_sg_Text_DrawSimpleTextOpts = (void (__cdecl *)(const char *theText, color textColor, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleTextOpts" );
		var_sg_Text_DrawText = (void (__cdecl *)(const char *theText, color textColor, font theFont, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawText" );
		var_sg_Text_DrawTextInRect = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRect" );
		var_sg_Text_DrawTextInRectOpts = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *area, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRectOpts" );
		var_sg_Text_DrawTextInRectWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRectWithFontNamed" );
		var_sg_Text_DrawTextInRectWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRectWithFontNamedAndSize" );
		var_sg_Text_DrawTextInRectWithFontNamedAndSizeOpts = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *area, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRectWithFontNamedAndSizeOpts" );
		var_sg_Text_DrawTextInRectWithFontNamedOpts = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *area, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextInRectWithFontNamedOpts" );
		var_sg_Text_DrawTextOpts = (void (__cdecl *)(const char *theText, color textColor, font theFont, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOpts" );
		var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize = (bitmap (__cdecl *)(font font, const char *str, color clrFg, color backgroundColor)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize" );
		var_sg_Text_DrawTextWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, const char *name, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamed" );
		var_sg_Text_DrawTextWithFontNamedAndSizeOpts = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamedAndSizeOpts" );
		var_sg_Text_DrawTextWithFontNamedOpts = (void (__cdecl *)(const char *theText, color textColor, const char *name, float x, float y, const drawing_options *opts)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamedOpts" );
		var_sg_Text_DrawTextWithFontNamedSize = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamedSize" );
		var_sg_Text_FontFontStyle = (font_style (__cdecl *)(font font)) GetProcAddress( LibraryHandle, "sg_Text_FontFontStyle" );
		var_sg_Text_FontNameFor = (void (__cdecl *)(const char *fontName, int32_t size, char *result)) GetProcAddress( LibraryHandle, "sg_Text_FontNameFor" );
		var_sg_Text_FontNamed = (font (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_FontNamed" );
		var_sg_Text_FontNamedWithSize = (font (__cdecl *)(const char *name, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_FontNamedWithSize" );
		var_sg_Text_FontSetStyle = (void (__cdecl *)(font font, font_style value)) GetProcAddress( LibraryHandle, "sg_Text_FontSetStyle" );
		var_sg_Text_FreeFont = (void (__cdecl *)(font *fontToFree)) GetProcAddress( LibraryHandle, "sg_Text_FreeFont" );
		var_sg_Text_HasFont = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_HasFont" );
		var_sg_Text_LoadFont = (font (__cdecl *)(const char *fontName, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_LoadFont" );
		var_sg_Text_LoadFontNamed = (font (__cdecl *)(const char *name, const char *filename, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_LoadFontNamed" );
		var_sg_Text_ReleaseAllFonts = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Text_ReleaseAllFonts" );
		var_sg_Text_ReleaseFont = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_ReleaseFont" );
		var_sg_Text_TextAlignmentFrom = (font_alignment (__cdecl *)(const char *str)) GetProcAddress( LibraryHandle, "sg_Text_TextAlignmentFrom" );
		var_sg_Text_TextHeight = (int32_t (__cdecl *)(font theFont, const char *theText)) GetProcAddress( LibraryHandle, "sg_Text_TextHeight" );
		var_sg_Text_TextWidth = (int32_t (__cdecl *)(font theFont, const char *theText)) GetProcAddress( LibraryHandle, "sg_Text_TextWidth" );
		var_sg_Timers_CreateTimer = (timer (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Timers_CreateTimer" );
		var_sg_Timers_CreateTimerNamed = (timer (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_CreateTimerNamed" );
		var_sg_Timers_FreeTimer = (void (__cdecl *)(timer *toFree)) GetProcAddress( LibraryHandle, "sg_Timers_FreeTimer" );
		var_sg_Timers_PauseTimer = (void (__cdecl *)(timer toPause)) GetProcAddress( LibraryHandle, "sg_Timers_PauseTimer" );
		var_sg_Timers_PauseTimerNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_PauseTimerNamed" );
		var_sg_Timers_ReleaseAllTimers = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Timers_ReleaseAllTimers" );
		var_sg_Timers_ReleaseTimer = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_ReleaseTimer" );
		var_sg_Timers_ResetTimer = (void (__cdecl *)(timer tmr)) GetProcAddress( LibraryHandle, "sg_Timers_ResetTimer" );
		var_sg_Timers_ResetTimerNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_ResetTimerNamed" );
		var_sg_Timers_ResumeTimer = (void (__cdecl *)(timer toUnpause)) GetProcAddress( LibraryHandle, "sg_Timers_ResumeTimer" );
		var_sg_Timers_ResumeTimerNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_ResumeTimerNamed" );
		var_sg_Timers_StartTimer = (void (__cdecl *)(timer toStart)) GetProcAddress( LibraryHandle, "sg_Timers_StartTimer" );
		var_sg_Timers_StartTimerNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_StartTimerNamed" );
		var_sg_Timers_StopTimer = (void (__cdecl *)(timer toStop)) GetProcAddress( LibraryHandle, "sg_Timers_StopTimer" );
		var_sg_Timers_StopTimerNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_StopTimerNamed" );
		var_sg_Timers_TimerNamed = (timer (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_TimerNamed" );
		var_sg_Timers_TimerTicks = (uint32_t (__cdecl *)(timer toGet)) GetProcAddress( LibraryHandle, "sg_Timers_TimerTicks" );
		var_sg_Timers_TimerTicksNamed = (uint32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_TimerTicksNamed" );
		var_sg_UserInterface_ActivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActivatePanel" );
		var_sg_UserInterface_ActiveRadioButtonIndexFromID = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonIndexFromID" );
		var_sg_UserInterface_ActiveRadioButtonIndexOnPanel = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonIndexOnPanel" );
		var_sg_UserInterface_ActiveRadioButtonOnPanelWithId = (region (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonOnPanelWithId" );
		var_sg_UserInterface_ActiveRadioButtonWithID = (region (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonWithID" );
		var_sg_UserInterface_ActiveTextBoxParent = (panel (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveTextBoxParent" );
		var_sg_UserInterface_ActiveTextIndex = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveTextIndex" );
		var_sg_UserInterface_AddItemOnPanelWithIdByText = (void (__cdecl *)(panel pnl, const char *id, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemOnPanelWithIdByText" );
		var_sg_UserInterface_AddItemWithIdByBitmap = (void (__cdecl *)(const char *id, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemWithIdByBitmap" );
		var_sg_UserInterface_AddItemWithIdByText = (void (__cdecl *)(const char *id, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemWithIdByText" );
		var_sg_UserInterface_ButtonClicked = (bool (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ButtonClicked" );
		var_sg_UserInterface_ButtonNamedClicked = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ButtonNamedClicked" );
		var_sg_UserInterface_CheckBoxSetStateWithId = (void (__cdecl *)(const char *id, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckBoxSetStateWithId" );
		var_sg_UserInterface_CheckboxSetStateFromRegion = (void (__cdecl *)(region r, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxSetStateFromRegion" );
		var_sg_UserInterface_CheckboxSetStateOnPanel = (void (__cdecl *)(panel pnl, const char *id, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxSetStateOnPanel" );
		var_sg_UserInterface_CheckboxState = (bool (__cdecl *)(const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxState" );
		var_sg_UserInterface_CheckboxStateFromRegion = (bool (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxStateFromRegion" );
		var_sg_UserInterface_CheckboxStateOnPanel = (bool (__cdecl *)(panel p, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxStateOnPanel" );
		var_sg_UserInterface_DeactivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_DeactivatePanel" );
		var_sg_UserInterface_DeactivateTextBox = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DeactivateTextBox" );
		var_sg_UserInterface_DialogCancelled = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogCancelled" );
		var_sg_UserInterface_DialogComplete = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogComplete" );
		var_sg_UserInterface_DialogPath = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogPath" );
		var_sg_UserInterface_DialogSetPath = (void (__cdecl *)(const char *fullname)) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogSetPath" );
		var_sg_UserInterface_DrawGUIAsVectors = (void (__cdecl *)(bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_DrawGUIAsVectors" );
		var_sg_UserInterface_DrawInterface = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DrawInterface" );
		var_sg_UserInterface_FinishReadingText = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_FinishReadingText" );
		var_sg_UserInterface_FreePanel = (void (__cdecl *)(panel *pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_FreePanel" );
		var_sg_UserInterface_GUIClicked = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_GUIClicked" );
		var_sg_UserInterface_GUISetActiveTextboxFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetActiveTextboxFromRegion" );
		var_sg_UserInterface_GUISetActiveTextboxNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetActiveTextboxNamed" );
		var_sg_UserInterface_GUISetBackgroundColor = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetBackgroundColor" );
		var_sg_UserInterface_GUISetBackgroundColorInactive = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetBackgroundColorInactive" );
		var_sg_UserInterface_GUISetForegroundColor = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetForegroundColor" );
		var_sg_UserInterface_GUISetForegroundColorInactive = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetForegroundColorInactive" );
		var_sg_UserInterface_GUITextEntryComplete = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_GUITextEntryComplete" );
		var_sg_UserInterface_GlobalRegionWithID = (region (__cdecl *)(const char *ID)) GetProcAddress( LibraryHandle, "sg_UserInterface_GlobalRegionWithID" );
		var_sg_UserInterface_HasPanel = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_HasPanel" );
		var_sg_UserInterface_HidePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_HidePanel" );
		var_sg_UserInterface_HidePanelNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_HidePanelNamed" );
		var_sg_UserInterface_IndexOfLastUpdatedTextBox = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_IndexOfLastUpdatedTextBox" );
		var_sg_UserInterface_IsDragging = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_IsDragging" );
		var_sg_UserInterface_LabelFromRegionSetText = (void (__cdecl *)(region r, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelFromRegionSetText" );
		var_sg_UserInterface_LabelOnPanelWithIdSetText = (void (__cdecl *)(panel pnl, const char *id, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelOnPanelWithIdSetText" );
		var_sg_UserInterface_LabelTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextFromRegion" );
		var_sg_UserInterface_LabelTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextOnPanelWithId" );
		var_sg_UserInterface_LabelTextWithId = (void (__cdecl *)(const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextWithId" );
		var_sg_UserInterface_LabelWithIdSetText = (void (__cdecl *)(const char *id, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelWithIdSetText" );
		var_sg_UserInterface_ListActiveItemIndexFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexFromRegion" );
		var_sg_UserInterface_ListActiveItemIndexOnPanelWithId = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexOnPanelWithId" );
		var_sg_UserInterface_ListActiveItemIndexWithId = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexWithId" );
		var_sg_UserInterface_ListActiveItemTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemTextFromRegion" );
		var_sg_UserInterface_ListActiveItemTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *ID, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemTextOnPanelWithId" );
		var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion = (void (__cdecl *)(region r, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddBitmapAndTextItemFromRegion" );
		var_sg_UserInterface_ListAddItemBitmap = (void (__cdecl *)(panel pnl, const char *id, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemBitmap" );
		var_sg_UserInterface_ListAddItemByBitmapFromRegion = (void (__cdecl *)(region r, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemByBitmapFromRegion" );
		var_sg_UserInterface_ListAddItemByTextFromRegion = (void (__cdecl *)(region r, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemByTextFromRegion" );
		var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion = (void (__cdecl *)(region r, bitmap img, int32_t cell, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCellAndTextFromRegion" );
		var_sg_UserInterface_ListAddItemWithCellFromRegion = (void (__cdecl *)(region r, bitmap img, int32_t cell)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCellFromRegion" );
		var_sg_UserInterface_ListClearItemsFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListClearItemsFromRegion" );
		var_sg_UserInterface_ListClearItemsGivenPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListClearItemsGivenPanelWithId" );
		var_sg_UserInterface_ListItemCountFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountFromRegion" );
		var_sg_UserInterface_ListItemCountOnPanelWithId = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountOnPanelWithId" );
		var_sg_UserInterface_ListItemCountWithId = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountWithId" );
		var_sg_UserInterface_ListItemTextFromId = (void (__cdecl *)(const char *id, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextFromId" );
		var_sg_UserInterface_ListItemTextFromRegion = (void (__cdecl *)(region r, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextFromRegion" );
		var_sg_UserInterface_ListItemTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextOnPanelWithId" );
		var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem = (void (__cdecl *)(panel pnl, const char *id, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem" );
		var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell = (void (__cdecl *)(panel pnl, const char *id, bitmap img, int32_t cell)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddItemWithCell" );
		var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText = (void (__cdecl *)(panel pnl, const char *id, bitmap img, int32_t cell, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText" );
		var_sg_UserInterface_ListRemoveActiveItemFromId = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemFromId" );
		var_sg_UserInterface_ListRemoveActiveItemFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemFromRegion" );
		var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemOnPanelWithId" );
		var_sg_UserInterface_ListRemoveItemFromWithId = (void (__cdecl *)(const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveItemFromWithId" );
		var_sg_UserInterface_ListRemoveItemOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveItemOnPanelWithId" );
		var_sg_UserInterface_ListSet = (void (__cdecl *)(panel pnl, const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSet" );
		var_sg_UserInterface_ListSetActiveItemIndexWithId = (void (__cdecl *)(const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetActiveItemIndexWithId" );
		var_sg_UserInterface_ListSetStartingAtFromRegion = (void (__cdecl *)(region r, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetStartingAtFromRegion" );
		var_sg_UserInterface_ListStartingAtFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListStartingAtFromRegion" );
		var_sg_UserInterface_ListWithIDAddBitmapWithTextItem = (void (__cdecl *)(const char *id, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIDAddBitmapWithTextItem" );
		var_sg_UserInterface_ListWithIdActiveItemText = (void (__cdecl *)(const char *ID, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdActiveItemText" );
		var_sg_UserInterface_ListWithIdAddItemWithCell = (void (__cdecl *)(const char *id, bitmap img, int32_t cell)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdAddItemWithCell" );
		var_sg_UserInterface_ListWithIdAddItemWithCellAndText = (void (__cdecl *)(const char *id, bitmap img, int32_t cell, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdAddItemWithCellAndText" );
		var_sg_UserInterface_ListclearItemsWithId = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListclearItemsWithId" );
		var_sg_UserInterface_LoadPanel = (panel (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_UserInterface_LoadPanel" );
		var_sg_UserInterface_LoadPanelNamed = (panel (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_UserInterface_LoadPanelNamed" );
		var_sg_UserInterface_MovePanel = (void (__cdecl *)(panel p, const vector *mvmt)) GetProcAddress( LibraryHandle, "sg_UserInterface_MovePanel" );
		var_sg_UserInterface_NewPanel = (panel (__cdecl *)(const char *pnlName)) GetProcAddress( LibraryHandle, "sg_UserInterface_NewPanel" );
		var_sg_UserInterface_PanelActive = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelActive" );
		var_sg_UserInterface_PanelAtPoint = (panel (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelAtPoint" );
		var_sg_UserInterface_PanelClicked = (panel (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelClicked" );
		var_sg_UserInterface_PanelDraggable = (bool (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelDraggable" );
		var_sg_UserInterface_PanelFilename = (void (__cdecl *)(panel pnl, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelFilename" );
		var_sg_UserInterface_PanelHeight = (int32_t (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelHeight" );
		var_sg_UserInterface_PanelIsDragging = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelIsDragging" );
		var_sg_UserInterface_PanelName = (void (__cdecl *)(panel pnl, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelName" );
		var_sg_UserInterface_PanelNamed = (panel (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamed" );
		var_sg_UserInterface_PanelNamedHeight = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamedHeight" );
		var_sg_UserInterface_PanelNamedWidth = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamedWidth" );
		var_sg_UserInterface_PanelSetDraggable = (void (__cdecl *)(panel p, bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelSetDraggable" );
		var_sg_UserInterface_PanelVisible = (bool (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelVisible" );
		var_sg_UserInterface_PanelWasClicked = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelWasClicked" );
		var_sg_UserInterface_PanelWidth = (int32_t (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelWidth" );
		var_sg_UserInterface_PanelX = (float (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelX" );
		var_sg_UserInterface_PanelY = (float (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelY" );
		var_sg_UserInterface_PointInRegion = (bool (__cdecl *)(const point2d *pt, panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PointInRegion" );
		var_sg_UserInterface_PointInRegionWithKind = (bool (__cdecl *)(const point2d *pt, panel p, guielement_kind kind)) GetProcAddress( LibraryHandle, "sg_UserInterface_PointInRegionWithKind" );
		var_sg_UserInterface_RegionActive = (bool (__cdecl *)(region forRegion)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionActive" );
		var_sg_UserInterface_RegionAtPoint = (region (__cdecl *)(panel p, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionAtPoint" );
		var_sg_UserInterface_RegionClicked = (region (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionClicked" );
		var_sg_UserInterface_RegionClickedID = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionClickedID" );
		var_sg_UserInterface_RegionFont = (font (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionFont" );
		var_sg_UserInterface_RegionFontAlignment = (font_alignment (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionFontAlignment" );
		var_sg_UserInterface_RegionHeight = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionHeight" );
		var_sg_UserInterface_RegionID = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionID" );
		var_sg_UserInterface_RegionOfLastUpdatedTextBox = (region (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionOfLastUpdatedTextBox" );
		var_sg_UserInterface_RegionPanel = (panel (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionPanel" );
		var_sg_UserInterface_RegionSetFont = (void (__cdecl *)(region r, font f)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionSetFont" );
		var_sg_UserInterface_RegionSetFontAlignment = (void (__cdecl *)(region r, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionSetFontAlignment" );
		var_sg_UserInterface_RegionWidth = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionWidth" );
		var_sg_UserInterface_RegionWithID = (region (__cdecl *)(panel pnl, const char *ID)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionWithID" );
		var_sg_UserInterface_RegionX = (float (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionX" );
		var_sg_UserInterface_RegionY = (float (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionY" );
		var_sg_UserInterface_RegisterEventCallback = (void (__cdecl *)(region r, guievent_callback callback)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegisterEventCallback" );
		var_sg_UserInterface_ReleaseAllPanels = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ReleaseAllPanels" );
		var_sg_UserInterface_ReleasePanel = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ReleasePanel" );
		var_sg_UserInterface_SelectRadioButton = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButton" );
		var_sg_UserInterface_SelectRadioButtonOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonOnPanelWithId" );
		var_sg_UserInterface_SelectRadioButtonWithID = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonWithID" );
		var_sg_UserInterface_SetRegionActive = (void (__cdecl *)(region forRegion, bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_SetRegionActive" );
		var_sg_UserInterface_ShowOpenDialog = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowOpenDialog" );
		var_sg_UserInterface_ShowOpenDialogWithType = (void (__cdecl *)(file_dialog_select_type select)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowOpenDialogWithType" );
		var_sg_UserInterface_ShowPanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanel" );
		var_sg_UserInterface_ShowPanelDialog = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanelDialog" );
		var_sg_UserInterface_ShowPanelNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanelNamed" );
		var_sg_UserInterface_ShowSaveDialog = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowSaveDialog" );
		var_sg_UserInterface_ShowSaveDialogWithType = (void (__cdecl *)(file_dialog_select_type select)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowSaveDialogWithType" );
		var_sg_UserInterface_TextboxSetTextFromId = (void (__cdecl *)(const char *id, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextFromId" );
		var_sg_UserInterface_TextboxSetTextFromRegion = (void (__cdecl *)(region r, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextFromRegion" );
		var_sg_UserInterface_TextboxSetTextOnPanelAndId = (void (__cdecl *)(panel pnl, const char *id, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextOnPanelAndId" );
		var_sg_UserInterface_TextboxSetTextToIntFromRegion = (void (__cdecl *)(region r, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntFromRegion" );
		var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntOnPanelWithId" );
		var_sg_UserInterface_TextboxSetTextToIntWithId = (void (__cdecl *)(const char *id, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntWithId" );
		var_sg_UserInterface_TextboxSetTextToSingleFromId = (void (__cdecl *)(const char *id, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleFromId" );
		var_sg_UserInterface_TextboxSetTextToSingleFromRegion = (void (__cdecl *)(region r, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleFromRegion" );
		var_sg_UserInterface_TextboxSetTextToSingleOnPanel = (void (__cdecl *)(panel pnl, const char *id, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleOnPanel" );
		var_sg_UserInterface_TextboxTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextFromRegion" );
		var_sg_UserInterface_TextboxTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextOnPanelWithId" );
		var_sg_UserInterface_TextboxTextWithId = (void (__cdecl *)(const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextWithId" );
		var_sg_UserInterface_ToggleActivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleActivatePanel" );
		var_sg_UserInterface_ToggleCheckboxStateFromID = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleCheckboxStateFromID" );
		var_sg_UserInterface_ToggleCheckboxStateOnPanel = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleCheckboxStateOnPanel" );
		var_sg_UserInterface_ToggleRegionActive = (void (__cdecl *)(region forRegion)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleRegionActive" );
		var_sg_UserInterface_ToggleShowPanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleShowPanel" );
		var_sg_UserInterface_UpdateInterface = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_UpdateInterface" );
		var_sg_Utils_CalculateFramerate = (void (__cdecl *)(char *average, char *highest, char *lowest, color *textColor)) GetProcAddress( LibraryHandle, "sg_Utils_CalculateFramerate" );
		var_sg_Utils_Delay = (void (__cdecl *)(uint32_t time)) GetProcAddress( LibraryHandle, "sg_Utils_Delay" );
		var_sg_Utils_ExceptionMessage = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Utils_ExceptionMessage" );
		var_sg_Utils_ExceptionOccured = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_ExceptionOccured" );
		var_sg_Utils_GetFramerate = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_GetFramerate" );
		var_sg_Utils_GetTicks = (uint32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_GetTicks" );
		var_sg_Utils_Rnd = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_Rnd" );
		var_sg_Utils_RndUpto = (int32_t (__cdecl *)(int32_t ubound)) GetProcAddress( LibraryHandle, "sg_Utils_RndUpto" );
		var_sg_Utils_SwinGameVersion = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Utils_SwinGameVersion" );
		var_sg_Web_FreeHttpResponse = (void (__cdecl *)(http_response *response)) GetProcAddress( LibraryHandle, "sg_Web_FreeHttpResponse" );
		var_sg_Web_HttpGet = (http_response (__cdecl *)(const char *url, unsigned short int port)) GetProcAddress( LibraryHandle, "sg_Web_HttpGet" );
		var_sg_Web_HttpPost = (http_response (__cdecl *)(const char *url, unsigned short int port, const char *body)) GetProcAddress( LibraryHandle, "sg_Web_HttpPost" );
		var_sg_Web_HttpResponseBodyAsString = (void (__cdecl *)(http_response httpData, char *result)) GetProcAddress( LibraryHandle, "sg_Web_HttpResponseBodyAsString" );
		var_sg_WindowManager_ChangeScreenSize = (void (__cdecl *)(int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_WindowManager_ChangeScreenSize" );
		var_sg_WindowManager_ChangeWindowSize = (void (__cdecl *)(window wind, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_WindowManager_ChangeWindowSize" );
		var_sg_WindowManager_CloseWindow = (void (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_CloseWindow" );
		var_sg_WindowManager_CloseWindowNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_CloseWindowNamed" );
		var_sg_WindowManager_HasWindow = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_HasWindow" );
		var_sg_WindowManager_MoveWindow = (void (__cdecl *)(window wind, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_WindowManager_MoveWindow" );
		var_sg_WindowManager_MoveWindowNamed = (void (__cdecl *)(const char *name, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_WindowManager_MoveWindowNamed" );
		var_sg_WindowManager_OpenWindow = (window (__cdecl *)(const char *caption, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_WindowManager_OpenWindow" );
		var_sg_WindowManager_PrimaryWindowCloseRequested = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_PrimaryWindowCloseRequested" );
		var_sg_WindowManager_SaveScreenshot = (void (__cdecl *)(window src, const char *filepath)) GetProcAddress( LibraryHandle, "sg_WindowManager_SaveScreenshot" );
		var_sg_WindowManager_ScreenHeight = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_ScreenHeight" );
		var_sg_WindowManager_ScreenWidth = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_ScreenWidth" );
		var_sg_WindowManager_SetCurrentWindow = (void (__cdecl *)(window wnd)) GetProcAddress( LibraryHandle, "sg_WindowManager_SetCurrentWindow" );
		var_sg_WindowManager_SetCurrentWindowNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_SetCurrentWindowNamed" );
		var_sg_WindowManager_ToggleFullScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_ToggleFullScreen" );
		var_sg_WindowManager_ToggleWindowBorder = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_ToggleWindowBorder" );
		var_sg_WindowManager_WindowAtIndex = (window (__cdecl *)(int32_t idx)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowAtIndex" );
		var_sg_WindowManager_WindowCloseRequested = (bool (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowCloseRequested" );
		var_sg_WindowManager_WindowCount = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowCount" );
		var_sg_WindowManager_WindowHeight = (int32_t (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowHeight" );
		var_sg_WindowManager_WindowHeightNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowHeightNamed" );
		var_sg_WindowManager_WindowNamed = (window (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowNamed" );
		var_sg_WindowManager_WindowPosition = (point2d (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowPosition" );
		var_sg_WindowManager_WindowPositionNamed = (point2d (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowPositionNamed" );
		var_sg_WindowManager_WindowWidth = (int32_t (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowWidth" );
		var_sg_WindowManager_WindowWidthNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowWidthNamed" );
		var_sg_WindowManager_WindowWithFocus = (window (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowWithFocus" );
		var_sg_WindowManager_WindowX = (int32_t (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowX" );
		var_sg_WindowManager_WindowXNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowXNamed" );
		var_sg_WindowManager_WindowY = (int32_t (__cdecl *)(window wind)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowY" );
		var_sg_WindowManager_WindowYNamed = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_WindowManager_WindowYNamed" );
		var_sg_WindowManager_changeWindowSizeNamed = (void (__cdecl *)(const char *name, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_WindowManager_changeWindowSizeNamed" );
	}

	~DLLLoader()
	{
		if( LibraryHandle != NULL )
		{
			FreeLibrary( LibraryHandle );
		}
	}

	HMODULE LibraryHandle;
};

static DLLLoader Loader;
#endif
#endif
