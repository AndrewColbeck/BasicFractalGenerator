/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - UserInterface
*
* Wrapping sgUserInterface.pas
*/

#include "SGSDK.h"
#include "UserInterface.h"

#include "Types.h"

void activate_panel(panel p)
{
    sg_UserInterface_ActivatePanel(p);
}

#ifdef __cplusplus

region active_radio_button(const char *id)
{
    return sg_UserInterface_ActiveRadioButtonWithID(id);
}

#endif

region active_radio_button_with_id(const char *id)
{
    return sg_UserInterface_ActiveRadioButtonWithID(id);
}

#ifdef __cplusplus

region active_radio_button(panel pnl, const char *id)
{
    return sg_UserInterface_ActiveRadioButtonOnPanelWithId(pnl, id);
}

#endif

region active_radio_button_on_panel_with_id(panel pnl, const char *id)
{
    return sg_UserInterface_ActiveRadioButtonOnPanelWithId(pnl, id);
}

#ifdef __cplusplus

int32_t active_radio_button_index(const char *id)
{
    return sg_UserInterface_ActiveRadioButtonIndexFromID(id);
}

#endif

int32_t active_radio_button_index_from_id(const char *id)
{
    return sg_UserInterface_ActiveRadioButtonIndexFromID(id);
}

#ifdef __cplusplus

int32_t active_radio_button_index(panel pnl, const char *id)
{
    return sg_UserInterface_ActiveRadioButtonIndexOnPanel(pnl, id);
}

#endif

int32_t active_radio_button_index_on_panel(panel pnl, const char *id)
{
    return sg_UserInterface_ActiveRadioButtonIndexOnPanel(pnl, id);
}

panel active_text_box_parent()
{
    return sg_UserInterface_ActiveTextBoxParent();
}

int32_t active_text_index()
{
    return sg_UserInterface_ActiveTextIndex();
}

#ifdef __cplusplus

bool button_clicked(const char *name)
{
    return sg_UserInterface_ButtonNamedClicked(name) != 0;
}

#endif

bool button_named_clicked(const char *name)
{
    return sg_UserInterface_ButtonNamedClicked(name) != 0;
}

bool button_clicked(region r)
{
    return sg_UserInterface_ButtonClicked(r) != 0;
}

#ifdef __cplusplus

void checkbox_set_state(const char *id, bool val)
{
    sg_UserInterface_CheckBoxSetStateWithId(id, val != 0);
}

#endif

void check_box_set_state_with_id(const char *id, bool val)
{
    sg_UserInterface_CheckBoxSetStateWithId(id, val != 0);
}

#ifdef __cplusplus

void checkbox_set_state(region r, bool val)
{
    sg_UserInterface_CheckboxSetStateFromRegion(r, val != 0);
}

#endif

void checkbox_set_state_from_region(region r, bool val)
{
    sg_UserInterface_CheckboxSetStateFromRegion(r, val != 0);
}

#ifdef __cplusplus

void checkbox_set_state(panel pnl, const char *id, bool val)
{
    sg_UserInterface_CheckboxSetStateOnPanel(pnl, id, val != 0);
}

#endif

void checkbox_set_state_on_panel(panel pnl, const char *id, bool val)
{
    sg_UserInterface_CheckboxSetStateOnPanel(pnl, id, val != 0);
}

#ifdef __cplusplus

bool checkbox_state(region r)
{
    return sg_UserInterface_CheckboxStateFromRegion(r) != 0;
}

#endif

bool checkbox_state_from_region(region r)
{
    return sg_UserInterface_CheckboxStateFromRegion(r) != 0;
}

bool checkbox_state(const char *s)
{
    return sg_UserInterface_CheckboxState(s) != 0;
}

#ifdef __cplusplus

bool checkbox_state(panel p, const char *s)
{
    return sg_UserInterface_CheckboxStateOnPanel(p, s) != 0;
}

#endif

bool checkbox_state_on_panel(panel p, const char *s)
{
    return sg_UserInterface_CheckboxStateOnPanel(p, s) != 0;
}

void deactivate_panel(panel p)
{
    sg_UserInterface_DeactivatePanel(p);
}

void deactivate_text_box()
{
    sg_UserInterface_DeactivateTextBox();
}

bool dialog_cancelled()
{
    return sg_UserInterface_DialogCancelled() != 0;
}

bool dialog_complete()
{
    return sg_UserInterface_DialogComplete() != 0;
}

void dialog_path(char *result)
{
    sg_UserInterface_DialogPath(result);
}

void dialog_set_path(const char *fullname)
{
    sg_UserInterface_DialogSetPath(fullname);
}

void draw_guias_vectors(bool b)
{
    sg_UserInterface_DrawGUIAsVectors(b != 0);
}

void draw_interface()
{
    sg_UserInterface_DrawInterface();
}

void finish_reading_text()
{
    sg_UserInterface_FinishReadingText();
}

#ifdef __cplusplus

void free_panel(panel &pnl)
{
    sg_UserInterface_FreePanel(&pnl);
}

#endif

void free_panel(panel *pnl)
{
    sg_UserInterface_FreePanel(pnl);
}

bool guiclicked()
{
    return sg_UserInterface_GUIClicked() != 0;
}

#ifdef __cplusplus

void guiset_active_textbox(const char *name)
{
    sg_UserInterface_GUISetActiveTextboxNamed(name);
}

#endif

void guiset_active_textbox_named(const char *name)
{
    sg_UserInterface_GUISetActiveTextboxNamed(name);
}

#ifdef __cplusplus

void guiset_active_textbox(region r)
{
    sg_UserInterface_GUISetActiveTextboxFromRegion(r);
}

#endif

void guiset_active_textbox_from_region(region r)
{
    sg_UserInterface_GUISetActiveTextboxFromRegion(r);
}

void guiset_background_color(color c)
{
    sg_UserInterface_GUISetBackgroundColor(c);
}

void guiset_background_color_inactive(color c)
{
    sg_UserInterface_GUISetBackgroundColorInactive(c);
}

void guiset_foreground_color(color c)
{
    sg_UserInterface_GUISetForegroundColor(c);
}

void guiset_foreground_color_inactive(color c)
{
    sg_UserInterface_GUISetForegroundColorInactive(c);
}

bool guitext_entry_complete()
{
    return sg_UserInterface_GUITextEntryComplete() != 0;
}

bool has_panel(const char *name)
{
    return sg_UserInterface_HasPanel(name) != 0;
}

void hide_panel(panel p)
{
    sg_UserInterface_HidePanel(p);
}

#ifdef __cplusplus

void hide_panel(const char *name)
{
    sg_UserInterface_HidePanelNamed(name);
}

#endif

void hide_panel_named(const char *name)
{
    sg_UserInterface_HidePanelNamed(name);
}

int32_t index_of_last_updated_text_box()
{
    return sg_UserInterface_IndexOfLastUpdatedTextBox();
}

bool is_dragging()
{
    return sg_UserInterface_IsDragging() != 0;
}

#ifdef __cplusplus

bool is_dragging(panel pnl)
{
    return sg_UserInterface_PanelIsDragging(pnl) != 0;
}

#endif

bool panel_is_dragging(panel pnl)
{
    return sg_UserInterface_PanelIsDragging(pnl) != 0;
}

#ifdef __cplusplus

void label_set_text(region r, const char *newString)
{
    sg_UserInterface_LabelFromRegionSetText(r, newString);
}

#endif

void label_from_region_set_text(region r, const char *newString)
{
    sg_UserInterface_LabelFromRegionSetText(r, newString);
}

#ifdef __cplusplus

void label_set_text(const char *id, const char *newString)
{
    sg_UserInterface_LabelWithIdSetText(id, newString);
}

#endif

void label_with_id_set_text(const char *id, const char *newString)
{
    sg_UserInterface_LabelWithIdSetText(id, newString);
}

#ifdef __cplusplus

void label_set_text(panel pnl, const char *id, const char *newString)
{
    sg_UserInterface_LabelOnPanelWithIdSetText(pnl, id, newString);
}

#endif

void label_on_panel_with_id_set_text(panel pnl, const char *id, const char *newString)
{
    sg_UserInterface_LabelOnPanelWithIdSetText(pnl, id, newString);
}

#ifdef __cplusplus

void label_text(region r, char *result)
{
    sg_UserInterface_LabelTextFromRegion(r, result);
}

#endif

void label_text_from_region(region r, char *result)
{
    sg_UserInterface_LabelTextFromRegion(r, result);
}

#ifdef __cplusplus

void label_text(const char *id, char *result)
{
    sg_UserInterface_LabelTextWithId(id, result);
}

#endif

void label_text_with_id(const char *id, char *result)
{
    sg_UserInterface_LabelTextWithId(id, result);
}

#ifdef __cplusplus

void label_text(panel pnl, const char *id, char *result)
{
    sg_UserInterface_LabelTextOnPanelWithId(pnl, id, result);
}

#endif

void label_text_on_panel_with_id(panel pnl, const char *id, char *result)
{
    sg_UserInterface_LabelTextOnPanelWithId(pnl, id, result);
}

#ifdef __cplusplus

int32_t list_active_item_index(const char *id)
{
    return sg_UserInterface_ListActiveItemIndexWithId(id);
}

#endif

int32_t list_active_item_index_with_id(const char *id)
{
    return sg_UserInterface_ListActiveItemIndexWithId(id);
}

#ifdef __cplusplus

int32_t list_active_item_index(region r)
{
    return sg_UserInterface_ListActiveItemIndexFromRegion(r);
}

#endif

int32_t list_active_item_index_from_region(region r)
{
    return sg_UserInterface_ListActiveItemIndexFromRegion(r);
}

#ifdef __cplusplus

int32_t list_active_item_index(panel pnl, const char *id)
{
    return sg_UserInterface_ListActiveItemIndexOnPanelWithId(pnl, id);
}

#endif

int32_t list_active_item_index_on_panel_with_id(panel pnl, const char *id)
{
    return sg_UserInterface_ListActiveItemIndexOnPanelWithId(pnl, id);
}

#ifdef __cplusplus

void list_active_item_text(region r, char *result)
{
    sg_UserInterface_ListActiveItemTextFromRegion(r, result);
}

#endif

void list_active_item_text_from_region(region r, char *result)
{
    sg_UserInterface_ListActiveItemTextFromRegion(r, result);
}

#ifdef __cplusplus

void list_active_item_text(const char *ID, char *result)
{
    sg_UserInterface_ListWithIdActiveItemText(ID, result);
}

#endif

void list_with_id_active_item_text(const char *ID, char *result)
{
    sg_UserInterface_ListWithIdActiveItemText(ID, result);
}

#ifdef __cplusplus

void list_active_item_text(panel pnl, const char *ID, char *result)
{
    sg_UserInterface_ListActiveItemTextOnPanelWithId(pnl, ID, result);
}

#endif

void list_active_item_text_on_panel_with_id(panel pnl, const char *ID, char *result)
{
    sg_UserInterface_ListActiveItemTextOnPanelWithId(pnl, ID, result);
}

#ifdef __cplusplus

void list_add_item(const char *id, const char *text)
{
    sg_UserInterface_AddItemWithIdByText(id, text);
}

#endif

void add_item_with_id_by_text(const char *id, const char *text)
{
    sg_UserInterface_AddItemWithIdByText(id, text);
}

#ifdef __cplusplus

void list_add_item(const char *id, bitmap img)
{
    sg_UserInterface_AddItemWithIdByBitmap(id, img);
}

#endif

void add_item_with_id_by_bitmap(const char *id, bitmap img)
{
    sg_UserInterface_AddItemWithIdByBitmap(id, img);
}

#ifdef __cplusplus

void list_add_item(region r, bitmap img)
{
    sg_UserInterface_ListAddItemByBitmapFromRegion(r, img);
}

#endif

void list_add_item_by_bitmap_from_region(region r, bitmap img)
{
    sg_UserInterface_ListAddItemByBitmapFromRegion(r, img);
}

#ifdef __cplusplus

void list_add_item(region r, const char *text)
{
    sg_UserInterface_ListAddItemByTextFromRegion(r, text);
}

#endif

void list_add_item_by_text_from_region(region r, const char *text)
{
    sg_UserInterface_ListAddItemByTextFromRegion(r, text);
}

#ifdef __cplusplus

void list_add_item(const char *id, bitmap img, const char *text)
{
    sg_UserInterface_ListWithIDAddBitmapWithTextItem(id, img, text);
}

#endif

void list_with_idadd_bitmap_with_text_item(const char *id, bitmap img, const char *text)
{
    sg_UserInterface_ListWithIDAddBitmapWithTextItem(id, img, text);
}

#ifdef __cplusplus

void list_add_item(panel pnl, const char *id, const char *text)
{
    sg_UserInterface_AddItemOnPanelWithIdByText(pnl, id, text);
}

#endif

void add_item_on_panel_with_id_by_text(panel pnl, const char *id, const char *text)
{
    sg_UserInterface_AddItemOnPanelWithIdByText(pnl, id, text);
}

#ifdef __cplusplus

void list_add_item(region r, bitmap img, int32_t cell)
{
    sg_UserInterface_ListAddItemWithCellFromRegion(r, img, cell);
}

#endif

void list_add_item_with_cell_from_region(region r, bitmap img, int32_t cell)
{
    sg_UserInterface_ListAddItemWithCellFromRegion(r, img, cell);
}

#ifdef __cplusplus

void list_add_item(region r, bitmap img, const char *text)
{
    sg_UserInterface_ListAddBitmapAndTextItemFromRegion(r, img, text);
}

#endif

void list_add_bitmap_and_text_item_from_region(region r, bitmap img, const char *text)
{
    sg_UserInterface_ListAddBitmapAndTextItemFromRegion(r, img, text);
}

#ifdef __cplusplus

void list_add_item(panel pnl, const char *id, bitmap img)
{
    sg_UserInterface_ListAddItemBitmap(pnl, id, img);
}

#endif

void list_add_item_bitmap(panel pnl, const char *id, bitmap img)
{
    sg_UserInterface_ListAddItemBitmap(pnl, id, img);
}

#ifdef __cplusplus

void list_add_item(const char *id, bitmap img, int32_t cell)
{
    sg_UserInterface_ListWithIdAddItemWithCell(id, img, cell);
}

#endif

void list_with_id_add_item_with_cell(const char *id, bitmap img, int32_t cell)
{
    sg_UserInterface_ListWithIdAddItemWithCell(id, img, cell);
}

#ifdef __cplusplus

void list_add_item(const char *id, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListWithIdAddItemWithCellAndText(id, img, cell, text);
}

#endif

void list_with_id_add_item_with_cell_and_text(const char *id, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListWithIdAddItemWithCellAndText(id, img, cell, text);
}

#ifdef __cplusplus

void list_add_item(region r, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListAddItemWithCellAndTextFromRegion(r, img, cell, text);
}

#endif

void list_add_item_with_cell_and_text_from_region(region r, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListAddItemWithCellAndTextFromRegion(r, img, cell, text);
}

#ifdef __cplusplus

void list_add_item(panel pnl, const char *id, bitmap img, int32_t cell)
{
    sg_UserInterface_ListOnPanelWithIdAddItemWithCell(pnl, id, img, cell);
}

#endif

void list_on_panel_with_id_add_item_with_cell(panel pnl, const char *id, bitmap img, int32_t cell)
{
    sg_UserInterface_ListOnPanelWithIdAddItemWithCell(pnl, id, img, cell);
}

#ifdef __cplusplus

void list_add_item(panel pnl, const char *id, bitmap img, const char *text)
{
    sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(pnl, id, img, text);
}

#endif

void list_on_panel_with_id_add_bitmap_with_text_item(panel pnl, const char *id, bitmap img, const char *text)
{
    sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(pnl, id, img, text);
}

#ifdef __cplusplus

void list_add_item(panel pnl, const char *id, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(pnl, id, img, cell, text);
}

#endif

void list_on_panel_with_id_add_item_with_cell_and_text(panel pnl, const char *id, bitmap img, int32_t cell, const char *text)
{
    sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(pnl, id, img, cell, text);
}

#ifdef __cplusplus

void list_clear_items(const char *id)
{
    sg_UserInterface_ListclearItemsWithId(id);
}

#endif

void listclear_items_with_id(const char *id)
{
    sg_UserInterface_ListclearItemsWithId(id);
}

#ifdef __cplusplus

void list_clear_items(region r)
{
    sg_UserInterface_ListClearItemsFromRegion(r);
}

#endif

void list_clear_items_from_region(region r)
{
    sg_UserInterface_ListClearItemsFromRegion(r);
}

#ifdef __cplusplus

void list_clear_items(panel pnl, const char *id)
{
    sg_UserInterface_ListClearItemsGivenPanelWithId(pnl, id);
}

#endif

void list_clear_items_given_panel_with_id(panel pnl, const char *id)
{
    sg_UserInterface_ListClearItemsGivenPanelWithId(pnl, id);
}

#ifdef __cplusplus

int32_t list_item_count(const char *id)
{
    return sg_UserInterface_ListItemCountWithId(id);
}

#endif

int32_t list_item_count_with_id(const char *id)
{
    return sg_UserInterface_ListItemCountWithId(id);
}

#ifdef __cplusplus

int32_t list_item_count(region r)
{
    return sg_UserInterface_ListItemCountFromRegion(r);
}

#endif

int32_t list_item_count_from_region(region r)
{
    return sg_UserInterface_ListItemCountFromRegion(r);
}

#ifdef __cplusplus

int32_t list_item_count(panel pnl, const char *id)
{
    return sg_UserInterface_ListItemCountOnPanelWithId(pnl, id);
}

#endif

int32_t list_item_count_on_panel_with_id(panel pnl, const char *id)
{
    return sg_UserInterface_ListItemCountOnPanelWithId(pnl, id);
}

#ifdef __cplusplus

void list_item_text(region r, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextFromRegion(r, idx, result);
}

#endif

void list_item_text_from_region(region r, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextFromRegion(r, idx, result);
}

#ifdef __cplusplus

void list_item_text(const char *id, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextFromId(id, idx, result);
}

#endif

void list_item_text_from_id(const char *id, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextFromId(id, idx, result);
}

#ifdef __cplusplus

void list_item_text(panel pnl, const char *id, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextOnPanelWithId(pnl, id, idx, result);
}

#endif

void list_item_text_on_panel_with_id(panel pnl, const char *id, int32_t idx, char *result)
{
    sg_UserInterface_ListItemTextOnPanelWithId(pnl, id, idx, result);
}

#ifdef __cplusplus

void list_remove_active_item(const char *id)
{
    sg_UserInterface_ListRemoveActiveItemFromId(id);
}

#endif

void list_remove_active_item_from_id(const char *id)
{
    sg_UserInterface_ListRemoveActiveItemFromId(id);
}

#ifdef __cplusplus

void list_remove_active_item(region r)
{
    sg_UserInterface_ListRemoveActiveItemFromRegion(r);
}

#endif

void list_remove_active_item_from_region(region r)
{
    sg_UserInterface_ListRemoveActiveItemFromRegion(r);
}

#ifdef __cplusplus

void list_remove_active_item(panel pnl, const char *id)
{
    sg_UserInterface_ListRemoveActiveItemOnPanelWithId(pnl, id);
}

#endif

void list_remove_active_item_on_panel_with_id(panel pnl, const char *id)
{
    sg_UserInterface_ListRemoveActiveItemOnPanelWithId(pnl, id);
}

#ifdef __cplusplus

void list_remove_item(const char *id, int32_t idx)
{
    sg_UserInterface_ListRemoveItemFromWithId(id, idx);
}

#endif

void list_remove_item_from_with_id(const char *id, int32_t idx)
{
    sg_UserInterface_ListRemoveItemFromWithId(id, idx);
}

#ifdef __cplusplus

void list_remove_item(panel pnl, const char *id, int32_t idx)
{
    sg_UserInterface_ListRemoveItemOnPanelWithId(pnl, id, idx);
}

#endif

void list_remove_item_on_panel_with_id(panel pnl, const char *id, int32_t idx)
{
    sg_UserInterface_ListRemoveItemOnPanelWithId(pnl, id, idx);
}

#ifdef __cplusplus

void list_set_active_item_index(const char *id, int32_t idx)
{
    sg_UserInterface_ListSetActiveItemIndexWithId(id, idx);
}

#endif

void list_set_active_item_index_with_id(const char *id, int32_t idx)
{
    sg_UserInterface_ListSetActiveItemIndexWithId(id, idx);
}

#ifdef __cplusplus

void list_set_active_item_index(panel pnl, const char *id, int32_t idx)
{
    sg_UserInterface_ListSet(pnl, id, idx);
}

#endif

void list_set(panel pnl, const char *id, int32_t idx)
{
    sg_UserInterface_ListSet(pnl, id, idx);
}

#ifdef __cplusplus

void list_set_start_at(region r, int32_t idx)
{
    sg_UserInterface_ListSetStartingAtFromRegion(r, idx);
}

#endif

void list_set_starting_at_from_region(region r, int32_t idx)
{
    sg_UserInterface_ListSetStartingAtFromRegion(r, idx);
}

#ifdef __cplusplus

int32_t list_start_at(region r)
{
    return sg_UserInterface_ListStartingAtFromRegion(r);
}

#endif

int32_t list_starting_at_from_region(region r)
{
    return sg_UserInterface_ListStartingAtFromRegion(r);
}

panel load_panel(const char *filename)
{
    return sg_UserInterface_LoadPanel(filename);
}

panel load_panel_named(const char *name, const char *filename)
{
    return sg_UserInterface_LoadPanelNamed(name, filename);
}

#ifdef __cplusplus

void move_panel(panel p, const vector &mvmt)
{
    sg_UserInterface_MovePanel(p, &mvmt);
}

#endif

void move_panel(panel p, const vector *mvmt)
{
    sg_UserInterface_MovePanel(p, mvmt);
}

void move_panel_byval(panel p, const vector mvmt)
{
    sg_UserInterface_MovePanel(p, &mvmt);
}

panel new_panel(const char *pnlName)
{
    return sg_UserInterface_NewPanel(pnlName);
}

bool panel_active(panel pnl)
{
    return sg_UserInterface_PanelActive(pnl) != 0;
}

#ifdef __cplusplus

panel panel_at_point(const point2d &pt)
{
    return sg_UserInterface_PanelAtPoint(&pt);
}

#endif

panel panel_at_point(const point2d *pt)
{
    return sg_UserInterface_PanelAtPoint(pt);
}

panel panel_at_point_byval(const point2d pt)
{
    return sg_UserInterface_PanelAtPoint(&pt);
}

panel panel_clicked()
{
    return sg_UserInterface_PanelClicked();
}

#ifdef __cplusplus

bool panel_clicked(panel pnl)
{
    return sg_UserInterface_PanelWasClicked(pnl) != 0;
}

#endif

bool panel_was_clicked(panel pnl)
{
    return sg_UserInterface_PanelWasClicked(pnl) != 0;
}

bool panel_draggable(panel p)
{
    return sg_UserInterface_PanelDraggable(p) != 0;
}

void panel_filename(panel pnl, char *result)
{
    sg_UserInterface_PanelFilename(pnl, result);
}

int32_t panel_height(panel p)
{
    return sg_UserInterface_PanelHeight(p);
}

#ifdef __cplusplus

int32_t panel_height(const char *name)
{
    return sg_UserInterface_PanelNamedHeight(name);
}

#endif

int32_t panel_named_height(const char *name)
{
    return sg_UserInterface_PanelNamedHeight(name);
}

void panel_name(panel pnl, char *result)
{
    sg_UserInterface_PanelName(pnl, result);
}

panel panel_named(const char *name)
{
    return sg_UserInterface_PanelNamed(name);
}

void panel_set_draggable(panel p, bool b)
{
    sg_UserInterface_PanelSetDraggable(p, b != 0);
}

bool panel_visible(panel p)
{
    return sg_UserInterface_PanelVisible(p) != 0;
}

int32_t panel_width(panel p)
{
    return sg_UserInterface_PanelWidth(p);
}

#ifdef __cplusplus

int32_t panel_width(const char *name)
{
    return sg_UserInterface_PanelNamedWidth(name);
}

#endif

int32_t panel_named_width(const char *name)
{
    return sg_UserInterface_PanelNamedWidth(name);
}

float panel_x(panel p)
{
    return sg_UserInterface_PanelX(p);
}

float panel_y(panel p)
{
    return sg_UserInterface_PanelY(p);
}

#ifdef __cplusplus

bool point_in_region(const point2d &pt, panel p)
{
    return sg_UserInterface_PointInRegion(&pt, p) != 0;
}

#endif

bool point_in_region(const point2d *pt, panel p)
{
    return sg_UserInterface_PointInRegion(pt, p) != 0;
}

bool point_in_region_byval(const point2d pt, panel p)
{
    return sg_UserInterface_PointInRegion(&pt, p) != 0;
}

#ifdef __cplusplus

bool point_in_region(const point2d &pt, panel p, guielement_kind kind)
{
    return sg_UserInterface_PointInRegionWithKind(&pt, p, kind) != 0;
}

#endif

bool point_in_region_with_kind(const point2d *pt, panel p, guielement_kind kind)
{
    return sg_UserInterface_PointInRegionWithKind(pt, p, kind) != 0;
}

bool point_in_region_with_kind_byval(const point2d pt, panel p, guielement_kind kind)
{
    return sg_UserInterface_PointInRegionWithKind(&pt, p, kind) != 0;
}

bool region_active(region forRegion)
{
    return sg_UserInterface_RegionActive(forRegion) != 0;
}

#ifdef __cplusplus

region region_at_point(panel p, const point2d &pt)
{
    return sg_UserInterface_RegionAtPoint(p, &pt);
}

#endif

region region_at_point(panel p, const point2d *pt)
{
    return sg_UserInterface_RegionAtPoint(p, pt);
}

region region_at_point_byval(panel p, const point2d pt)
{
    return sg_UserInterface_RegionAtPoint(p, &pt);
}

region region_clicked()
{
    return sg_UserInterface_RegionClicked();
}

void region_clicked_id(char *result)
{
    sg_UserInterface_RegionClickedID(result);
}

font region_font(region r)
{
    return sg_UserInterface_RegionFont(r);
}

font_alignment region_font_alignment(region r)
{
    return sg_UserInterface_RegionFontAlignment(r);
}

int32_t region_height(region r)
{
    return sg_UserInterface_RegionHeight(r);
}

void region_id(region r, char *result)
{
    sg_UserInterface_RegionID(r, result);
}

region region_of_last_updated_text_box()
{
    return sg_UserInterface_RegionOfLastUpdatedTextBox();
}

panel region_panel(region r)
{
    return sg_UserInterface_RegionPanel(r);
}

void region_set_font(region r, font f)
{
    sg_UserInterface_RegionSetFont(r, f);
}

void region_set_font_alignment(region r, font_alignment align)
{
    sg_UserInterface_RegionSetFontAlignment(r, align);
}

int32_t region_width(region r)
{
    return sg_UserInterface_RegionWidth(r);
}

#ifdef __cplusplus

region region_with_id(const char *ID)
{
    return sg_UserInterface_GlobalRegionWithID(ID);
}

#endif

region global_region_with_id(const char *ID)
{
    return sg_UserInterface_GlobalRegionWithID(ID);
}

region region_with_id(panel pnl, const char *ID)
{
    return sg_UserInterface_RegionWithID(pnl, ID);
}

float region_x(region r)
{
    return sg_UserInterface_RegionX(r);
}

float region_y(region r)
{
    return sg_UserInterface_RegionY(r);
}

void register_event_callback(region r, guievent_callback callback)
{
    sg_UserInterface_RegisterEventCallback(r, callback);
}

void release_all_panels()
{
    sg_UserInterface_ReleaseAllPanels();
}

void release_panel(const char *name)
{
    sg_UserInterface_ReleasePanel(name);
}

void select_radio_button(region r)
{
    sg_UserInterface_SelectRadioButton(r);
}

#ifdef __cplusplus

void select_radio_button(const char *id)
{
    sg_UserInterface_SelectRadioButtonWithID(id);
}

#endif

void select_radio_button_with_id(const char *id)
{
    sg_UserInterface_SelectRadioButtonWithID(id);
}

#ifdef __cplusplus

void select_radio_button(panel pnl, const char *id)
{
    sg_UserInterface_SelectRadioButtonOnPanelWithId(pnl, id);
}

#endif

void select_radio_button_on_panel_with_id(panel pnl, const char *id)
{
    sg_UserInterface_SelectRadioButtonOnPanelWithId(pnl, id);
}

void set_region_active(region forRegion, bool b)
{
    sg_UserInterface_SetRegionActive(forRegion, b != 0);
}

void show_open_dialog()
{
    sg_UserInterface_ShowOpenDialog();
}

#ifdef __cplusplus

void show_open_dialog(file_dialog_select_type select)
{
    sg_UserInterface_ShowOpenDialogWithType(select);
}

#endif

void show_open_dialog_with_type(file_dialog_select_type select)
{
    sg_UserInterface_ShowOpenDialogWithType(select);
}

#ifdef __cplusplus

void show_panel(const char *name)
{
    sg_UserInterface_ShowPanelNamed(name);
}

#endif

void show_panel_named(const char *name)
{
    sg_UserInterface_ShowPanelNamed(name);
}

void show_panel(panel p)
{
    sg_UserInterface_ShowPanel(p);
}

void show_panel_dialog(panel p)
{
    sg_UserInterface_ShowPanelDialog(p);
}

void show_save_dialog()
{
    sg_UserInterface_ShowSaveDialog();
}

#ifdef __cplusplus

void show_save_dialog(file_dialog_select_type select)
{
    sg_UserInterface_ShowSaveDialogWithType(select);
}

#endif

void show_save_dialog_with_type(file_dialog_select_type select)
{
    sg_UserInterface_ShowSaveDialogWithType(select);
}

#ifdef __cplusplus

void text_box_text(region r, char *result)
{
    sg_UserInterface_TextboxTextFromRegion(r, result);
}

#endif

void textbox_text_from_region(region r, char *result)
{
    sg_UserInterface_TextboxTextFromRegion(r, result);
}

#ifdef __cplusplus

void text_box_text(const char *id, char *result)
{
    sg_UserInterface_TextboxTextWithId(id, result);
}

#endif

void textbox_text_with_id(const char *id, char *result)
{
    sg_UserInterface_TextboxTextWithId(id, result);
}

#ifdef __cplusplus

void text_box_text(panel pnl, const char *id, char *result)
{
    sg_UserInterface_TextboxTextOnPanelWithId(pnl, id, result);
}

#endif

void textbox_text_on_panel_with_id(panel pnl, const char *id, char *result)
{
    sg_UserInterface_TextboxTextOnPanelWithId(pnl, id, result);
}

#ifdef __cplusplus

void textbox_set_text(const char *id, const char *s)
{
    sg_UserInterface_TextboxSetTextFromId(id, s);
}

#endif

void textbox_set_text_from_id(const char *id, const char *s)
{
    sg_UserInterface_TextboxSetTextFromId(id, s);
}

#ifdef __cplusplus

void textbox_set_text(region r, float single)
{
    sg_UserInterface_TextboxSetTextToSingleFromRegion(r, single);
}

#endif

void textbox_set_text_to_single_from_region(region r, float single)
{
    sg_UserInterface_TextboxSetTextToSingleFromRegion(r, single);
}

#ifdef __cplusplus

void textbox_set_text(region r, const char *s)
{
    sg_UserInterface_TextboxSetTextFromRegion(r, s);
}

#endif

void textbox_set_text_from_region(region r, const char *s)
{
    sg_UserInterface_TextboxSetTextFromRegion(r, s);
}

#ifdef __cplusplus

void textbox_set_text(const char *id, float single)
{
    sg_UserInterface_TextboxSetTextToSingleFromId(id, single);
}

#endif

void textbox_set_text_to_single_from_id(const char *id, float single)
{
    sg_UserInterface_TextboxSetTextToSingleFromId(id, single);
}

#ifdef __cplusplus

void textbox_set_text(region r, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntFromRegion(r, i);
}

#endif

void textbox_set_text_to_int_from_region(region r, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntFromRegion(r, i);
}

#ifdef __cplusplus

void textbox_set_text(const char *id, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntWithId(id, i);
}

#endif

void textbox_set_text_to_int_with_id(const char *id, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntWithId(id, i);
}

#ifdef __cplusplus

void textbox_set_text(panel pnl, const char *id, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntOnPanelWithId(pnl, id, i);
}

#endif

void textbox_set_text_to_int_on_panel_with_id(panel pnl, const char *id, int32_t i)
{
    sg_UserInterface_TextboxSetTextToIntOnPanelWithId(pnl, id, i);
}

#ifdef __cplusplus

void textbox_set_text(panel pnl, const char *id, float single)
{
    sg_UserInterface_TextboxSetTextToSingleOnPanel(pnl, id, single);
}

#endif

void textbox_set_text_to_single_on_panel(panel pnl, const char *id, float single)
{
    sg_UserInterface_TextboxSetTextToSingleOnPanel(pnl, id, single);
}

#ifdef __cplusplus

void textbox_set_text(panel pnl, const char *id, const char *s)
{
    sg_UserInterface_TextboxSetTextOnPanelAndId(pnl, id, s);
}

#endif

void textbox_set_text_on_panel_and_id(panel pnl, const char *id, const char *s)
{
    sg_UserInterface_TextboxSetTextOnPanelAndId(pnl, id, s);
}

void toggle_activate_panel(panel p)
{
    sg_UserInterface_ToggleActivatePanel(p);
}

#ifdef __cplusplus

void toggle_checkbox_state(const char *id)
{
    sg_UserInterface_ToggleCheckboxStateFromID(id);
}

#endif

void toggle_checkbox_state_from_id(const char *id)
{
    sg_UserInterface_ToggleCheckboxStateFromID(id);
}

#ifdef __cplusplus

void toggle_checkbox_state(panel pnl, const char *id)
{
    sg_UserInterface_ToggleCheckboxStateOnPanel(pnl, id);
}

#endif

void toggle_checkbox_state_on_panel(panel pnl, const char *id)
{
    sg_UserInterface_ToggleCheckboxStateOnPanel(pnl, id);
}

void toggle_region_active(region forRegion)
{
    sg_UserInterface_ToggleRegionActive(forRegion);
}

void toggle_show_panel(panel p)
{
    sg_UserInterface_ToggleShowPanel(p);
}

void update_interface()
{
    sg_UserInterface_UpdateInterface();
}

