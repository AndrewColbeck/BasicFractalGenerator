/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Physics
*
* Wrapping sgPhysics.pas
*/

#ifndef sgPhysics
#define sgPhysics

#include <stdint.h>

#ifndef __cplusplus
  #include <stdbool.h>
#endif

#include "Types.h"

bool bitmap_at_points_collision(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool bitmap_at_points_collision_byval(bitmap bmp1, const point2d pt1, bitmap bmp2, const point2d pt2);
bool bitmap_collision(bitmap bmp1, float x1, float y1, bitmap bmp2, float x2, float y2);
bool bitmaps_parts_collision(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2);
bool bitmaps_parts_collision_byval(bitmap bmp1, const point2d pt1, const rectangle part1, bitmap bmp2, const point2d pt2, const rectangle part2);
bool bitmap_part_point_xycollision(bitmap bmp, float x, float y, const rectangle *part, const point2d *pt);
bool bitmap_part_point_xycollision_byval(bitmap bmp, float x, float y, const rectangle part, const point2d pt);
bool bitmap_part_point_collision(bitmap bmp, float x, float y, const rectangle *part, float ptX, float ptY);
bool bitmap_part_point_collision_byval(bitmap bmp, float x, float y, const rectangle part, float ptX, float ptY);
bool bitmap_point_pt_collision(bitmap bmp, float x, float y, const point2d *pt);
bool bitmap_point_pt_collision_byval(bitmap bmp, float x, float y, const point2d pt);
bool bitmap_point_collision(bitmap bmp, float x, float y, float ptX, float ptY);
bool bitmap_rectangle_collision(bitmap bmp, float x, float y, const rectangle *rect);
bool bitmap_rectangle_collision_byval(bitmap bmp, float x, float y, const rectangle rect);
bool bitmap_part_at_pt_rect_collision(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect);
bool bitmap_part_at_pt_rect_collision_byval(bitmap bmp, const point2d pt, const rectangle part, const rectangle rect);
bool bitmap_part_rect_collision(bitmap bmp, float x, float y, const rectangle *part, const rectangle *rect);
bool bitmap_part_rect_collision_byval(bitmap bmp, float x, float y, const rectangle part, const rectangle rect);
bool bitmap_rect_collision(bitmap bmp, float x, float y, float rectX, float rectY, float rectWidth, float rectHeight);
bool cell_bitmap_collision_at_pt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool cell_bitmap_collision_at_pt_byval(bitmap bmp1, int32_t cell, const point2d pt1, bitmap bmp2, const point2d pt2);
bool cell_bitmap_part_collision_at_pt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part);
bool cell_bitmap_part_collision_at_pt_byval(bitmap bmp1, int32_t cell, const point2d pt1, bitmap bmp2, const point2d pt2, const rectangle part);
bool cell_bitmap_collision(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2);
bool cell_bitmap_part_collision(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle *part);
bool cell_bitmap_part_collision_byval(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle part);
bool cell_collision_at_pt(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2);
bool cell_collision_at_pt_byval(bitmap bmp1, int32_t cell1, const point2d pt1, bitmap bmp2, int32_t cell2, const point2d pt2);
bool cell_collision(bitmap bmp1, int32_t cell1, float x1, float y1, bitmap bmp2, int32_t cell2, float x2, float y2);
bool cell_rect_collision_at_pt(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect);
bool cell_rect_collision_at_pt_byval(bitmap bmp, int32_t cell, const point2d pt, const rectangle rect);
bool cell_rect_collision(bitmap bmp, int32_t cell, float x, float y, const rectangle *rect);
bool cell_rect_collision_byval(bitmap bmp, int32_t cell, float x, float y, const rectangle rect);
bool circle_circle_collision(const circle *c1, const circle *c2);
bool circle_circle_collision_byval(const circle c1, const circle c2);
bool sprite_circle_line_collision(sprite s, const line_segment *line);
bool sprite_circle_line_collision_byval(sprite s, const line_segment line);
bool circle_rect_collision(const circle *c, const rectangle *rect);
bool circle_rect_collision_byval(const circle c, const rectangle rect);
bool circle_triangle_collision(const circle *c, const triangle  *tri);
bool circle_triangle_collision_byval(const circle c, const triangle  tri);
void collide_circle_circle(sprite s, const circle *c);
void collide_circle_circle_byval(sprite s, const circle c);
void collide_circle_line(sprite s, const line_segment *line);
void collide_circle_line_byval(sprite s, const line_segment line);
void collide_circle_rectangle(sprite s, const rectangle *rect);
void collide_circle_rectangle_byval(sprite s, const rectangle rect);
void collide_circle_triangle(sprite s, const triangle  *tri);
void collide_circle_triangle_byval(sprite s, const triangle  tri);
void collide_circles(sprite s1, sprite s2);
bool sprite_rect_line_collision(sprite s, const line_segment *line);
bool sprite_rect_line_collision_byval(sprite s, const line_segment line);
bool rect_line_collision(const rectangle *rect, const line_segment *line);
bool rect_line_collision_byval(const rectangle rect, const line_segment line);
collision_side side_for_collision_test(const vector *velocity);
collision_side side_for_collision_test_byval(const vector velocity);
bool sprite_at_point(sprite s, const point2d *pt);
bool sprite_at_point_byval(sprite s, const point2d pt);
bool sprite_bitmap_at_point_collision(sprite s, bitmap bmp, const point2d *pt);
bool sprite_bitmap_at_point_collision_byval(sprite s, bitmap bmp, const point2d pt);
bool sprite_bitmap_collision(sprite s, bitmap bmp, float x, float y);
bool sprite_collision(sprite s1, sprite s2);
bool sprite_rectangle_collision(sprite s, const rectangle *r);
bool sprite_rectangle_collision_byval(sprite s, const rectangle r);
bool sprite_rect_collision(sprite s, float x, float y, float width, float height);
bool triangle_line_collision(const triangle  *tri, const line_segment *ln);
bool triangle_line_collision_byval(const triangle  tri, const line_segment ln);

#ifdef __cplusplus
// C++ overloaded functions
bool bitmap_collision(bitmap bmp1, const point2d &pt1, bitmap bmp2, const point2d &pt2);
bool bitmap_collision(bitmap bmp1, const point2d &pt1, const rectangle &part1, bitmap bmp2, const point2d &pt2, const rectangle &part2);
bool bitmap_part_point_collision(bitmap bmp, float x, float y, const rectangle &part, const point2d &pt);
bool bitmap_part_point_collision(bitmap bmp, float x, float y, const rectangle &part, float ptX, float ptY);
bool bitmap_point_collision(bitmap bmp, float x, float y, const point2d &pt);
bool bitmap_rect_collision(bitmap bmp, float x, float y, const rectangle &rect);
bool bitmap_rect_collision(bitmap bmp, const point2d &pt, const rectangle &part, const rectangle &rect);
bool bitmap_rect_collision(bitmap bmp, float x, float y, const rectangle &part, const rectangle &rect);
bool cell_bitmap_collision(bitmap bmp1, int32_t cell, const point2d &pt1, bitmap bmp2, const point2d &pt2);
bool cell_bitmap_collision(bitmap bmp1, int32_t cell, const point2d &pt1, bitmap bmp2, const point2d &pt2, const rectangle &part);
bool cell_bitmap_collision(bitmap bmp1, int32_t cell, float x1, float y1, bitmap bmp2, float x2, float y2, const rectangle &part);
bool cell_collision(bitmap bmp1, int32_t cell1, const point2d &pt1, bitmap bmp2, int32_t cell2, const point2d &pt2);
bool cell_rect_collision(bitmap bmp, int32_t cell, const point2d &pt, const rectangle &rect);
bool cell_rect_collision(bitmap bmp, int32_t cell, float x, float y, const rectangle &rect);
bool circle_circle_collision(const circle &c1, const circle &c2);
bool circle_line_collision(sprite s, const line_segment &line);
bool circle_rect_collision(const circle &c, const rectangle &rect);
bool circle_triangle_collision(const circle &c, const triangle  &tri);
void collide_circle_circle(sprite s, const circle &c);
void collide_circle_line(sprite s, const line_segment &line);
void collide_circle_rectangle(sprite s, const rectangle &rect);
void collide_circle_triangle(sprite s, const triangle  &tri);
bool rect_line_collision(sprite s, const line_segment &line);
bool rect_line_collision(const rectangle &rect, const line_segment &line);
collision_side side_for_collision_test(const vector &velocity);
bool sprite_at_point(sprite s, const point2d &pt);
bool sprite_bitmap_collision(sprite s, bitmap bmp, const point2d &pt);
bool sprite_rect_collision(sprite s, const rectangle &r);
bool triangle_line_collision(const triangle  &tri, const line_segment &ln);

#endif

#endif

