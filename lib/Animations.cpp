/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Animations
*
* Wrapping sgAnimations.pas
*/

#include "SGSDK.h"
#include "Animations.h"

#include "Types.h"

int32_t animation_count(animation_script script)
{
    return sg_Animations_AnimationCount(script);
}

int32_t animation_current_cell(animation anim)
{
    return sg_Animations_AnimationCurrentCell(anim);
}

vector animation_current_vector(animation anim)
{
    return sg_Animations_AnimationCurrentVector(anim);
}

bool animation_ended(animation anim)
{
    return sg_Animations_AnimationEnded(anim) != 0;
}

bool animation_entered_frame(animation anim)
{
    return sg_Animations_AnimationEnteredFrame(anim) != 0;
}

float animation_frame_time(animation anim)
{
    return sg_Animations_AnimationFrameTime(anim);
}

int32_t animation_index(animation_script temp, const char *name)
{
    return sg_Animations_AnimationIndex(temp, name);
}

void animation_name(animation temp, char *result)
{
    sg_Animations_AnimationName(temp, result);
}

#ifdef __cplusplus

void animation_name(animation_script temp, int32_t idx, char *result)
{
    sg_Animations_AnimationScriptAnimationName(temp, idx, result);
}

#endif

void animation_script_animation_name(animation_script temp, int32_t idx, char *result)
{
    sg_Animations_AnimationScriptAnimationName(temp, idx, result);
}

void animation_script_name(animation_script script, char *result)
{
    sg_Animations_AnimationScriptName(script, result);
}

animation_script animation_script_named(const char *name)
{
    return sg_Animations_AnimationScriptNamed(name);
}

void assign_animation(animation anim, int32_t idx, animation_script script)
{
    sg_Animations_AssignAnimation(anim, idx, script);
}

#ifdef __cplusplus

void assign_animation(animation anim, const char *name, animation_script script)
{
    sg_Animations_AssignAnimationNamed(anim, name, script);
}

#endif

void assign_animation_named(animation anim, const char *name, animation_script script)
{
    sg_Animations_AssignAnimationNamed(anim, name, script);
}

#ifdef __cplusplus

void assign_animation(animation anim, const char *name, animation_script script, bool withSound)
{
    sg_Animations_AssignAnimationNamedWithSound(anim, name, script, withSound != 0);
}

#endif

void assign_animation_named_with_sound(animation anim, const char *name, animation_script script, bool withSound)
{
    sg_Animations_AssignAnimationNamedWithSound(anim, name, script, withSound != 0);
}

#ifdef __cplusplus

void assign_animation(animation anim, int32_t idx, animation_script script, bool withSound)
{
    sg_Animations_AssignAnimationWithSound(anim, idx, script, withSound != 0);
}

#endif

void assign_animation_with_sound(animation anim, int32_t idx, animation_script script, bool withSound)
{
    sg_Animations_AssignAnimationWithSound(anim, idx, script, withSound != 0);
}

#ifdef __cplusplus

animation create_animation(const char *identifier, animation_script script)
{
    return sg_Animations_CreateAnimationNamed(identifier, script);
}

#endif

animation create_animation_named(const char *identifier, animation_script script)
{
    return sg_Animations_CreateAnimationNamed(identifier, script);
}

#ifdef __cplusplus

animation create_animation(int32_t identifier, animation_script script)
{
    return sg_Animations_CreateAnimationWithSound(identifier, script);
}

#endif

animation create_animation_with_sound(int32_t identifier, animation_script script)
{
    return sg_Animations_CreateAnimationWithSound(identifier, script);
}

animation create_animation(int32_t identifier, animation_script script, bool withSound)
{
    return sg_Animations_CreateAnimation(identifier, script, withSound != 0);
}

#ifdef __cplusplus

animation create_animation(const char *identifier, animation_script script, bool withSound)
{
    return sg_Animations_CreateAnimationNamedWithSound(identifier, script, withSound != 0);
}

#endif

animation create_animation_named_with_sound(const char *identifier, animation_script script, bool withSound)
{
    return sg_Animations_CreateAnimationNamedWithSound(identifier, script, withSound != 0);
}

#ifdef __cplusplus

void draw_animation(animation ani, bitmap bmp, const point2d &pt)
{
    sg_Animations_DrawAnimationAtPoint(ani, bmp, &pt);
}

#endif

void draw_animation_at_point(animation ani, bitmap bmp, const point2d *pt)
{
    sg_Animations_DrawAnimationAtPoint(ani, bmp, pt);
}

void draw_animation_at_point_byval(animation ani, bitmap bmp, const point2d pt)
{
    sg_Animations_DrawAnimationAtPoint(ani, bmp, &pt);
}

#ifdef __cplusplus

void draw_animation(animation ani, bitmap bmp, const point2d &pt, const drawing_options &opts)
{
    sg_Animations_DrawAnimationAtPointWithOptions(ani, bmp, &pt, &opts);
}

#endif

void draw_animation_at_point_with_options(animation ani, bitmap bmp, const point2d *pt, const drawing_options *opts)
{
    sg_Animations_DrawAnimationAtPointWithOptions(ani, bmp, pt, opts);
}

void draw_animation_at_point_with_options_byval(animation ani, bitmap bmp, const point2d pt, const drawing_options opts)
{
    sg_Animations_DrawAnimationAtPointWithOptions(ani, bmp, &pt, &opts);
}

void draw_animation(animation ani, bitmap bmp, float x, float y)
{
    sg_Animations_DrawAnimation(ani, bmp, x, y);
}

#ifdef __cplusplus

void draw_animation(animation ani, bitmap bmp, float x, float y, const drawing_options &opts)
{
    sg_Animations_DrawAnimationWithOptions(ani, bmp, x, y, &opts);
}

#endif

void draw_animation_with_options(animation ani, bitmap bmp, float x, float y, const drawing_options *opts)
{
    sg_Animations_DrawAnimationWithOptions(ani, bmp, x, y, opts);
}

void draw_animation_with_options_byval(animation ani, bitmap bmp, float x, float y, const drawing_options opts)
{
    sg_Animations_DrawAnimationWithOptions(ani, bmp, x, y, &opts);
}

#ifdef __cplusplus

void free_animation(animation &ani)
{
    sg_Animations_FreeAnimation(&ani);
}

#endif

void free_animation(animation *ani)
{
    sg_Animations_FreeAnimation(ani);
}

#ifdef __cplusplus

void free_animation_script(animation_script &scriptToFree)
{
    sg_Animations_FreeAnimationScript(&scriptToFree);
}

#endif

void free_animation_script(animation_script *scriptToFree)
{
    sg_Animations_FreeAnimationScript(scriptToFree);
}

bool has_animation_script(const char *name)
{
    return sg_Animations_HasAnimationScript(name) != 0;
}

animation_script load_animation_script(const char *filename)
{
    return sg_Animations_LoadAnimationScript(filename);
}

animation_script load_animation_script_named(const char *name, const char *filename)
{
    return sg_Animations_LoadAnimationScriptNamed(name, filename);
}

void release_all_animation_scripts()
{
    sg_Animations_ReleaseAllAnimationScripts();
}

void release_animation_script(const char *name)
{
    sg_Animations_ReleaseAnimationScript(name);
}

void restart_animation(animation anim)
{
    sg_Animations_RestartAnimation(anim);
}

#ifdef __cplusplus

void restart_animation(animation anim, bool withSound)
{
    sg_Animations_ResetAnimationWithSound(anim, withSound != 0);
}

#endif

void reset_animation_with_sound(animation anim, bool withSound)
{
    sg_Animations_ResetAnimationWithSound(anim, withSound != 0);
}

void update_animation(animation anim)
{
    sg_Animations_UpdateAnimation(anim);
}

#ifdef __cplusplus

void update_animation(animation anim, float pct)
{
    sg_Animations_UpdateAnimationPct(anim, pct);
}

#endif

void update_animation_pct(animation anim, float pct)
{
    sg_Animations_UpdateAnimationPct(anim, pct);
}

#ifdef __cplusplus

void update_animation(animation anim, float pct, bool withSound)
{
    sg_Animations_UpdateAnimationPctAndSound(anim, pct, withSound != 0);
}

#endif

void update_animation_pct_and_sound(animation anim, float pct, bool withSound)
{
    sg_Animations_UpdateAnimationPctAndSound(anim, pct, withSound != 0);
}

