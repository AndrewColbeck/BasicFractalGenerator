/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Networking
*
* Wrapping sgNetworking.pas
*/

#include "SGSDK.h"
#include "Networking.h"

#include "Types.h"

void broadcast_message(const char *aMsg)
{
    sg_Networking_BroadcastMessage(aMsg);
}

#ifdef __cplusplus

void broadcast_message(const char *aMsg, const char *name)
{
    sg_Networking_BroadcastMessageToServerNamed(aMsg, name);
}

#endif

void broadcast_message_to_server_named(const char *aMsg, const char *name)
{
    sg_Networking_BroadcastMessageToServerNamed(aMsg, name);
}

#ifdef __cplusplus

void broadcast_message(const char *aMsg, server_socket svr)
{
    sg_Networking_BroadcastMessageToServer(aMsg, svr);
}

#endif

void broadcast_message_to_server(const char *aMsg, server_socket svr)
{
    sg_Networking_BroadcastMessageToServer(aMsg, svr);
}

void check_network_activity()
{
    sg_Networking_CheckNetworkActivity();
}

#ifdef __cplusplus

void clear_messages(server_socket svr)
{
    sg_Networking_ServerClearMessages(svr);
}

#endif

void server_clear_messages(server_socket svr)
{
    sg_Networking_ServerClearMessages(svr);
}

#ifdef __cplusplus

void clear_messages(connection aConnection)
{
    sg_Networking_ConnectionClearMessages(aConnection);
}

#endif

void connection_clear_messages(connection aConnection)
{
    sg_Networking_ConnectionClearMessages(aConnection);
}

#ifdef __cplusplus

void clear_messages(const char *name)
{
    sg_Networking_ClearMessagesNamed(name);
}

#endif

void clear_messages_named(const char *name)
{
    sg_Networking_ClearMessagesNamed(name);
}

void close_all_connections()
{
    sg_Networking_CloseAllConnections();
}

void close_all_servers()
{
    sg_Networking_CloseAllServers();
}

void close_all_udpsockets()
{
    sg_Networking_CloseAllUDPSockets();
}

#ifdef __cplusplus

bool close_connection(connection &aConnection)
{
    return sg_Networking_CloseConnection(&aConnection) != 0;
}

#endif

bool close_connection(connection *aConnection)
{
    return sg_Networking_CloseConnection(aConnection) != 0;
}

#ifdef __cplusplus

bool close_connection(const char *name)
{
    return sg_Networking_CloseConnectionNamed(name) != 0;
}

#endif

bool close_connection_named(const char *name)
{
    return sg_Networking_CloseConnectionNamed(name) != 0;
}

void close_message(message msg)
{
    sg_Networking_CloseMessage(msg);
}

#ifdef __cplusplus

bool close_server(server_socket &svr)
{
    return sg_Networking_CloseServer(&svr) != 0;
}

#endif

bool close_server(server_socket *svr)
{
    return sg_Networking_CloseServer(svr) != 0;
}

#ifdef __cplusplus

bool close_server(const char *name)
{
    return sg_Networking_CloseServerNamed(name) != 0;
}

#endif

bool close_server_named(const char *name)
{
    return sg_Networking_CloseServerNamed(name) != 0;
}

bool close_udpsocket(unsigned short int aPort)
{
    return sg_Networking_CloseUDPSocket(aPort) != 0;
}

#ifdef __cplusplus

int32_t connection_count(const char *name)
{
    return sg_Networking_ConnectionCountForServerNamed(name);
}

#endif

int32_t connection_count_for_server_named(const char *name)
{
    return sg_Networking_ConnectionCountForServerNamed(name);
}

int32_t connection_count(server_socket server)
{
    return sg_Networking_ConnectionCount(server);
}

#ifdef __cplusplus

uint32_t connection_ip(const char *name)
{
    return sg_Networking_ConnectionIPNamed(name);
}

#endif

uint32_t connection_ipnamed(const char *name)
{
    return sg_Networking_ConnectionIPNamed(name);
}

uint32_t connection_ip(connection aConnection)
{
    return sg_Networking_ConnectionIP(aConnection);
}

connection connection_named(const char *name)
{
    return sg_Networking_ConnectionNamed(name);
}

bool connection_open(connection con)
{
    return sg_Networking_ConnectionOpen(con) != 0;
}

#ifdef __cplusplus

bool connection_open(const char *name)
{
    return sg_Networking_ConnectionOpenNamed(name) != 0;
}

#endif

bool connection_open_named(const char *name)
{
    return sg_Networking_ConnectionOpenNamed(name) != 0;
}

unsigned short int connection_port(connection aConnection)
{
    return sg_Networking_ConnectionPort(aConnection);
}

#ifdef __cplusplus

unsigned short int connection_port(const char *name)
{
    return sg_Networking_ConnectionPortNamed(name);
}

#endif

unsigned short int connection_port_named(const char *name)
{
    return sg_Networking_ConnectionPortNamed(name);
}

server_socket create_server(const char *name, unsigned short int port)
{
    return sg_Networking_CreateServer(name, port);
}

#ifdef __cplusplus

server_socket create_server(const char *name, unsigned short int port, connection_type protocol)
{
    return sg_Networking_CreateServerWithProtocol(name, port, protocol);
}

#endif

server_socket create_server_with_protocol(const char *name, unsigned short int port, connection_type protocol)
{
    return sg_Networking_CreateServerWithProtocol(name, port, protocol);
}

void dec_to_hex(uint32_t aDec, char *result)
{
    sg_Networking_DecToHex(aDec, result);
}

#ifdef __cplusplus

void free_connection(connection &aConnection)
{
    sg_Networking_FreeConnection(&aConnection);
}

#endif

void free_connection(connection *aConnection)
{
    sg_Networking_FreeConnection(aConnection);
}

#ifdef __cplusplus

void free_server(server_socket &svr)
{
    sg_Networking_FreeServer(&svr);
}

#endif

void free_server(server_socket *svr)
{
    sg_Networking_FreeServer(svr);
}

bool has_messages()
{
    return sg_Networking_HasMessages() != 0;
}

#ifdef __cplusplus

bool has_messages(connection con)
{
    return sg_Networking_HasMessageOnConnection(con) != 0;
}

#endif

bool has_message_on_connection(connection con)
{
    return sg_Networking_HasMessageOnConnection(con) != 0;
}

#ifdef __cplusplus

bool has_messages(server_socket svr)
{
    return sg_Networking_HasMessageOnServer(svr) != 0;
}

#endif

bool has_message_on_server(server_socket svr)
{
    return sg_Networking_HasMessageOnServer(svr) != 0;
}

#ifdef __cplusplus

bool has_messages(const char *name)
{
    return sg_Networking_HasMessageOnConnectionNamed(name) != 0;
}

#endif

bool has_message_on_connection_named(const char *name)
{
    return sg_Networking_HasMessageOnConnectionNamed(name) != 0;
}

bool has_new_connections()
{
    return sg_Networking_HasNewConnections() != 0;
}

void hex_str_to_ipv4(const char *aHex, char *result)
{
    sg_Networking_HexStrToIPv4(aHex, result);
}

void hex_to_dec_string(const char *aHex, char *result)
{
    sg_Networking_HexToDecString(aHex, result);
}

uint32_t ipv4_to_dec(const char *aIP)
{
    return sg_Networking_IPv4ToDec(aIP);
}

void ipv4_to_str(uint32_t ip, char *result)
{
    sg_Networking_IPv4ToStr(ip, result);
}

connection last_connection(server_socket server)
{
    return sg_Networking_LastConnection(server);
}

#ifdef __cplusplus

connection last_connection(const char *name)
{
    return sg_Networking_LastConnectionForServerNamed(name);
}

#endif

connection last_connection_for_server_named(const char *name)
{
    return sg_Networking_LastConnectionForServerNamed(name);
}

connection message_connection(message msg)
{
    return sg_Networking_MessageConnection(msg);
}

#ifdef __cplusplus

int32_t message_count(connection aConnection)
{
    return sg_Networking_ConnectionMessageCount(aConnection);
}

#endif

int32_t connection_message_count(connection aConnection)
{
    return sg_Networking_ConnectionMessageCount(aConnection);
}

#ifdef __cplusplus

int32_t message_count(const char *name)
{
    return sg_Networking_MessageCountOnConnectionNamed(name);
}

#endif

int32_t message_count_on_connection_named(const char *name)
{
    return sg_Networking_MessageCountOnConnectionNamed(name);
}

#ifdef __cplusplus

int32_t message_count(server_socket svr)
{
    return sg_Networking_ServerMessageCount(svr);
}

#endif

int32_t server_message_count(server_socket svr)
{
    return sg_Networking_ServerMessageCount(svr);
}

void message_data(message msg, char *result)
{
    sg_Networking_MessageData(msg, result);
}

void message_host(message msg, char *result)
{
    sg_Networking_MessageHost(msg, result);
}

unsigned short int message_port(message msg)
{
    return sg_Networking_MessagePort(msg);
}

connection_type message_protocol(message msg)
{
    return sg_Networking_MessageProtocol(msg);
}

void my_ip(char *result)
{
    sg_Networking_MyIP(result);
}

connection open_connection(const char *host, unsigned short int port)
{
    return sg_Networking_OpenConnection(host, port);
}

#ifdef __cplusplus

connection open_connection(const char *name, const char *host, unsigned short int port)
{
    return sg_Networking_OpenConnectionNamed(name, host, port);
}

#endif

connection open_connection_named(const char *name, const char *host, unsigned short int port)
{
    return sg_Networking_OpenConnectionNamed(name, host, port);
}

#ifdef __cplusplus

connection open_connection(const char *name, const char *host, unsigned short int port, connection_type protocol)
{
    return sg_Networking_OpenConnectionNamedWithProtocol(name, host, port, protocol);
}

#endif

connection open_connection_named_with_protocol(const char *name, const char *host, unsigned short int port, connection_type protocol)
{
    return sg_Networking_OpenConnectionNamedWithProtocol(name, host, port, protocol);
}

message read_message(connection aConnection)
{
    return sg_Networking_ReadMessage(aConnection);
}

#ifdef __cplusplus

message read_message(const char *name)
{
    return sg_Networking_ReadMessageNamed(name);
}

#endif

message read_message_named(const char *name)
{
    return sg_Networking_ReadMessageNamed(name);
}

#ifdef __cplusplus

message read_message(server_socket svr)
{
    return sg_Networking_ReadMessageFromServer(svr);
}

#endif

message read_message_from_server(server_socket svr)
{
    return sg_Networking_ReadMessageFromServer(svr);
}

void read_message_data(connection aConnection, char *result)
{
    sg_Networking_ReadMessageData(aConnection, result);
}

#ifdef __cplusplus

void read_message_data(server_socket svr, char *result)
{
    sg_Networking_ReadMessageDataFromServer(svr, result);
}

#endif

void read_message_data_from_server(server_socket svr, char *result)
{
    sg_Networking_ReadMessageDataFromServer(svr, result);
}

#ifdef __cplusplus

void read_message_data(const char *name, char *result)
{
    sg_Networking_ReadMessageDataNamed(name, result);
}

#endif

void read_message_data_named(const char *name, char *result)
{
    sg_Networking_ReadMessageDataNamed(name, result);
}

#ifdef __cplusplus

void reconnect(const char *name)
{
    sg_Networking_ReconnectConnectionNamed(name);
}

#endif

void reconnect_connection_named(const char *name)
{
    sg_Networking_ReconnectConnectionNamed(name);
}

void reconnect(connection aConnection)
{
    sg_Networking_Reconnect(aConnection);
}

void release_all_connections()
{
    sg_Networking_ReleaseAllConnections();
}

#ifdef __cplusplus

connection retreive_connection(const char *name, int32_t idx)
{
    return sg_Networking_RetrieveConnectionFromServerNamed(name, idx);
}

#endif

connection retrieve_connection_from_server_named(const char *name, int32_t idx)
{
    return sg_Networking_RetrieveConnectionFromServerNamed(name, idx);
}

connection retreive_connection(server_socket server, int32_t idx)
{
    return sg_Networking_RetreiveConnection(server, idx);
}

bool send_message_to(const char *aMsg, connection aConnection)
{
    return sg_Networking_SendMessageTo(aMsg, aConnection) != 0;
}

#ifdef __cplusplus

bool send_message_to(const char *aMsg, const char *name)
{
    return sg_Networking_SendMessageToConnectionNamed(aMsg, name) != 0;
}

#endif

bool send_message_to_connection_named(const char *aMsg, const char *name)
{
    return sg_Networking_SendMessageToConnectionNamed(aMsg, name) != 0;
}

#ifdef __cplusplus

bool server_has_new_connection(const char *name)
{
    return sg_Networking_ServerNamedHasNewConnection(name) != 0;
}

#endif

bool server_named_has_new_connection(const char *name)
{
    return sg_Networking_ServerNamedHasNewConnection(name) != 0;
}

bool server_has_new_connection(server_socket server)
{
    return sg_Networking_ServerHasNewConnection(server) != 0;
}

server_socket server_named(const char *name)
{
    return sg_Networking_ServerNamed(name);
}

void set_udppacket_size(int32_t val)
{
    sg_Networking_SetUDPPacketSize(val);
}

int32_t udppacket_size()
{
    return sg_Networking_UDPPacketSize();
}

