/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - DrawingOptions
*
* Wrapping sgDrawingOptions.pas
*/

#include "SGSDK.h"
#include "DrawingOptions.h"

#include "Types.h"

drawing_options option_defaults()
{
    return sg_DrawingOptions_OptionDefaults();
}

#ifdef __cplusplus

drawing_options option_draw_to(window dest)
{
    return sg_DrawingOptions_OptionDrawToWindow(dest);
}

#endif

drawing_options option_draw_to_window(window dest)
{
    return sg_DrawingOptions_OptionDrawToWindow(dest);
}

#ifdef __cplusplus

drawing_options option_draw_to(bitmap dest)
{
    return sg_DrawingOptions_OptionDrawToBitmap(dest);
}

#endif

drawing_options option_draw_to_bitmap(bitmap dest)
{
    return sg_DrawingOptions_OptionDrawToBitmap(dest);
}

#ifdef __cplusplus

drawing_options option_draw_to(bitmap dest, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionDrawToBitmapOpts(dest, &opts);
}

#endif

drawing_options option_draw_to_bitmap_opts(bitmap dest, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionDrawToBitmapOpts(dest, opts);
}

drawing_options option_draw_to_bitmap_opts_byval(bitmap dest, const drawing_options opts)
{
    return sg_DrawingOptions_OptionDrawToBitmapOpts(dest, &opts);
}

#ifdef __cplusplus

drawing_options option_draw_to(window dest, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionDrawToWindowOpts(dest, &opts);
}

#endif

drawing_options option_draw_to_window_opts(window dest, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionDrawToWindowOpts(dest, opts);
}

drawing_options option_draw_to_window_opts_byval(window dest, const drawing_options opts)
{
    return sg_DrawingOptions_OptionDrawToWindowOpts(dest, &opts);
}

drawing_options option_flip_x()
{
    return sg_DrawingOptions_OptionFlipX();
}

#ifdef __cplusplus

drawing_options option_flip_x(const drawing_options &opts)
{
    return sg_DrawingOptions_OptionFlipXOpts(&opts);
}

#endif

drawing_options option_flip_xopts(const drawing_options *opts)
{
    return sg_DrawingOptions_OptionFlipXOpts(opts);
}

drawing_options option_flip_xopts_byval(const drawing_options opts)
{
    return sg_DrawingOptions_OptionFlipXOpts(&opts);
}

drawing_options option_flip_xy()
{
    return sg_DrawingOptions_OptionFlipXY();
}

#ifdef __cplusplus

drawing_options option_flip_xy(const drawing_options &opts)
{
    return sg_DrawingOptions_OptionFlipXYOpts(&opts);
}

#endif

drawing_options option_flip_xyopts(const drawing_options *opts)
{
    return sg_DrawingOptions_OptionFlipXYOpts(opts);
}

drawing_options option_flip_xyopts_byval(const drawing_options opts)
{
    return sg_DrawingOptions_OptionFlipXYOpts(&opts);
}

drawing_options option_flip_y()
{
    return sg_DrawingOptions_OptionFlipY();
}

#ifdef __cplusplus

drawing_options option_flip_y(const drawing_options &opts)
{
    return sg_DrawingOptions_OptionFlipYOpts(&opts);
}

#endif

drawing_options option_flip_yopts(const drawing_options *opts)
{
    return sg_DrawingOptions_OptionFlipYOpts(opts);
}

drawing_options option_flip_yopts_byval(const drawing_options opts)
{
    return sg_DrawingOptions_OptionFlipYOpts(&opts);
}

drawing_options option_line_width(int32_t width)
{
    return sg_DrawingOptions_OptionLineWidth(width);
}

#ifdef __cplusplus

drawing_options option_line_width(int32_t width, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionLineWidthOpts(width, &opts);
}

#endif

drawing_options option_line_width_opts(int32_t width, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionLineWidthOpts(width, opts);
}

drawing_options option_line_width_opts_byval(int32_t width, const drawing_options opts)
{
    return sg_DrawingOptions_OptionLineWidthOpts(width, &opts);
}

#ifdef __cplusplus

drawing_options option_part_bmp(const rectangle &part)
{
    return sg_DrawingOptions_OptionPartBmpRect(&part);
}

#endif

drawing_options option_part_bmp_rect(const rectangle *part)
{
    return sg_DrawingOptions_OptionPartBmpRect(part);
}

drawing_options option_part_bmp_rect_byval(const rectangle part)
{
    return sg_DrawingOptions_OptionPartBmpRect(&part);
}

#ifdef __cplusplus

drawing_options option_part_bmp(const rectangle &part, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionPartBmpRectOpts(&part, &opts);
}

#endif

drawing_options option_part_bmp_rect_opts(const rectangle *part, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionPartBmpRectOpts(part, opts);
}

drawing_options option_part_bmp_rect_opts_byval(const rectangle part, const drawing_options opts)
{
    return sg_DrawingOptions_OptionPartBmpRectOpts(&part, &opts);
}

drawing_options option_part_bmp(float x, float y, float w, float h)
{
    return sg_DrawingOptions_OptionPartBmp(x, y, w, h);
}

#ifdef __cplusplus

drawing_options option_part_bmp(float x, float y, float w, float h, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionPartBmpOpts(x, y, w, h, &opts);
}

#endif

drawing_options option_part_bmp_opts(float x, float y, float w, float h, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionPartBmpOpts(x, y, w, h, opts);
}

drawing_options option_part_bmp_opts_byval(float x, float y, float w, float h, const drawing_options opts)
{
    return sg_DrawingOptions_OptionPartBmpOpts(x, y, w, h, &opts);
}

#ifdef __cplusplus

drawing_options option_rotate_bmp(float angle)
{
    return sg_DrawingOptions_OptionRotateBmpAngle(angle);
}

#endif

drawing_options option_rotate_bmp_angle(float angle)
{
    return sg_DrawingOptions_OptionRotateBmpAngle(angle);
}

#ifdef __cplusplus

drawing_options option_rotate_bmp(float angle, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionRotateBmpAngleOpts(angle, &opts);
}

#endif

drawing_options option_rotate_bmp_angle_opts(float angle, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionRotateBmpAngleOpts(angle, opts);
}

drawing_options option_rotate_bmp_angle_opts_byval(float angle, const drawing_options opts)
{
    return sg_DrawingOptions_OptionRotateBmpAngleOpts(angle, &opts);
}

drawing_options option_rotate_bmp(float angle, float anchorX, float anchorY)
{
    return sg_DrawingOptions_OptionRotateBmp(angle, anchorX, anchorY);
}

#ifdef __cplusplus

drawing_options option_rotate_bmp(float angle, float anchorX, float anchorY, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionRotateBmpOpts(angle, anchorX, anchorY, &opts);
}

#endif

drawing_options option_rotate_bmp_opts(float angle, float anchorX, float anchorY, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionRotateBmpOpts(angle, anchorX, anchorY, opts);
}

drawing_options option_rotate_bmp_opts_byval(float angle, float anchorX, float anchorY, const drawing_options opts)
{
    return sg_DrawingOptions_OptionRotateBmpOpts(angle, anchorX, anchorY, &opts);
}

drawing_options option_scale_bmp(float scaleX, float scaleY)
{
    return sg_DrawingOptions_OptionScaleBmp(scaleX, scaleY);
}

#ifdef __cplusplus

drawing_options option_scale_bmp(float scaleX, float scaleY, const drawing_options &opts)
{
    return sg_DrawingOptions_OptionScaleBmpOpts(scaleX, scaleY, &opts);
}

#endif

drawing_options option_scale_bmp_opts(float scaleX, float scaleY, const drawing_options *opts)
{
    return sg_DrawingOptions_OptionScaleBmpOpts(scaleX, scaleY, opts);
}

drawing_options option_scale_bmp_opts_byval(float scaleX, float scaleY, const drawing_options opts)
{
    return sg_DrawingOptions_OptionScaleBmpOpts(scaleX, scaleY, &opts);
}

drawing_options option_to_screen()
{
    return sg_DrawingOptions_OptionToScreen();
}

#ifdef __cplusplus

drawing_options option_to_screen(const drawing_options &opts)
{
    return sg_DrawingOptions_OptionToScreenOpts(&opts);
}

#endif

drawing_options option_to_screen_opts(const drawing_options *opts)
{
    return sg_DrawingOptions_OptionToScreenOpts(opts);
}

drawing_options option_to_screen_opts_byval(const drawing_options opts)
{
    return sg_DrawingOptions_OptionToScreenOpts(&opts);
}

drawing_options option_to_world()
{
    return sg_DrawingOptions_OptionToWorld();
}

#ifdef __cplusplus

drawing_options option_to_world(const drawing_options &opts)
{
    return sg_DrawingOptions_OptionToWorldOpts(&opts);
}

#endif

drawing_options option_to_world_opts(const drawing_options *opts)
{
    return sg_DrawingOptions_OptionToWorldOpts(opts);
}

drawing_options option_to_world_opts_byval(const drawing_options opts)
{
    return sg_DrawingOptions_OptionToWorldOpts(&opts);
}

